{"version":3,"sources":["../node_modules/@tonaljs/scale-dictionary/node_modules/@tonaljs/tonal/dist/index.esnext.js","../node_modules/@tonaljs/scale-dictionary/node_modules/@tonaljs/array/dist/index.esnext.js","../node_modules/@tonaljs/scale-dictionary/node_modules/@tonaljs/pcset/dist/index.esnext.js","../node_modules/@tonaljs/scale-dictionary/dist/index.esnext.js","PianoRoll.js","MidiExploder.js"],"names":["isNamed","src","name","isPitch","pitch","step","alt","FIFTHS","STEPS_TO_OCTS","map","fifths","Math","floor","encode","oct","_pitch$dir","dir","f","undefined","NoNote","empty","pc","acc","cache","fillStr","s","n","Array","join","stepToLetter","charAt","altToAcc","accToAlt","length","index_esnext_note","noteName","tokens","str","m","REGEX","exec","toUpperCase","replace","tokenize","letter","octStr","charCodeAt","coord","chroma","SEMI","o","height","midi","freq","pow","parse","props","pitchName","NoInterval","REGEX$1","RegExp","cache$1","index_esnext_interval","concat","tokenize$1","num","q","abs","t","TYPES","type","simple","test","qToAlt","semitones","SIZES","parse$1","_props$oct","d","fillStr$1","altToQ","pitchName$1","rotate","times","arr","len","slice","EmptyPcset","setNum","normalized","intervals","setNumToChroma","Number","toString","chromaToNumber","parseInt","index_esnext_REGEX","isChroma","set","isPcsetNum","isPcset","index_esnext_cache","Object","defineProperty","pcset","isArray","binary","i","listToChroma","normalizedNum","split","_","chromaRotations","filter","sort","push","IVLS","chromaToIntervals","chromaToPcset","objectSpread","aliases","scales","_ref","_ref2","toArray","ivls","index","reduce","scale","forEach","alias","keys","PIANOROLL_NOTE_HEIGHT","PIANOROLL_QUARTER_WIDTH","clamp","val","min","max","getOffsetInTarget","e","rect","currentTarget","getBoundingClientRect","x","pageX","window","scrollX","width","y","pageY","scrollY","getSelectionBox","state","startX","start","end","startY","left","top","PianoRollTrack","extents","track","trackIdx","tracksWidth","midiRange","selectedNotes","setSelectedNotes","selectionRef","React","useRef","dragging","selectionElRef","updateSelectionEl","el","current","style","visibility","box","getNoteLayout","useCallback","ev","ticks","header","ppq","minNote","durationTicks","selectNotes","notes","a","b","ax1","ay1","ax2","ay2","bx1","by1","bx2","by2","collision","Set","onMouseDown","onMouseMove","onMouseUp","react_default","createElement","onMouseLeave","position","borderBottom","toConsumableArray","offset","Midi","key","background","Tonal","borderTop","overflow","marginTop","fontSize","fontFamily","evIdx","has","border","ref","Piano","trackExtents","useMemo","tracks","maxNote","maxTicks","ex","textAlign","open","allScales","octave","NOTE_ON","NOTE_OFF","velocityMidi","SelectionInfo","scaleData","notePlayer","selectedNotesSet","note","matchingScales","keyScales","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","value","includes","err","return","scaleNotes","reifyScaleNotesWithOctave","Keyboard","highlightKeys","startOctave","octaves","highlightType","interval","tonic","makeScaleData","scaleType","Scale","scaleDef","notesAbstractMidi","MidiExploder","audioApi","_usePersistedMidiFile","_useLocalStorage","useLocalStorage","_useLocalStorage2","slicedToArray","midiJSONObj","setMidiJSONObj","midiFile","ToneJSMidi","fromJSON","console","error","toJSON","usePersistedMidiFile","_usePersistedMidiFile2","setMidiFile","_useQueryParam","useQueryParam","QUERY_PARAM_FORMATS","string","_useQueryParam2","setKey","_useQueryParam3","_useQueryParam4","setScaleType","handleFiles","files","file","reader","FileReader","onload","result","readAsArrayBuffer","_React$useState","useState","_React$useState2","highlightedKeys","setHighlightedKeys","setHighlightedScale","useValueObserver","onMidi","dx7","message","triggerAttack","triggerRelease","_React$useState3","_React$useState4","className","onChange","onMouseOver","event","Note","JSON","stringify","display","assign"],"mappings":"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","file":"static/js/5.a6b275fc.chunk.js","sourcesContent":["import _slicedToArray from \"/Users/jfriend/code/scaletoy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction isNamed(src) {\n  return typeof src === \"object\" && typeof src.name === \"string\";\n}\n\nfunction isPitch(pitch) {\n  return typeof pitch === \"object\" && typeof pitch.step === \"number\" && typeof pitch.alt === \"number\";\n} // The nuuber of fifths of [C, D, E, F, G, A, B]\n\n\nvar FIFTHS = [0, 2, 4, -1, 1, 3, 5]; // The number of octaves it span each step\n\nvar STEPS_TO_OCTS = FIFTHS.map(function (fifths) {\n  return Math.floor(fifths * 7 / 12);\n});\n\nfunction encode(pitch) {\n  var step = pitch.step,\n      alt = pitch.alt,\n      oct = pitch.oct,\n      _pitch$dir = pitch.dir,\n      dir = _pitch$dir === void 0 ? 1 : _pitch$dir;\n  var f = FIFTHS[step] + 7 * alt;\n\n  if (oct === undefined) {\n    return [dir * f];\n  }\n\n  var o = oct - STEPS_TO_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n} // We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\n\n\nvar FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\n\nfunction decode(coord) {\n  var _coord = _slicedToArray(coord, 3),\n      f = _coord[0],\n      o = _coord[1],\n      dir = _coord[2];\n\n  var step = FIFTHS_TO_STEPS[unaltered(f)];\n  var alt = Math.floor((f + 1) / 7);\n\n  if (o === undefined) {\n    return {\n      step: step,\n      alt: alt,\n      dir: dir\n    };\n  }\n\n  var oct = o + 4 * alt + STEPS_TO_OCTS[step];\n  return {\n    step: step,\n    alt: alt,\n    oct: oct,\n    dir: dir\n  };\n} // Return the number of fifths as if it were unaltered\n\n\nfunction unaltered(f) {\n  var i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n\nvar NoNote = {\n  empty: true,\n  name: \"\",\n  pc: \"\",\n  acc: \"\"\n};\nvar cache = {};\n\nvar fillStr = function fillStr(s, n) {\n  return Array(n + 1).join(s);\n};\n\nvar stepToLetter = function stepToLetter(step) {\n  return \"CDEFGAB\".charAt(step);\n};\n\nvar altToAcc = function altToAcc(alt) {\n  return alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\n};\n\nvar accToAlt = function accToAlt(acc) {\n  return acc[0] === \"b\" ? -acc.length : acc.length;\n};\n/**\r\n * Given a note literal (a note name or a note object), returns the Note object\r\n * @example\r\n * note('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\r\n */\n\n\nfunction note(src) {\n  return typeof src === \"string\" ? cache[src] || (cache[src] = parse(src)) : isPitch(src) ? note(pitchName(src)) : isNamed(src) ? note(src.name) : NoNote;\n}\n\nvar REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\n/**\r\n * @private\r\n */\n\nfunction tokenize(str) {\n  var m = REGEX.exec(str);\n  return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\n}\n/**\r\n * @private\r\n */\n\n\nfunction coordToNote(noteCoord) {\n  return note(decode(noteCoord));\n}\n\nvar SEMI = [0, 2, 4, 5, 7, 9, 11];\n\nfunction parse(noteName) {\n  var tokens = tokenize(noteName);\n\n  if (tokens[0] === \"\" || tokens[3] !== \"\") {\n    return NoNote;\n  }\n\n  var letter = tokens[0];\n  var acc = tokens[1];\n  var octStr = tokens[2];\n  var step = (letter.charCodeAt(0) + 3) % 7;\n  var alt = accToAlt(acc);\n  var oct = octStr.length ? +octStr : undefined;\n  var coord = encode({\n    step: step,\n    alt: alt,\n    oct: oct\n  });\n  var name = letter + acc + octStr;\n  var pc = letter + acc;\n  var chroma = (SEMI[step] + alt + 120) % 12;\n  var o = oct === undefined ? -100 : oct;\n  var height = SEMI[step] + alt + 12 * (o + 1);\n  var midi = height >= 0 && height <= 127 ? height : null;\n  var freq = oct === undefined ? null : Math.pow(2, (height - 69) / 12) * 440;\n  return {\n    empty: false,\n    acc: acc,\n    alt: alt,\n    chroma: chroma,\n    coord: coord,\n    freq: freq,\n    height: height,\n    letter: letter,\n    midi: midi,\n    name: name,\n    oct: oct,\n    pc: pc,\n    step: step\n  };\n}\n\nfunction pitchName(props) {\n  var step = props.step,\n      alt = props.alt,\n      oct = props.oct;\n  var letter = stepToLetter(step);\n\n  if (!letter) {\n    return \"\";\n  }\n\n  var pc = letter + altToAcc(alt);\n  return oct || oct === 0 ? pc + oct : pc;\n}\n\nvar NoInterval = {\n  empty: true,\n  name: \"\",\n  acc: \"\"\n}; // shorthand tonal notation (with quality after number)\n\nvar INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\"; // standard shorthand notation (with quality before number)\n\nvar INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nvar REGEX$1 = new RegExp(\"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\");\n/**\r\n * @private\r\n */\n\nfunction tokenize$1(str) {\n  var m = REGEX$1.exec(\"\".concat(str));\n\n  if (m === null) {\n    return [\"\", \"\"];\n  }\n\n  return m[1] ? [m[1], m[2]] : [m[4], m[3]];\n}\n\nvar cache$1 = {};\n/**\r\n * Get interval properties. It returns an object with:\r\n *\r\n * - name: the interval name\r\n * - num: the interval number\r\n * - type: 'perfectable' or 'majorable'\r\n * - q: the interval quality (d, m, M, A)\r\n * - dir: interval direction (1 ascending, -1 descending)\r\n * - simple: the simplified number\r\n * - semitones: the size in semitones\r\n * - chroma: the interval chroma\r\n *\r\n * @param {string} interval - the interval name\r\n * @return {Object} the interval properties\r\n *\r\n * @example\r\n * import { interval } from '@tonaljs/tonal'\r\n * interval('P5').semitones // => 7\r\n * interval('m3').type // => 'majorable'\r\n */\n\nfunction interval(src) {\n  return typeof src === \"string\" ? cache$1[src] || (cache$1[src] = parse$1(src)) : isPitch(src) ? interval(pitchName$1(src)) : isNamed(src) ? interval(src.name) : NoInterval;\n}\n\nvar SIZES = [0, 2, 4, 5, 7, 9, 11];\nvar TYPES = \"PMMPPMM\";\n\nfunction parse$1(str) {\n  var tokens = tokenize$1(str);\n\n  if (tokens[0] === \"\") {\n    return NoInterval;\n  }\n\n  var num = +tokens[0];\n  var q = tokens[1];\n  var step = (Math.abs(num) - 1) % 7;\n  var t = TYPES[step];\n\n  if (t === \"M\" && q === \"P\") {\n    return NoInterval;\n  }\n\n  var type = t === \"M\" ? \"majorable\" : \"perfectable\";\n  var name = \"\" + num + q;\n  var dir = num < 0 ? -1 : 1;\n  var simple = num === 8 || num === -8 ? num : dir * (step + 1);\n  var alt = qToAlt(type, q);\n  var oct = Math.floor((Math.abs(num) - 1) / 7);\n  var semitones = dir * (SIZES[step] + alt + 12 * oct);\n  var chroma = (dir * (SIZES[step] + alt) % 12 + 12) % 12;\n  var coord = encode({\n    step: step,\n    alt: alt,\n    oct: oct,\n    dir: dir\n  });\n  return {\n    empty: false,\n    name: name,\n    num: num,\n    q: q,\n    step: step,\n    alt: alt,\n    dir: dir,\n    type: type,\n    simple: simple,\n    semitones: semitones,\n    chroma: chroma,\n    coord: coord,\n    oct: oct\n  };\n}\n/**\r\n * @private\r\n */\n\n\nfunction coordToInterval(coord) {\n  var _coord2 = _slicedToArray(coord, 2),\n      f = _coord2[0],\n      _coord2$ = _coord2[1],\n      o = _coord2$ === void 0 ? 0 : _coord2$;\n\n  var isDescending = f * 7 + o * 12 < 0;\n  var ivl = isDescending ? [-f, -o, -1] : [f, o, 1];\n  return interval(decode(ivl));\n}\n\nfunction qToAlt(type, q) {\n  return q === \"M\" && type === \"majorable\" || q === \"P\" && type === \"perfectable\" ? 0 : q === \"m\" && type === \"majorable\" ? -1 : /^A+$/.test(q) ? q.length : /^d+$/.test(q) ? -1 * (type === \"perfectable\" ? q.length : q.length + 1) : 0;\n} // return the interval name of a pitch\n\n\nfunction pitchName$1(props) {\n  var step = props.step,\n      alt = props.alt,\n      _props$oct = props.oct,\n      oct = _props$oct === void 0 ? 0 : _props$oct,\n      dir = props.dir;\n\n  if (!dir) {\n    return \"\";\n  }\n\n  var num = step + 1 + 7 * oct;\n  var d = dir < 0 ? \"-\" : \"\";\n  var type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\n  var name = d + num + altToQ(type, alt);\n  return name;\n}\n\nvar fillStr$1 = function fillStr$1(s, n) {\n  return Array(Math.abs(n) + 1).join(s);\n};\n\nfunction altToQ(type, alt) {\n  if (alt === 0) {\n    return type === \"majorable\" ? \"M\" : \"P\";\n  } else if (alt === -1 && type === \"majorable\") {\n    return \"m\";\n  } else if (alt > 0) {\n    return fillStr$1(\"A\", alt);\n  } else {\n    return fillStr$1(\"d\", type === \"perfectable\" ? alt : alt + 1);\n  }\n}\n/**\r\n * Transpose a note by an interval.\r\n *\r\n * @param {string} note - the note or note name\r\n * @param {string} interval - the interval or interval name\r\n * @return {string} the transposed note name or empty string if not valid notes\r\n * @example\r\n * import { tranpose } from \"@tonaljs/tonal\"\r\n * transpose(\"d3\", \"3M\") // => \"F#3\"\r\n * transpose(\"D\", \"3M\") // => \"F#\"\r\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(pc => transpose(pc, \"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\r\n */\n\n\nfunction transpose(noteName, intervalName) {\n  var note$1 = note(noteName);\n  var interval$1 = interval(intervalName);\n\n  if (note$1.empty || interval$1.empty) {\n    return \"\";\n  }\n\n  var noteCoord = note$1.coord;\n  var intervalCoord = interval$1.coord;\n  var tr = noteCoord.length === 1 ? [noteCoord[0] + intervalCoord[0]] : [noteCoord[0] + intervalCoord[0], noteCoord[1] + intervalCoord[1]];\n  return coordToNote(tr).name;\n}\n/**\r\n * Find the interval distance between two notes or coord classes.\r\n *\r\n * To find distance between coord classes, both notes must be coord classes and\r\n * the interval is always ascending\r\n *\r\n * @param {Note|string} from - the note or note name to calculate distance from\r\n * @param {Note|string} to - the note or note name to calculate distance to\r\n * @return {string} the interval name or empty string if not valid notes\r\n *\r\n */\n\n\nfunction distance(fromNote, toNote) {\n  var from = note(fromNote);\n  var to = note(toNote);\n\n  if (from.empty || to.empty) {\n    return \"\";\n  }\n\n  var fcoord = from.coord;\n  var tcoord = to.coord;\n  var fifths = tcoord[0] - fcoord[0];\n  var octs = fcoord.length === 2 && tcoord.length === 2 ? tcoord[1] - fcoord[1] : -Math.floor(fifths * 7 / 12);\n  return coordToInterval([fifths, octs]).name;\n}\n\nexport { accToAlt, altToAcc, coordToInterval, coordToNote, decode, distance, encode, interval, isNamed, isPitch, note, tokenize$1 as tokenizeInterval, tokenize as tokenizeNote, transpose };","import { note } from '@tonaljs/tonal'; // ascending range\n\nfunction ascR(b, n) {\n  var a = []; // tslint:disable-next-line:curly\n\n  for (; n--; a[n] = n + b) {\n    ;\n  }\n\n  return a;\n} // descending range\n\n\nfunction descR(b, n) {\n  var a = []; // tslint:disable-next-line:curly\n\n  for (; n--; a[n] = b - n) {\n    ;\n  }\n\n  return a;\n}\n/**\r\n * Creates a numeric range\r\n *\r\n * @param {number} from\r\n * @param {number} to\r\n * @return {Array<number>}\r\n *\r\n * @example\r\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\r\n * range(2, -2) // => [2, 1, 0, -1, -2]\r\n */\n\n\nfunction range(from, to) {\n  return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\n}\n/**\r\n * Rotates a list a number of times. It\"s completly agnostic about the\r\n * contents of the list.\r\n *\r\n * @param {Integer} times - the number of rotations\r\n * @param {Array} array\r\n * @return {Array} the rotated array\r\n *\r\n * @example\r\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\r\n */\n\n\nfunction rotate(times, arr) {\n  var len = arr.length;\n  var n = (times % len + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n/**\r\n * Return a copy of the array with the null values removed\r\n * @function\r\n * @param {Array} array\r\n * @return {Array}\r\n *\r\n * @example\r\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\r\n */\n\n\nfunction compact(arr) {\n  return arr.filter(function (n) {\n    return n === 0 || n;\n  });\n}\n/**\r\n * Sort an array of notes in ascending order. Pitch classes are listed\r\n * before notes. Any string that is not a note is removed.\r\n *\r\n * @param {string[]} notes\r\n * @return {string[]} sorted array of notes\r\n *\r\n * @example\r\n * sortedNoteNames(['c2', 'c5', 'c1', 'c0', 'c6', 'c'])\r\n * // => ['C', 'C0', 'C1', 'C2', 'C5', 'C6']\r\n * sortedNoteNames(['c', 'F', 'G', 'a', 'b', 'h', 'J'])\r\n * // => ['C', 'F', 'G', 'A', 'B']\r\n */\n\n\nfunction sortedNoteNames(notes) {\n  var valid = notes.map(function (n) {\n    return note(n);\n  }).filter(function (n) {\n    return !n.empty;\n  });\n  return valid.sort(function (a, b) {\n    return a.height - b.height;\n  }).map(function (n) {\n    return n.name;\n  });\n}\n/**\r\n * Get sorted notes with duplicates removed. Pitch classes are listed\r\n * before notes.\r\n *\r\n * @function\r\n * @param {string[]} array\r\n * @return {string[]} unique sorted notes\r\n *\r\n * @example\r\n * Array.sortedUniqNoteNames(['a', 'b', 'c2', '1p', 'p2', 'c2', 'b', 'c', 'c3' ])\r\n * // => [ 'C', 'A', 'B', 'C2', 'C3' ]\r\n */\n\n\nfunction sortedUniqNoteNames(arr) {\n  return sortedNoteNames(arr).filter(function (n, i, a) {\n    return i === 0 || n !== a[i - 1];\n  });\n}\n/**\r\n * Randomizes the order of the specified array in-place, using the Fisher–Yates shuffle.\r\n *\r\n * @function\r\n * @param {Array} array\r\n * @return {Array} the array shuffled\r\n *\r\n * @example\r\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\r\n */\n\n\nfunction shuffle(arr) {\n  var rnd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Math.random;\n  var i;\n  var t;\n  var m = arr.length;\n\n  while (m) {\n    i = Math.floor(rnd() * m--);\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n\n  return arr;\n}\n/**\r\n * Get all permutations of an array\r\n *\r\n * @param {Array} array - the array\r\n * @return {Array<Array>} an array with all the permutations\r\n * @example\r\n * permutations([\"a\", \"b\", \"c\"])) // =>\r\n * [\r\n *   [\"a\", \"b\", \"c\"],\r\n *   [\"b\", \"a\", \"c\"],\r\n *   [\"b\", \"c\", \"a\"],\r\n *   [\"a\", \"c\", \"b\"],\r\n *   [\"c\", \"a\", \"b\"],\r\n *   [\"c\", \"b\", \"a\"]\r\n * ]\r\n */\n\n\nfunction permutations(arr) {\n  if (arr.length === 0) {\n    return [[]];\n  }\n\n  return permutations(arr.slice(1)).reduce(function (acc, perm) {\n    return acc.concat(arr.map(function (e, pos) {\n      var newPerm = perm.slice();\n      newPerm.splice(pos, 0, arr[0]);\n      return newPerm;\n    }));\n  }, []);\n}\n\nexport { compact, permutations, range, rotate, shuffle, sortedNoteNames, sortedUniqNoteNames };","import _defineProperty from \"/Users/jfriend/code/scaletoy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { range, compact, rotate } from '@tonaljs/array';\nimport { note, interval } from '@tonaljs/tonal';\nvar EmptyPcset = {\n  empty: true,\n  name: \"\",\n  setNum: 0,\n  chroma: \"000000000000\",\n  normalized: \"000000000000\",\n  intervals: []\n}; // UTILITIES\n\nvar setNumToChroma = function setNumToChroma(num) {\n  return Number(num).toString(2);\n};\n\nvar chromaToNumber = function chromaToNumber(chroma) {\n  return parseInt(chroma, 2);\n};\n\nvar REGEX = /^[01]{12}$/;\n\nfunction isChroma(set) {\n  return REGEX.test(set);\n}\n\nvar isPcsetNum = function isPcsetNum(set) {\n  return typeof set === \"number\" && set >= 0 && set <= 4095;\n};\n\nvar isPcset = function isPcset(set) {\n  return set && isChroma(set.chroma);\n};\n\nvar cache = _defineProperty({}, EmptyPcset.chroma, EmptyPcset);\n/**\r\n * Get the pitch class set of a collection of notes or set number or chroma\r\n */\n\n\nfunction pcset(src) {\n  var chroma = isChroma(src) ? src : isPcsetNum(src) ? setNumToChroma(src) : Array.isArray(src) ? listToChroma(src) : isPcset(src) ? src.chroma : EmptyPcset.chroma;\n  return cache[chroma] = cache[chroma] || chromaToPcset(chroma);\n}\n\nvar IVLS = \"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\".split(\" \");\n/**\r\n * @private\r\n * Get the intervals of a pcset *starting from C*\r\n * @param {Set} set - the pitch class set\r\n * @return {IntervalName[]} an array of interval names or an empty array\r\n * if not a valid pitch class set\r\n */\n\nfunction chromaToIntervals(chroma) {\n  var intervals = [];\n\n  for (var i = 0; i < 12; i++) {\n    // tslint:disable-next-line:curly\n    if (chroma.charAt(i) === \"1\") intervals.push(IVLS[i]);\n  }\n\n  return intervals;\n}\n\nvar all;\n/**\r\n * Get a list of all possible pitch class sets (all possible chromas) *having\r\n * C as root*. There are 2048 different chromas. If you want them with another\r\n * note you have to transpose it\r\n *\r\n * @see http://allthescales.org/\r\n * @return {Array<PcsetChroma>} an array of possible chromas from '10000000000' to '11111111111'\r\n */\n\nfunction chromas() {\n  all = all || range(2048, 4095).map(setNumToChroma);\n  return all.slice();\n}\n/**\r\n * Given a a list of notes or a pcset chroma, produce the rotations\r\n * of the chroma discarding the ones that starts with \"0\"\r\n *\r\n * This is used, for example, to get all the modes of a scale.\r\n *\r\n * @param {Array|string} set - the list of notes or pitchChr of the set\r\n * @param {boolean} normalize - (Optional, true by default) remove all\r\n * the rotations that starts with \"0\"\r\n * @return {Array<string>} an array with all the modes of the chroma\r\n *\r\n * @example\r\n * Pcset.modes([\"C\", \"D\", \"E\"]).map(Pcset.intervals)\r\n */\n\n\nfunction modes(set) {\n  var normalize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var pcs = pcset(set);\n  var binary = pcs.chroma.split(\"\");\n  return compact(binary.map(function (_, i) {\n    var r = rotate(i, binary);\n    return normalize && r[0] === \"0\" ? null : r.join(\"\");\n  }));\n}\n/**\r\n * Test if two pitch class sets are numentical\r\n *\r\n * @param {Array|string} set1 - one of the pitch class sets\r\n * @param {Array|string} set2 - the other pitch class set\r\n * @return {boolean} true if they are equal\r\n * @example\r\n * Pcset.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\r\n */\n\n\nfunction isEqual(s1, s2) {\n  return pcset(s1).setNum === pcset(s2).setNum;\n}\n/**\r\n * Create a function that test if a collection of notes is a\r\n * subset of a given set\r\n *\r\n * The function is curryfied.\r\n *\r\n * @param {PcsetChroma|NoteName[]} set - the superset to test against (chroma or\r\n * list of notes)\r\n * @return{function(PcsetChroma|NoteNames[]): boolean} a function accepting a set\r\n * to test against (chroma or list of notes)\r\n * @example\r\n * const inCMajor = Pcset.isSubsetOf([\"C\", \"E\", \"G\"])\r\n * inCMajor([\"e6\", \"c4\"]) // => true\r\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\r\n */\n\n\nfunction isSubsetOf(set) {\n  var s = pcset(set).setNum;\n  return function (notes) {\n    var o = pcset(notes).setNum; // tslint:disable-next-line: no-bitwise\n\n    return s && s !== o && (o & s) === o;\n  };\n}\n/**\r\n * Create a function that test if a collection of notes is a\r\n * superset of a given set (it contains all notes and at least one more)\r\n *\r\n * @param {Set} set - an array of notes or a chroma set string to test against\r\n * @return {(subset: Set): boolean} a function that given a set\r\n * returns true if is a subset of the first one\r\n * @example\r\n * const extendsCMajor = Pcset.isSupersetOf([\"C\", \"E\", \"G\"])\r\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\r\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\r\n */\n\n\nfunction isSupersetOf(set) {\n  var s = pcset(set).setNum;\n  return function (notes) {\n    var o = pcset(notes).setNum; // tslint:disable-next-line: no-bitwise\n\n    return s && s !== o && (o | s) === o;\n  };\n}\n/**\r\n * Test if a given pitch class set includes a note\r\n *\r\n * @param {Array<string>} set - the base set to test against\r\n * @param {string} note - the note to test\r\n * @return {boolean} true if the note is included in the pcset\r\n *\r\n * Can be partially applied\r\n *\r\n * @example\r\n * const isNoteInCMajor = isNoteIncludedInSet(['C', 'E', 'G'])\r\n * isNoteInCMajor('C4') // => true\r\n * isNoteInCMajor('C#4') // => false\r\n */\n\n\nfunction isNoteIncludedInSet(set) {\n  var s = pcset(set);\n  return function (noteName) {\n    var n = note(noteName);\n    return s && !n.empty && s.chroma.charAt(n.chroma) === \"1\";\n  };\n}\n/** @deprecated use: isNoteIncludedIn */\n\n\nvar includes = isNoteIncludedInSet;\n/**\r\n * Filter a list with a pitch class set\r\n *\r\n * @param {Array|string} set - the pitch class set notes\r\n * @param {Array|string} notes - the note list to be filtered\r\n * @return {Array} the filtered notes\r\n *\r\n * @example\r\n * Pcset.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\r\n * Pcset.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\r\n */\n\nfunction filter(set) {\n  var isIncluded = isNoteIncludedInSet(set);\n  return function (notes) {\n    return notes.filter(isIncluded);\n  };\n} // PRIVATE //\n\n\nfunction chromaRotations(chroma) {\n  var binary = chroma.split(\"\");\n  return binary.map(function (_, i) {\n    return rotate(i, binary).join(\"\");\n  });\n}\n\nfunction chromaToPcset(chroma) {\n  var setNum = chromaToNumber(chroma);\n  var normalizedNum = chromaRotations(chroma).map(chromaToNumber).filter(function (n) {\n    return n >= 2048;\n  }).sort()[0];\n  var normalized = setNumToChroma(normalizedNum);\n  var intervals = chromaToIntervals(chroma);\n  return {\n    empty: false,\n    name: \"\",\n    setNum: setNum,\n    chroma: chroma,\n    normalized: normalized,\n    intervals: intervals\n  };\n}\n\nfunction listToChroma(set) {\n  if (set.length === 0) {\n    return EmptyPcset.chroma;\n  }\n\n  var pitch;\n  var binary = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // tslint:disable-next-line:prefer-for-of\n\n  for (var i = 0; i < set.length; i++) {\n    pitch = note(set[i]); // tslint:disable-next-line: curly\n\n    if (pitch.empty) pitch = interval(set[i]); // tslint:disable-next-line: curly\n\n    if (!pitch.empty) binary[pitch.chroma] = 1;\n  }\n\n  return binary.join(\"\");\n}\n\nexport { EmptyPcset, chromaToIntervals, chromas, filter, includes, isEqual, isNoteIncludedInSet, isSubsetOf, isSupersetOf, modes, pcset };","import _toArray from \"/Users/jfriend/code/scaletoy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray\";\nimport _objectSpread from \"/Users/jfriend/code/scaletoy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { EmptyPcset, pcset } from '@tonaljs/pcset'; // SCALES\n// Format: [\"intervals\", \"name\", \"alias1\", \"alias2\", ...]\n\nvar SCALES = [// 5-note scales\n[\"1P 2M 3M 5P 6M\", \"major pentatonic\", \"pentatonic\"], [\"1P 3M 4P 5P 7M\", \"ionian pentatonic\"], [\"1P 3M 4P 5P 7m\", \"mixolydian pentatonic\", \"indian\"], [\"1P 2M 4P 5P 6M\", \"ritusen\"], [\"1P 2M 4P 5P 7m\", \"egyptian\"], [\"1P 3M 4P 5d 7m\", \"neopolitan major pentatonic\"], [\"1P 3m 4P 5P 6m\", \"vietnamese 1\"], [\"1P 2m 3m 5P 6m\", \"pelog\"], [\"1P 2m 4P 5P 6m\", \"kumoijoshi\"], [\"1P 2M 3m 5P 6m\", \"hirajoshi\"], [\"1P 2m 4P 5d 7m\", \"iwato\"], [\"1P 2m 4P 5P 7m\", \"in-sen\"], [\"1P 3M 4A 5P 7M\", \"lydian pentatonic\", \"chinese\"], [\"1P 3m 4P 6m 7m\", \"malkos raga\"], [\"1P 3m 4P 5d 7m\", \"locrian pentatonic\", \"minor seven flat five pentatonic\"], [\"1P 3m 4P 5P 7m\", \"minor pentatonic\", \"vietnamese 2\"], [\"1P 3m 4P 5P 6M\", \"minor six pentatonic\"], [\"1P 2M 3m 5P 6M\", \"flat three pentatonic\", \"kumoi\"], [\"1P 2M 3M 5P 6m\", \"flat six pentatonic\"], [\"1P 2m 3M 5P 6M\", \"scriabin\"], [\"1P 3M 5d 6m 7m\", \"whole tone pentatonic\"], [\"1P 3M 4A 5A 7M\", \"lydian #5P pentatonic\"], [\"1P 3M 4A 5P 7m\", \"lydian dominant pentatonic\"], [\"1P 3m 4P 5P 7M\", \"minor #7M pentatonic\"], [\"1P 3m 4d 5d 7m\", \"super locrian pentatonic\"], // 6-note scales\n[\"1P 2M 3m 4P 5P 7M\", \"minor hexatonic\"], [\"1P 2A 3M 5P 5A 7M\", \"augmented\"], [\"1P 3m 4P 5d 5P 7m\", \"minor blues\", \"blues\"], [\"1P 2M 3m 3M 5P 6M\", \"major blues\"], [\"1P 2M 4P 5P 6M 7m\", \"piongio\"], [\"1P 2m 3M 4A 6M 7m\", \"prometheus neopolitan\"], [\"1P 2M 3M 4A 6M 7m\", \"prometheus\"], [\"1P 2m 3M 5d 6m 7m\", \"mystery #1\"], [\"1P 2m 3M 4P 5A 6M\", \"six tone symmetric\"], [\"1P 2M 3M 4A 5A 7m\", \"whole tone\"], // 7-note scales\n[\"1P 2M 3M 4P 5d 6m 7m\", \"locrian major\", \"arabian\"], [\"1P 2m 3M 4A 5P 6m 7M\", \"double harmonic lydian\"], [\"1P 2M 3m 4P 5P 6m 7M\", \"harmonic minor\"], [\"1P 2m 3m 3M 5d 6m 7m\", \"altered\", \"super locrian\", \"diminished whole tone\", \"pomeroy\"], [\"1P 2M 3m 4P 5d 6m 7m\", \"locrian #2\", \"half-diminished\"], [\"1P 2M 3M 4P 5P 6m 7m\", \"melodic minor fifth mode\", \"hindu\", \"mixolydian b6M\"], [\"1P 2M 3M 4A 5P 6M 7m\", \"lydian dominant\", \"lydian b7\"], [\"1P 2M 3M 4A 5P 6M 7M\", \"lydian\"], [\"1P 2M 3M 4A 5A 6M 7M\", \"lydian augmented\"], [\"1P 2m 3m 4P 5P 6M 7m\", \"melodic minor second mode\"], [\"1P 2M 3m 4P 5P 6M 7M\", \"melodic minor\"], [\"1P 2m 3m 4P 5d 6m 7m\", \"locrian\"], [\"1P 2A 3M 4P 5P 5A 7M\", \"augmented heptatonic\"], [\"1P 2M 3m 4A 5P 6M 7m\", \"dorian #4\"], [\"1P 2M 3m 4A 5P 6M 7M\", \"lydian diminished\"], [\"1P 2m 3m 4P 5P 6m 7m\", \"phrygian\"], [\"1P 2M 3M 4A 5A 7m 7M\", \"leading whole tone\"], [\"1P 2M 3M 4A 5P 6m 7m\", \"lydian minor\"], [\"1P 2m 3M 4P 5P 6m 7m\", \"phrygian dominant\", \"spanish\", \"phrygian major\"], [\"1P 2m 3m 4P 5P 6m 7M\", \"balinese\"], [\"1P 2m 3m 4P 5P 6M 7M\", \"neopolitan major\", \"dorian b2\"], [\"1P 2M 3m 4P 5P 6m 7m\", \"aeolian\", \"minor\"], [\"1P 2M 3m 5d 5P 6M 7m\", \"romanian minor\"], [\"1P 2M 3M 4P 5P 6m 7M\", \"harmonic major\"], [\"1P 2m 3M 4P 5P 6m 7M\", \"double harmonic major\", \"gypsy\"], [\"1P 2M 3m 4P 5P 6M 7m\", \"dorian\"], [\"1P 2M 3m 4A 5P 6m 7M\", \"hungarian minor\"], [\"1P 2A 3M 4A 5P 6M 7m\", \"hungarian major\"], [\"1P 2m 3M 4P 5d 6M 7m\", \"oriental\"], [\"1P 2m 3m 3M 4A 5P 7m\", \"flamenco\"], [\"1P 2m 3m 4A 5P 6m 7M\", \"todi raga\"], [\"1P 2M 3M 4P 5P 6M 7m\", \"mixolydian\", \"dominant\"], [\"1P 2m 3M 4P 5d 6m 7M\", \"persian\"], [\"1P 2M 3M 4P 5P 6M 7M\", \"major\", \"ionian\"], [\"1P 2m 3M 5d 6m 7m 7M\", \"enigmatic\"], [\"1P 2M 3M 4P 5A 6M 7M\", \"ionian augmented\"], [\"1P 2A 3M 4A 5P 6M 7M\", \"lydian #9\"], // 8-note scales\n[\"1P 2m 3M 4P 4A 5P 6m 7M\", \"purvi raga\"], [\"1P 2m 3m 3M 4P 5P 6m 7m\", \"spanish heptatonic\"], [\"1P 2M 3M 4P 5P 6M 7m 7M\", \"bebop\"], [\"1P 2M 3m 3M 4P 5P 6M 7m\", \"bebop minor\"], [\"1P 2M 3M 4P 5P 5A 6M 7M\", \"bebop major\"], [\"1P 2m 3m 4P 5d 5P 6m 7m\", \"bebop locrian\"], [\"1P 2M 3m 4P 5P 6m 7m 7M\", \"minor bebop\"], [\"1P 2M 3m 4P 5d 6m 6M 7M\", \"diminished\", \"whole-half diminished\"], [\"1P 2M 3M 4P 5d 5P 6M 7M\", \"ichikosucho\"], [\"1P 2M 3m 4P 5P 6m 6M 7M\", \"minor six diminished\"], [\"1P 2m 3m 3M 4A 5P 6M 7m\", \"half-whole diminished\", \"dominant diminished\"], [\"1P 3m 3M 4P 5P 6M 7m 7M\", \"kafi raga\"], // 9-note scales\n[\"1P 2M 3m 3M 4P 5d 5P 6M 7m\", \"composite blues\"], // 12-note scales\n[\"1P 2m 2M 3m 3M 4P 4A 5P 6m 6M 7m 7M\", \"chromatic\"]];\n\nvar NoScaleType = _objectSpread({}, EmptyPcset, {\n  intervals: [],\n  aliases: []\n});\n\nvar scales = SCALES.map(dataToScaleType);\nvar index = scales.reduce(function (index, scale) {\n  index[scale.name] = scale;\n  index[scale.setNum] = scale;\n  index[scale.chroma] = scale;\n  scale.aliases.forEach(function (alias) {\n    index[alias] = scale;\n  });\n  return index;\n}, {});\nvar ks = Object.keys(index);\n/**\r\n * Given a scale name or chroma, return the scale properties\r\n * @param {string} type - scale name or pitch class set chroma\r\n * @example\r\n * import { scale } from 'tonaljs/scale-dictionary'\r\n * scale('major')\r\n */\n\nfunction scaleType(type) {\n  return index[type] || NoScaleType;\n}\n/**\r\n * Return a list of all scale types\r\n */\n\n\nfunction entries() {\n  return scales.slice();\n}\n\nfunction keys() {\n  return ks.slice();\n}\n\nfunction dataToScaleType(_ref) {\n  var _ref2 = _toArray(_ref),\n      ivls = _ref2[0],\n      name = _ref2[1],\n      aliases = _ref2.slice(2);\n\n  var intervals = ivls.split(\" \");\n  return _objectSpread({}, pcset(intervals), {\n    name: name,\n    intervals: intervals,\n    aliases: aliases\n  });\n}\n\nexport { NoScaleType, entries, keys, scaleType };","// @flow\nimport React from 'react';\nimport * as Midi from '@tonaljs/midi';\nimport * as Tonal from '@tonaljs/tonal';\n\nconst PIANOROLL_NOTE_HEIGHT = 10;\nconst PIANOROLL_QUARTER_WIDTH = 10;\n\nfunction clamp(val, min, max) {\n  return Math.max(Math.min(val, max), min);\n}\n\nfunction getOffsetInTarget(e) {\n  const rect = e.currentTarget.getBoundingClientRect();\n\n  return {\n    x: clamp(e.pageX - (rect.x + window.scrollX), 0, rect.width),\n    y: clamp(e.pageY - (rect.y + window.scrollY), 0, rect.height),\n  };\n}\n\nfunction collision(a, b) {\n  // work out the corners (x1,x2,y1,y1) of each rectangle\n  // top left\n  let ax1 = a.left;\n  let ay1 = a.top;\n  // bottom right\n  let ax2 = a.left + a.width;\n  let ay2 = a.top + a.height;\n  // top left\n  let bx1 = b.left;\n  let by1 = b.top;\n  // bottom right\n  let bx2 = b.left + b.width;\n  let by2 = b.top + b.height;\n\n  // test rectangular overlap\n  return !(ax1 > bx2 || bx1 > ax2 || ay1 > by2 || by1 > ay2);\n}\n\nfunction getSelectionBox(state) {\n  const startX = Math.min(state.start.x, state.end.x);\n  const startY = Math.min(state.start.y, state.end.y);\n  const endX = Math.max(state.start.x, state.end.x);\n  const endY = Math.max(state.start.y, state.end.y);\n  return {\n    left: startX,\n    top: startY,\n    width: endX - startX,\n    height: endY - startY,\n  };\n}\n\nfunction PianoRollTrack({\n  midi,\n  extents,\n  track,\n  trackIdx,\n  tracksWidth,\n  midiRange,\n  selectedNotes,\n  setSelectedNotes,\n}) {\n  const selectionRef = React.useRef({\n    start: {x: 0, y: 0},\n    end: {x: 0, y: 0},\n    dragging: false,\n  });\n\n  const selectionElRef = React.useRef(null);\n\n  function updateSelectionEl() {\n    const el = selectionElRef.current;\n    const state = selectionRef.current;\n    if (el && state) {\n      el.style.visibility = state.dragging ? 'visible' : 'hidden';\n\n      const box = getSelectionBox(state);\n\n      el.style.left = box.left + 'px';\n      el.style.top = box.top + 'px';\n      el.style.width = box.width + 'px';\n      el.style.height = box.height + 'px';\n    }\n  }\n\n  const getNoteLayout = React.useCallback(\n    ev => {\n      return {\n        left: (ev.ticks / midi.header.ppq) * PIANOROLL_QUARTER_WIDTH,\n        top: (midiRange - (ev.midi - extents.minNote)) * PIANOROLL_NOTE_HEIGHT,\n        width: (ev.durationTicks / midi.header.ppq) * PIANOROLL_QUARTER_WIDTH,\n        height: PIANOROLL_NOTE_HEIGHT,\n      };\n    },\n    [midi.header.ppq, extents.minNote, midiRange]\n  );\n\n  const selectNotes = React.useCallback(() => {\n    const state = selectionRef.current;\n    if (state) {\n      const box = getSelectionBox(state);\n\n      const selectedNotes = track.notes.filter(ev => {\n        const layout = getNoteLayout(ev);\n\n        return collision(layout, box);\n      });\n\n      setSelectedNotes(new Set(selectedNotes));\n    }\n  }, [track, getNoteLayout]);\n\n  const onMouseDown = React.useCallback(e => {\n    selectionRef.current = {\n      start: getOffsetInTarget(e),\n      end: getOffsetInTarget(e),\n      dragging: true,\n    };\n    updateSelectionEl();\n  }, []);\n\n  const onMouseMove = React.useCallback(e => {\n    const state = selectionRef.current;\n    if (state && state.dragging) {\n      state.end = getOffsetInTarget(e);\n      updateSelectionEl();\n    }\n  }, []);\n\n  const onMouseUp = React.useCallback(() => {\n    const state = selectionRef.current;\n    if (state && state.dragging) {\n      state.dragging = false;\n      selectNotes();\n    }\n    updateSelectionEl();\n  }, [selectNotes]);\n\n  return (\n    <div\n      onMouseDown={onMouseDown}\n      onMouseMove={onMouseMove}\n      onMouseUp={onMouseUp}\n      onMouseLeave={onMouseUp}\n      style={{\n        height: (midiRange + 1) * PIANOROLL_NOTE_HEIGHT + 1,\n        width: tracksWidth,\n        position: 'relative',\n        borderBottom: 'solid #555 1px',\n      }}\n    >\n      {' '}\n      {[...Array(midiRange + 1).keys()].map(offset => {\n        const midi = midiRange - offset + extents.minNote;\n        const noteName = Midi.midiToNoteName(midi);\n        return (\n          <div\n            key={'track' + trackIdx + 'row' + offset}\n            style={{\n              height: PIANOROLL_NOTE_HEIGHT,\n              background: Tonal.note(noteName).acc === '' ? 'darkgrey' : 'grey',\n              borderTop: 'solid #555 1px',\n              overflow: 'hidden',\n            }}\n          >\n            <div\n              style={{\n                marginTop: -1,\n                fontSize: 9,\n                fontFamily: 'Lucida Grande',\n              }}\n            >\n              {noteName}\n            </div>\n          </div>\n        );\n      })}\n      {track.notes.map((ev, evIdx) => (\n        <div\n          key={'track' + trackIdx + 'note' + evIdx}\n          style={{\n            ...getNoteLayout(ev),\n            background: selectedNotes.has(ev) ? 'red' : '#459',\n            border: 'solid 1px darkblue ',\n            position: 'absolute',\n          }}\n        ></div>\n      ))}\n      <div\n        ref={selectionElRef}\n        style={{\n          background: `rgba(200,200,200,0.3)`,\n          border: 'solid 1px white',\n          position: 'absolute',\n        }}\n      />\n    </div>\n  );\n}\n\nexport default function Piano(props: {\n  midi: Object,\n  selectedNotes: Set<Object>,\n  setSelectedNotes: (Set<Object>) => void,\n}) {\n  const {midi, selectedNotes, setSelectedNotes} = props;\n  const trackExtents = React.useMemo(() => {\n    return midi.tracks.map(t => {\n      return t.notes.length === 0\n        ? {minNote: 0, maxNote: 0, maxTicks: 0}\n        : t.notes.reduce(\n            (acc, ev) => {\n              return {\n                minNote: Math.min(acc.minNote, ev.midi),\n                maxNote: Math.max(acc.maxNote, ev.midi),\n                maxTicks: Math.max(acc.maxTicks, ev.ticks + ev.durationTicks),\n              };\n            },\n            {minNote: 127, maxNote: 0, maxTicks: 0}\n          );\n    });\n  }, [midi.tracks]);\n\n  const tracksWidth = React.useMemo(() => {\n    const maxTicks = trackExtents.reduce(\n      (acc, ex) => Math.max(ex.maxTicks, acc),\n      0\n    );\n    return (maxTicks / midi.header.ppq) * PIANOROLL_QUARTER_WIDTH;\n  }, [trackExtents, midi.header.ppq]);\n\n  return (\n    <div style={{textAlign: 'left'}}>\n      {midi.tracks.map((track, trackIdx) => {\n        const extents = trackExtents[trackIdx];\n        const midiRange = extents.maxNote - extents.minNote;\n        return (\n          <details key={trackIdx} open>\n            <summary>Track {trackIdx + 1}</summary>\n            <PianoRollTrack\n              {...{\n                midi,\n                extents,\n                track,\n                trackIdx,\n                tracksWidth,\n                midiRange,\n                selectedNotes,\n                setSelectedNotes,\n              }}\n            />\n          </details>\n        );\n      })}\n    </div>\n  );\n}\n","// @flow\nimport React from 'react';\nimport * as ToneJSMidi from '@tonejs/midi';\nimport * as Tonal from '@tonaljs/tonal';\nimport * as Scale from '@tonaljs/scale';\nimport * as Note from '@tonaljs/note';\nimport * as Midi from '@tonaljs/midi';\nimport * as ScaleDictionary from '@tonaljs/scale-dictionary';\nimport useLocalStorage from './useLocalStorage';\nimport useQueryParam, {QUERY_PARAM_FORMATS} from './useQueryParam';\nimport useValueObserver from './useValueObserver';\nimport Keyboard from './Keyboard';\nimport PianoRoll from './PianoRoll';\n\nconst keys = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'Bb', 'B'];\n\nconst allScales = [\n  'major',\n  'minor',\n  'dorian',\n  'lydian',\n  'phrygian',\n  'ionian',\n  'mixolydian',\n  'locrian',\n];\n\nconst octave = 4;\nconst NOTE_ON = 0x90;\nconst NOTE_OFF = 0x80;\nconst velocityMidi = 80;\n\nfunction SelectionInfo({scaleData, selectedNotes, notePlayer}) {\n  const selectedNotesSet = [\n    ...new Set([...selectedNotes].map(note => Tonal.note(note.name).pc)),\n  ];\n\n  const matchingScales = scaleData.keyScales.filter(scale => {\n    for (const noteName of selectedNotesSet) {\n      if (!scale.notes.includes(noteName)) {\n        return false;\n      }\n      return true;\n    }\n  });\n  return (\n    <div>\n      <div>Notes: {selectedNotesSet.join(', ')}</div>\n      <div>\n        Matching Scales:\n        <br />{' '}\n        {matchingScales.map(scale => {\n          const scaleNotes = reifyScaleNotesWithOctave(scale, octave);\n          return (\n            <div key={scale.name}>\n              {scale.name}\n              <br />\n\n              <Keyboard\n                highlightKeys={scaleNotes}\n                startOctave={octave}\n                octaves={3}\n                highlightType={'scale'}\n                notePlayer={notePlayer}\n              />\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction reifyScaleNotesWithOctave(scale, octave) {\n  return scale.intervals.map(interval =>\n    Tonal.transpose(`${scale.tonic}${octave}`, interval)\n  );\n}\n\nfunction makeScaleData(key, scaleType, octave) {\n  const scale = Scale.scale(`${key} ${scaleType}`);\n\n  const scaleNotes = reifyScaleNotesWithOctave(scale, octave);\n\n  const keyScales = ScaleDictionary.entries()\n    .map(scaleDef => Scale.scale(`${key} ${scaleDef.name}`))\n    .map(scale => ({\n      ...scale,\n      notesAbstractMidi: new Set(\n        scale.notes.map(noteName => Tonal.note(`${noteName}0`).midi).sort()\n      ),\n    }));\n\n  return {scaleNotes, key, keyScales};\n}\n\nfunction usePersistedMidiFile() {\n  const [midiJSONObj, setMidiJSONObj] = useLocalStorage(\n    'MidiExploderPersistence',\n    null\n  );\n\n  const midiFile = React.useMemo(() => {\n    if (midiJSONObj != null) {\n      try {\n        const midiFile = new ToneJSMidi.Midi();\n        midiFile.fromJSON(midiJSONObj);\n        return midiFile;\n      } catch (err) {\n        console.error('failed to load midi file', err);\n        return null;\n      }\n    }\n  }, [midiJSONObj]);\n\n  return [\n    midiFile,\n    midiFile => {\n      setMidiJSONObj(midiFile.toJSON());\n    },\n  ];\n}\n\nexport default function MidiExploder(props: {\n  audioApi: {\n    dx7: Object,\n  },\n}) {\n  const {audioApi} = props;\n  const [midiFile, setMidiFile] = usePersistedMidiFile();\n  const [key, setKey] = useQueryParam('key', 'C', QUERY_PARAM_FORMATS.string);\n  const [scaleType, setScaleType] = useQueryParam(\n    'scaleType',\n    'major',\n    QUERY_PARAM_FORMATS.string\n  );\n\n  const handleFiles = React.useCallback(\n    e => {\n      if (!e.currentTarget.files) return;\n\n      const [file] = e.currentTarget.files;\n\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          setMidiFile(new ToneJSMidi.Midi(reader.result));\n        };\n        reader.readAsArrayBuffer(file);\n      }\n    },\n    [setMidiFile]\n  );\n\n  const scaleData = React.useMemo(() => makeScaleData(key, scaleType, octave), [\n    key,\n    scaleType,\n  ]);\n  const [highlightedKeys, setHighlightedKeys] = React.useState(null);\n\n  const setHighlightedScale = React.useCallback(() => {\n    setHighlightedKeys({keys: scaleData.scaleNotes, type: 'scale'});\n  }, [scaleData]);\n\n  useValueObserver(scaleData, setHighlightedScale);\n\n  const onMidi = React.useMemo(() => {\n    if (audioApi.dx7) {\n      return message => audioApi.dx7.onMidi(message);\n    }\n    return message => {};\n  }, [audioApi]);\n\n  const notePlayer = React.useMemo(() => {\n    return {\n      triggerAttack(noteName) {\n        onMidi([NOTE_ON, Tonal.note(noteName).midi, velocityMidi]);\n      },\n      triggerRelease(noteName) {\n        onMidi([NOTE_OFF, Tonal.note(noteName).midi, velocityMidi]);\n      },\n    };\n  }, [onMidi]);\n\n  const [selectedNotes, setSelectedNotes] = React.useState(new Set());\n\n  return (\n    <div className=\"App\">\n      <label>\n        midi file: <input type=\"file\" onChange={handleFiles} />\n      </label>\n\n      <div onMouseOver={setHighlightedScale}>\n        <label>\n          key:{' '}\n          <select\n            value={scaleData.key}\n            onChange={event => setKey(event.currentTarget.value)}\n          >\n            {keys.map(key => (\n              <option key={key} value={key}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </label>{' '}\n        <label>\n          scale type:{' '}\n          <select\n            value={scaleType}\n            onChange={event => setScaleType(event.currentTarget.value)}\n          >\n            {allScales.map(key => (\n              <option key={key} value={key}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </label>{' '}\n        <label>scale notes: </label>\n        {scaleData.scaleNotes.map(note => Note.simplify(note)).join()}{' '}\n      </div>\n\n      <Keyboard\n        highlightKeys={highlightedKeys ? highlightedKeys.keys : null}\n        startOctave={octave}\n        octaves={3}\n        highlightType={highlightedKeys ? highlightedKeys.type : 'scale'}\n        notePlayer={notePlayer}\n      />\n\n      <details open={false} style={{textAlign: 'left'}}>\n        <summary>JSON</summary>\n        <pre>{midiFile && JSON.stringify(midiFile.toJSON(), null, 2)}</pre>\n      </details>\n      {midiFile != null && (\n        <div style={{display: 'flex'}}>\n          <div style={{overflow: 'hidden', width: '66%'}}>\n            <PianoRoll midi={midiFile} {...{selectedNotes, setSelectedNotes}} />\n          </div>\n          <div style={{width: '33%', overflow: 'hidden'}}>\n            <SelectionInfo {...{scaleData, selectedNotes, notePlayer}} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"sourceRoot":""}