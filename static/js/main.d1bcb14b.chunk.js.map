{"version":3,"sources":["logo.svg","Recorder.js","useLocalStorage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","makeNewRecorder","actx","inputNode","chunks","dest","createMediaStreamDestination","mediaRecorder","MediaRecorder","stream","connect","ondataavailable","evt","push","data","onstop","blob","Blob","type","document","createElement","fileName","a","body","appendChild","style","url","URL","createObjectURL","href","download","click","revokeObjectURL","remove","saveData","React","memo","props","recorderRef","useRef","_React$useState","useState","_React$useState2","Object","slicedToArray","recording","setRecording","toggleRecording","useCallback","s","useEffect","current","start","state","stop","react_default","onClick","useLocalStorage","baseKey","initialValue","key","concat","_useState","item","window","localStorage","getItem","JSON","parse","error","console","log","_useState2","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","SIZE_ASC","scaleTypesPosNames","major","minor","scaleTypesChordPatterns","getScaleChords","scaleType","Scale","notes","map","pc","pos","chords","chordType","Chord","sort","b","intervals","length","chord","tonic","aliases","getReifiedNotesForChord","chordName","octave","chordData","tonicReified","interval","Tonal","beatDurationSeconds","NOTE_ON","NOTE_OFF","velocityMidi","TEST_PLAY_SCALE","playNote","events","noteName","end","noteMidi","midi","updatedEvents","forEach","ev","message","time","newEvents","addEvents","makeOctaveScaleNoteSequence","note","shift","scaleNotes","oct","chordTypeColors","diminished","buttonStyle","display","width","cursor","color","padding","paddingBottom","minHeight","ChordButton","_ref","playChord","setLastChord","selected","objectSpread","background","border","borderColor","name","App","audioApi","setAudioApi","resumeAudio","resume","suspendAudio","suspend","_useLocalStorage","_useLocalStorage2","setKey","_useLocalStorage3","_useLocalStorage4","includeExtra","setIncludeExtra","_React$useState3","_React$useState4","setEvents","playScale","currentTime","lastStartTimeOffset","chordNotes","i","_React$useState5","_React$useState6","lastChord","_useLocalStorage5","_useLocalStorage6","setOctave","_useLocalStorage7","_useLocalStorage8","setScaleType","scaleData","useMemo","scalePitchClasses","scalePosChords","Map","chordNames","size","quality","sizes","Set","chordDatas","add","Array","from","makeScaleData","toggleExtra","onDX7Init","dx7","newAudioApi","setInterval","nextEvent","onMidi","slice","onTick","currentNoteIndex","prevNoteIndex","testPlayScale","initDX7","className","src_Recorder","onChange","event","currentTarget","parseInt","keys","k","join","checked","filter","sizeIndex","_ref2","_ref3","flex","assign","height","overflow","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1bcb14b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nfunction saveData(blob, fileName) {\n  var a = document.createElement('a');\n  document.body.appendChild(a);\n  a.style = 'display: none';\n\n  const url = URL.createObjectURL(blob);\n  a.href = url;\n  a.download = fileName;\n  a.click();\n  URL.revokeObjectURL(url);\n  a.remove();\n}\n\nfunction makeNewRecorder(actx, inputNode) {\n  const chunks = [];\n  const dest = actx.createMediaStreamDestination();\n  const mediaRecorder = new MediaRecorder(dest.stream);\n  inputNode.connect(dest);\n\n  mediaRecorder.ondataavailable = function(evt) {\n    // push each chunk (blobs) in an array\n    chunks.push(evt.data);\n  };\n\n  mediaRecorder.onstop = function(evt) {\n    // Make blob out of our blobs, and open it.\n    var blob = new Blob(chunks, {type: 'audio/ogg; codecs=opus'});\n    const audioEl = document.createElement('audio');\n\n    const fileName = 'audio.ogg';\n\n    saveData(blob, fileName);\n  };\n\n  return mediaRecorder;\n}\n\nexport default React.memo(function Recorder(props) {\n  const recorderRef = React.useRef(\n    makeNewRecorder(props.actx, props.inputNode)\n  );\n\n  const [recording, setRecording] = React.useState(false);\n\n  const toggleRecording = React.useCallback(() => setRecording(s => !s), [\n    setRecording,\n  ]);\n\n  React.useEffect(() => {\n    if (recording) {\n      recorderRef.current.start();\n    } else {\n      if (recorderRef.current.state !== 'inactive') {\n        recorderRef.current.stop();\n        recorderRef.current = makeNewRecorder(props.actx, props.inputNode);\n      }\n    }\n  }, [recording]);\n\n  return (\n    <button onClick={toggleRecording}>\n      {recording ? 'stop recording' : 'record'}\n    </button>\n  );\n});\n","import {useState} from 'react';\n\nexport default function useLocalStorage(baseKey, initialValue) {\n  const key = `scaletoy-${baseKey}`;\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport * as Tonal from '@tonaljs/tonal';\nimport * as Scale from '@tonaljs/scale';\nimport * as Chord from '@tonaljs/chord';\nimport Recorder from './Recorder';\nimport useLocalStorage from './useLocalStorage';\n\n/* global initDX7 */\n\nconst SHOW_NOTE_NAMES = false;\nconst SHOW_NOTE_OCTS = false;\nconst SHOW_FULL_CHORD_NAMES = true;\nconst SIZE_ASC = true;\n\nfunction transposeByOctaves(note, shift) {\n  return `${note.pc}${note.oct + shift}`;\n}\n\nfunction getChordsBySize(chords, key) {\n  return chords\n    .map(chordType => Chord.chord(`${key}${chordType}`))\n    .sort((a, b) => a.intervals.length - b.intervals.length)\n    .map(chord => `${chord.tonic}${chord.aliases[0]}`);\n}\n\nconst scaleTypesPosNames = {\n  major: ['I', 'ii', 'iii', 'VI', 'V', 'vi', 'vii*'],\n  minor: ['i', 'ii*', 'III', 'iv', 'v', 'VI', 'VII'],\n};\n\nconst scaleTypesChordPatterns = {\n  major: ['major', 'minor', 'minor', 'major', 'major', 'minor', 'diminished'],\n  minor: ['minor', 'diminished', 'major', 'minor', 'minor', 'major', 'major'],\n};\n\nfunction getScaleChords(key, scaleType) {\n  return Scale.scale(key + ' ' + scaleType).notes.map((pc, pos) =>\n    getChordsBySize(\n      Scale.scaleChords(scaleTypesChordPatterns[scaleType][pos]),\n      pc\n    )\n  );\n}\n\n// get the notes for a chord, for an octave\nfunction getReifiedNotesForChord(chordName, octave) {\n  const chordData = Chord.chord(chordName);\n  const tonicReified = chordData.tonic + octave;\n  const notes = chordData.intervals.map(interval =>\n    Tonal.transpose(tonicReified, interval)\n  );\n  return notes;\n}\n\nconst bpm = 120;\nconst beatDurationSeconds = (1 / bpm) * 60;\n\nconst NOTE_ON = 0x90;\nconst NOTE_OFF = 0x80;\nconst velocityMidi = 80;\n\nconst TEST_PLAY_SCALE = false;\n\nfunction testPlayScale(audioApi) {\n  const scaleNotes = makeOctaveScaleNoteSequence();\n\n  let currentNoteIndex = 0;\n  let prevNoteIndex = null;\n\n  setInterval(() => {\n    if (prevNoteIndex != null) {\n      audioApi.dx7.onMidi([\n        NOTE_OFF,\n        Tonal.note(scaleNotes[prevNoteIndex]).midi,\n        velocityMidi,\n      ]);\n    }\n\n    audioApi.dx7.onMidi([\n      NOTE_ON,\n      Tonal.note(scaleNotes[currentNoteIndex]).midi,\n      velocityMidi,\n    ]);\n    prevNoteIndex = currentNoteIndex;\n\n    currentNoteIndex = (currentNoteIndex + 1) % scaleNotes.length;\n    // currentNoteIndex = Math.floor(Math.random() * scaleNotes.length);\n  }, beatDurationSeconds * 1000);\n}\n\nfunction onTick(events, audioApi) {\n  let i = 0;\n  for (; i < events.length; i++) {\n    const nextEvent = events[i];\n    if (nextEvent.time > audioApi.actx.currentTime) {\n      break;\n    }\n\n    audioApi.dx7.onMidi(nextEvent.message);\n  }\n\n  return i === 0 ? events : events.slice(i);\n}\n\nfunction playNote(events, noteName, start, end) {\n  const noteMidi = Tonal.note(noteName).midi;\n\n  let updatedEvents = events;\n  // end any upcoming events for this key\n  events.forEach(ev => {\n    if (ev.message[1] == noteMidi) {\n      ev.time = start - 0.01;\n      ev.message[0] = NOTE_OFF;\n    }\n  });\n  return addEvents(updatedEvents, [\n    {\n      message: [NOTE_ON, noteMidi, velocityMidi],\n      time: start,\n    },\n    {\n      message: [NOTE_OFF, noteMidi, velocityMidi],\n      time: end,\n    },\n  ]);\n}\n\nfunction addEvents(events, newEvents) {\n  const updatedEvents = events.concat(newEvents);\n  updatedEvents.sort((a, b) => a.time - b.time);\n  return updatedEvents;\n}\n\nfunction makeOctaveScaleNoteSequence() {\n  const scaleNotes = Scale.scale('c4 major').notes;\n\n  scaleNotes.push(transposeByOctaves(Tonal.note(scaleNotes[0]), 1));\n\n  return scaleNotes;\n}\n\nfunction makeScaleData(key, scaleType) {\n  const scalePitchClasses = Scale.scale(`${key} ${scaleType}`).notes;\n  const scalePosChords = new Map(\n    getScaleChords(key, scaleType).map((chordNames, pos) => {\n      return [\n        pos,\n\n        chordNames.map(chordName => {\n          const chord = Chord.chord(chordName);\n          return {\n            pos,\n            chord,\n            chordType: scaleTypesChordPatterns[scaleType][pos],\n            chordName,\n            size:\n              chord.intervals.length * (chord.quality === 'Unknown' ? -1 : 1),\n          };\n        }),\n      ];\n    })\n  );\n\n  const sizes = new Set();\n\n  scalePosChords.forEach((chordDatas, pos) => {\n    chordDatas.forEach(chordData => {\n      sizes.add(chordData.size);\n    });\n  });\n\n  return {\n    scaleType,\n    key,\n    scalePitchClasses,\n    scalePosChords,\n    sizes: Array.from(sizes).sort((a, b) => a - b),\n  };\n}\n\nconst chordTypeColors = {\n  major: 'rgb(127,199,175)',\n  minor: 'rgb(255,158,157)',\n  diminished: 'rgb(218,216,167)',\n};\n\nconst buttonStyle = {\n  display: 'block',\n  width: '100%',\n  cursor: 'pointer',\n  color: 'black',\n  padding: 4,\n  paddingBottom: 8,\n  minHeight: 40,\n};\n\nconst ChordButton = React.memo(\n  ({chordData, playChord, setLastChord, octave, selected}) => {\n    return (\n      <div\n        style={{\n          ...buttonStyle,\n          background: chordTypeColors[chordData.chordType],\n          border: '1px solid',\n          borderColor: selected ? 'rgba(0,0,0,0.2)' : 'transparent',\n        }}\n        onClick={() => {\n          playChord(chordData, octave);\n          setLastChord(chordData.chordName);\n          console.log(chordData);\n        }}\n      >\n        <div>\n          {chordData.chordName}\n          {SHOW_FULL_CHORD_NAMES && (\n            <div>\n              <small>\n                {chordData.chord.name.length > 3 ? (\n                  chordData.chord.name\n                ) : (\n                  // bad data, don't show\n                  <span>&nbsp;</span>\n                )}\n              </small>\n            </div>\n          )}\n          {true && (\n            <div>\n              {SHOW_NOTE_NAMES && SHOW_NOTE_OCTS && (\n                <small>\n                  {getReifiedNotesForChord(chordData.chordName, octave).join()}\n                </small>\n              )}\n\n              {SHOW_NOTE_NAMES && !SHOW_NOTE_OCTS && (\n                <small>{chordData.chord.notes.join()}</small>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\nfunction App() {\n  const [audioApi, setAudioApi] = React.useState(null);\n  const resumeAudio = React.useCallback(\n    () => audioApi && audioApi.actx.resume(),\n    [audioApi]\n  );\n  const suspendAudio = React.useCallback(\n    () => audioApi && audioApi.actx.suspend(),\n    [audioApi]\n  );\n\n  const [key, setKey] = useLocalStorage('key', 'c');\n\n  const [includeExtra, setIncludeExtra] = useLocalStorage(\n    'includeExtra',\n    false\n  );\n\n  const [events, setEvents] = React.useState([]);\n\n  const playScale = React.useCallback(() => {\n    setEvents(events => {\n      if (audioApi == null) {\n        return;\n      }\n      let updatedEvents = events;\n      const scaleNotes = makeOctaveScaleNoteSequence();\n      const currentTime = audioApi.actx.currentTime;\n\n      let lastStartTimeOffset = 0;\n      scaleNotes.forEach(noteName => {\n        lastStartTimeOffset += beatDurationSeconds;\n\n        updatedEvents = playNote(\n          updatedEvents,\n          noteName,\n          currentTime + lastStartTimeOffset,\n          currentTime + lastStartTimeOffset + beatDurationSeconds\n        );\n      });\n\n      return updatedEvents;\n    });\n  });\n\n  const playChord = React.useCallback(\n    (chordData, octave) => {\n      const chordNotes = getReifiedNotesForChord(chordData.chordName, octave);\n\n      setEvents(events => {\n        if (audioApi == null) {\n          return;\n        }\n        let updatedEvents = events;\n\n        const currentTime = audioApi.actx.currentTime;\n\n        chordNotes.forEach((noteName, i) => {\n          updatedEvents = playNote(\n            updatedEvents,\n            noteName,\n            currentTime + i * (20 / 1000),\n            currentTime + beatDurationSeconds\n          );\n        });\n\n        return updatedEvents;\n      });\n    },\n    [setEvents, audioApi]\n  );\n\n  const [lastChord, setLastChord] = React.useState(null);\n  const [octave, setOctave] = useLocalStorage('octave', 4);\n  const [scaleType, setScaleType] = useLocalStorage('scaleType', 'major');\n\n  const scaleData = React.useMemo(() => makeScaleData(key, scaleType), [\n    key,\n    scaleType,\n  ]);\n\n  const toggleExtra = React.useCallback(() => setIncludeExtra(s => !s));\n\n  // startup\n  React.useEffect(() => {\n    window.onDX7Init = (dx7, actx) => {\n      const newAudioApi = {\n        dx7,\n        actx,\n      };\n\n      // start event-consuming interval\n      setInterval(() => {\n        setEvents(events => onTick(events, newAudioApi));\n      }, 1);\n\n      if (TEST_PLAY_SCALE) {\n        testPlayScale(newAudioApi);\n      }\n\n      setAudioApi(newAudioApi);\n    };\n    initDX7();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <button onClick={resumeAudio}>start audio</button>\n      <button onClick={suspendAudio}>pause audio</button>\n      {audioApi && <Recorder actx={audioApi.actx} inputNode={audioApi.dx7} />}\n      <div>\n        <label>\n          key:{' '}\n          <select\n            value={scaleData.key}\n            onChange={event => setKey(event.currentTarget.value)}\n          >\n            {['a', 'b', 'c', 'd', 'e', 'f', 'g'].map(key => (\n              <option key={key} value={key}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </label>{' '}\n        <label>\n          octave:{' '}\n          <select\n            value={octave}\n            onChange={event => setOctave(parseInt(event.currentTarget.value))}\n          >\n            {[1, 2, 3, 4, 5, 6, 7].map(key => (\n              <option key={key} value={key}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </label>{' '}\n        <label>\n          scale type:{' '}\n          <select\n            value={scaleType}\n            onChange={event => setScaleType(event.currentTarget.value)}\n          >\n            {['major', 'minor'].map(key => (\n              <option key={key} value={key}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </label>{' '}\n        <label>scale notes: </label>\n        {Array.from(scaleData.scalePosChords.keys())\n          .map(k => scaleData.scalePitchClasses[k])\n          .join()}{' '}\n        <label>\n          <input\n            type=\"checkbox\"\n            onChange={toggleExtra}\n            checked={includeExtra}\n          />\n          include extra chords\n        </label>\n        <button onClick={playScale}>play scale</button>\n      </div>\n\n      {scaleData.sizes\n        .filter(size => (includeExtra ? true : size > 0))\n        .sort((a, b) => (SIZE_ASC ? a - b : b - a))\n        .map((size, sizeIndex) => (\n          <div key={sizeIndex}>\n            {false && <div style={{flex: 1}}>{size}</div>}\n            <br />\n            <div key={size} style={{display: 'flex'}}>\n              {Array.from(scaleData.scalePosChords).map(([pos, chordDatas]) => {\n                return (\n                  <div key={pos} style={{flex: 1}}>\n                    {sizeIndex === 0 && (\n                      <div>{scaleTypesPosNames[scaleType][pos]}</div>\n                    )}\n\n                    {chordDatas\n                      .filter(chordData => chordData.size === size)\n                      // silly heuristic for simpler chords\n                      .sort((a, b) => a.chordName.length - b.chordName.length)\n                      .map((chordData, i) => (\n                        <ChordButton\n                          key={i}\n                          {...{\n                            chordData,\n                            playChord,\n                            setLastChord,\n                            octave,\n                            selected: chordData.chordName === lastChord,\n                          }}\n                        />\n                      ))}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        ))}\n\n      <pre style={{height: 300, overflow: 'scroll'}}>\n        {events.map(ev => JSON.stringify(ev)).join('\\n')}\n      </pre>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}