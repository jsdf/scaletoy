{"version":3,"sources":["../node_modules/@tonaljs/midi/dist/index.esnext.js","PianoRoll.js","MidiExploder.js"],"names":["Math","log","SHARPS","split","FLATS","PIANOROLL_NOTE_HEIGHT","PIANOROLL_QUARTER_WIDTH","SCROLLBAR_HEIGHT","clamp","val","min","max","getOffsetInTarget","e","rect","currentTarget","getBoundingClientRect","x","pageX","window","scrollX","width","y","pageY","scrollY","height","getSelectionBox","state","startX","start","end","startY","left","top","PianoRollTrack","_ref","midi","extents","track","trackIdx","tracksWidth","midiRange","selectedNotes","setSelectedNotes","zoom","scaleNotes","selectionRef","React","useRef","dragging","selectionElRef","updateSelectionEl","el","current","style","visibility","box","getNoteLayout","useCallback","ev","ticks","header","ppq","minNote","durationTicks","selectNotes","notes","filter","a","b","ax1","ay1","ax2","ay2","bx1","by1","bx2","by2","collision","Set","onMouseDown","onMouseMove","onMouseUp","react_default","createElement","overflowX","onMouseLeave","position","borderBottom","Object","toConsumableArray","Array","keys","map","offset","noteName","simplifyEnharmonics","options","arguments","length","undefined","round","pc","sharps","pitchClass","floor","Midi","note","Tonal","key","background","has","acc","borderTop","overflow","marginTop","fontSize","fontFamily","evIdx","objectSpread","border","ref","Piano","props","trackExtents","useMemo","tracks","t","maxNote","maxTicks","reduce","ex","textAlign","Details","startOpen","summary","Fragment","instrument","name","allScales","octave","NOTE_ON","NOTE_OFF","velocityMidi","SelectionInfo","scaleData","notePlayer","selectedNotesSet","matchingScales","keyScales","scale","_step","_iterator","_createForOfIteratorHelper","s","n","done","value","includes","err","f","join","Chord","reifyScaleNotesWithOctave","Keyboard","highlightKeys","startOctave","octaves","highlightType","intervals","interval","concat","tonic","MidiExploder","audioApi","_usePersistedMidiFile","_useLocalStorage","useLocalStorage","_useLocalStorage2","slicedToArray","midiJSONObj","setMidiJSONObj","midiFile","ToneJSMidi","fromJSON","console","error","toJSON","usePersistedMidiFile","_usePersistedMidiFile2","setMidiFile","_useQueryParam","useQueryParam","QUERY_PARAM_FORMATS","string","_useQueryParam2","setKey","_useQueryParam3","_useQueryParam4","scaleType","setScaleType","_useLocalStorage3","_useLocalStorage4","setZoom","_useLocalStorage5","_useLocalStorage6","highlightScale","setHighlightScale","handleFiles","files","file","reader","FileReader","onload","result","readAsArrayBuffer","Scale","ScaleDictionary","scaleDef","notesAbstractMidi","sort","makeScaleData","_React$useState","useState","_React$useState2","highlightedKeys","setHighlightedKeys","setHighlightedScale","type","useValueObserver","onMidi","dx7","message","triggerAttack","triggerRelease","_React$useState3","_React$useState4","useEffect","newNodesMidi","forEach","noteMidi","Note","timer","setTimeout","clearTimeout","className","display","flexDirection","gap","flexWrap","padding","margin","onChange","Checkbox","label","checked","event","onMouseOver","onClick","open","JSON","stringify","overflowY"],"mappings":"wKA8CAA,KAAAC,IAAA,GACAD,KAAAC,IAAA,KAmBA,IAAAC,EAAA,+BAAAC,MAAA,KACAC,EAAA,+BAAAD,MAAA,wEC5DME,EAAwB,GACxBC,EAA0B,GAC1BC,EAAmB,GAEzB,SAASC,EAAMC,EAAKC,EAAKC,GACvB,OAAOX,KAAKW,IAAIX,KAAKU,IAAID,EAAKE,GAAMD,GAGtC,SAASE,EAAkBC,GACzB,IAAMC,EAAOD,EAAEE,cAAcC,wBAE7B,MAAO,CACLC,EAAGT,EAAMK,EAAEK,OAASJ,EAAKG,EAAIE,OAAOC,SAAU,EAAGN,EAAKO,OACtDC,EAAGd,EAAMK,EAAEU,OAAST,EAAKQ,EAAIH,OAAOK,SAAU,EAAGV,EAAKW,SAuB1D,SAASC,EAAgBC,GACvB,IAAMC,EAAS5B,KAAKU,IAAIiB,EAAME,MAAMZ,EAAGU,EAAMG,IAAIb,GAC3Cc,EAAS/B,KAAKU,IAAIiB,EAAME,MAAMP,EAAGK,EAAMG,IAAIR,GAGjD,MAAO,CACLU,KAAMJ,EACNK,IAAKF,EACLV,MALWrB,KAAKW,IAAIgB,EAAME,MAAMZ,EAAGU,EAAMG,IAAIb,GAK/BW,EACdH,OALWzB,KAAKW,IAAIgB,EAAME,MAAMP,EAAGK,EAAMG,IAAIR,GAK9BS,GAInB,SAASG,EAATC,GAWG,IAVDC,EAUCD,EAVDC,KACAC,EASCF,EATDE,QACAC,EAQCH,EARDG,MACAC,EAOCJ,EAPDI,SACAC,EAMCL,EANDK,YACAC,EAKCN,EALDM,UACAC,EAICP,EAJDO,cACAC,EAGCR,EAHDQ,iBACAC,EAECT,EAFDS,KACAC,EACCV,EADDU,WAEMC,EAAeC,IAAMC,OAAO,CAChCnB,MAAO,CAACZ,EAAG,EAAGK,EAAG,GACjBQ,IAAK,CAACb,EAAG,EAAGK,EAAG,GACf2B,UAAU,IAGNC,EAAiBH,IAAMC,OAAO,MAEpC,SAASG,IACP,IAAMC,EAAKF,EAAeG,QACpB1B,EAAQmB,EAAaO,QAC3B,GAAID,GAAMzB,EAAO,CACfyB,EAAGE,MAAMC,WAAa5B,EAAMsB,SAAW,UAAY,SAEnD,IAAMO,EAAM9B,EAAgBC,GAE5ByB,EAAGE,MAAMtB,KAAOwB,EAAIxB,KAAO,KAC3BoB,EAAGE,MAAMrB,IAAMuB,EAAIvB,IAAM,KACzBmB,EAAGE,MAAMjC,MAAQmC,EAAInC,MAAQ,KAC7B+B,EAAGE,MAAM7B,OAAS+B,EAAI/B,OAAS,MAInC,IAAMgC,EAAgBV,IAAMW,YAC1B,SAACC,GACC,MAAO,CACL3B,KAAO2B,EAAGC,MAAQxB,EAAKyB,OAAOC,IAAOxD,EAA0BsC,EAC/DX,KAAMQ,GAAakB,EAAGvB,KAAOC,EAAQ0B,UAAY1D,EACjDgB,MACGsC,EAAGK,cAAgB5B,EAAKyB,OAAOC,IAAOxD,EAA0BsC,EACnEnB,OAAQpB,IAGZ,CAAC+B,EAAKyB,OAAOC,IAAKzB,EAAQ0B,QAAStB,EAAWG,IAG1CqB,EAAclB,IAAMW,YAAY,WACpC,IAAM/B,EAAQmB,EAAaO,QAC3B,GAAI1B,EAAO,CACT,IAAM6B,EAAM9B,EAAgBC,GAEtBe,EAAgBJ,EAAM4B,MAAMC,OAAO,SAACR,GAGxC,OAxFR,SAAmBS,EAAGC,GAGpB,IAAIC,EAAMF,EAAEpC,KACRuC,EAAMH,EAAEnC,IAERuC,EAAMJ,EAAEpC,KAAOoC,EAAE/C,MACjBoD,EAAML,EAAEnC,IAAMmC,EAAE3C,OAEhBiD,EAAML,EAAErC,KACR2C,EAAMN,EAAEpC,IAER2C,EAAMP,EAAErC,KAAOqC,EAAEhD,MACjBwD,EAAMR,EAAEpC,IAAMoC,EAAE5C,OAGpB,QAAS6C,EAAMM,GAAOF,EAAMF,GAAOD,EAAMM,GAAOF,EAAMF,GAwEzCK,CAFQrB,EAAcE,GAEJH,KAG3Bb,EAAiB,IAAIoC,IAAIrC,MAE1B,CAACJ,EAAOmB,EAAed,IAEpBqC,EAAcjC,IAAMW,YAAY,SAAC7C,GACrCiC,EAAaO,QAAU,CACrBxB,MAAOjB,EAAkBC,GACzBiB,IAAKlB,EAAkBC,GACvBoC,UAAU,GAEZE,KACC,IAEG8B,EAAclC,IAAMW,YAAY,SAAC7C,GACrC,IAAMc,EAAQmB,EAAaO,QACvB1B,GAASA,EAAMsB,WACjBtB,EAAMG,IAAMlB,EAAkBC,GAC9BsC,MAED,IAEG+B,EAAYnC,IAAMW,YAAY,WAClC,IAAM/B,EAAQmB,EAAaO,QACvB1B,GAASA,EAAMsB,WACjBtB,EAAMsB,UAAW,EACjBgB,KAEFd,KACC,CAACc,IAEJ,OACEkB,EAAAf,EAAAgB,cAAA,OAAK9B,MAAO,CAAC+B,UAAW,WACtBF,EAAAf,EAAAgB,cAAA,OACEJ,YAAaA,EACbC,YAAaA,EACbC,UAAWA,EACXI,aAAcJ,EACd5B,MAAO,CACL7B,QACGgB,EAAY,GAAKpC,EAAwB,EAAIE,EAChDc,MAAOmB,EAAcI,EACrB2C,SAAU,WACVC,aAAc,mBAGf,IACAC,OAAAC,EAAA,EAAAD,CAAIE,MAAMlD,EAAY,GAAGmD,QAAQC,IAAI,SAACC,GACrC,IAAM1D,EAAOK,EAAYqD,EAASzD,EAAQ0B,QACpCgC,EAAWC,YD5E3B,SAAA5D,GACA,IAAA6D,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,MACA9D,EAAApC,KAAAqG,MAAAjE,GACA,IACAkE,IADA,IAAAL,EAAAM,OAAArG,EAAAE,GACAgC,EAAA,IAEA,OAAA6D,EAAAO,WACAF,EAIAA,GADAtG,KAAAyG,MAAArE,EAAA,OCkE+CsE,CAAoBtE,IACnDuE,EAAOX,YAAoBY,IAAWb,GAAUO,IAEtD,OACEnB,EAAAf,EAAAgB,cAAA,OACEyB,IAAK,QAAUtE,EAAW,MAAQuD,EAClCxC,MAAO,CACL7B,OAAQpB,EACRyG,WAAYjE,EAAWkE,IAAIJ,GACvB,oBAC8B,KAA7BC,IAAWb,GAAUiB,IACJ,OACA,OACtBC,UAAW,iBACXC,SAAU,WAGZ/B,EAAAf,EAAAgB,cAAA,OACE9B,MAAO,CACL6D,WAAY,EACZC,SAAU,EACVC,WAAY,gBACZ9B,SAAU,QACVvD,KAAM,IAGP+D,MAKRzD,EAAM4B,MAAM2B,IAAI,SAAClC,EAAI2D,GAAL,OACfnC,EAAAf,EAAAgB,cAAA,OACEyB,IAAK,QAAUtE,EAAW,OAAS+E,EACnChE,MAAKmC,OAAA8B,EAAA,EAAA9B,CAAA,GACAhC,EAAcE,GADd,CAEHmD,WAAYpE,EAAcqE,IAAIpD,GAAM,MAAQ,qBAC5C6D,OAAQ,sBACRjC,SAAU,iBAIhBJ,EAAAf,EAAAgB,cAAA,OACEqC,IAAKvE,EACLI,MAAO,CACLwD,WAAU,wBACVU,OAAQ,kBACRjC,SAAU,gBAQP,SAASmC,EAAMC,GAM3B,IACMvF,EAA2DuF,EAA3DvF,KAAMM,EAAqDiF,EAArDjF,cAAeC,EAAsCgF,EAAtChF,iBAAkBC,EAAoB+E,EAApB/E,KAAMC,EAAc8E,EAAd9E,WAC9C+E,EAAe7E,IAAM8E,QAAQ,WACjC,OAAOzF,EAAK0F,OAAOjC,IAAI,SAACkC,GACtB,OAA0B,IAAnBA,EAAE7D,MAAMiC,OACX,CAACpC,QAAS,EAAGiE,QAAS,GAAIC,SAAU,GACpCF,EAAE7D,MAAMgE,OACN,SAAClB,EAAKrD,GACJ,IAAMI,EAAU/D,KAAKU,IAAIsG,EAAIjD,QAASJ,EAAGvB,MACzC,MAAO,CACL2B,UACAiE,QAAShI,KAAKW,IAAIqG,EAAIgB,QAASrE,EAAGvB,KAAM2B,EAAU,IAClDkE,SAAUjI,KAAKW,IAAIqG,EAAIiB,SAAUtE,EAAGC,MAAQD,EAAGK,iBAGnD,CAACD,QAAS,IAAKiE,QAAS,EAAGC,SAAU,OAG5C,CAAC7F,EAAK0F,SAEHtF,EAAcO,IAAM8E,QAAQ,WAKhC,OAJiBD,EAAaM,OAC5B,SAAClB,EAAKmB,GAAN,OAAanI,KAAKW,IAAIwH,EAAGF,SAAUjB,IACnC,GAEiB5E,EAAKyB,OAAOC,IAAOxD,GACrC,CAACsH,EAAcxF,EAAKyB,OAAOC,MAE9B,OACEqB,EAAAf,EAAAgB,cAAA,OAAK9B,MAAO,CAAC8E,UAAW,SACrBhG,EAAK0F,OAAOjC,IAAI,SAACvD,EAAOC,GACvB,IAAMF,EAAUuF,EAAarF,GACvBE,EAAYJ,EAAQ2F,QAAU3F,EAAQ0B,QAC5C,OACEoB,EAAAf,EAAAgB,cAACiD,EAAA,EAAD,CACExB,IAAKtE,EACL+F,WAAW,EACXC,QACEpD,EAAAf,EAAAgB,cAAAD,EAAAf,EAAAoE,SAAA,cACSjG,EAAW,EADpB,IACwB,IACrBD,EAAMmG,YAAcnG,EAAMmG,WAAWC,OAI1CvD,EAAAf,EAAAgB,cAAClD,EAAD,CAEIE,OACAC,UACAC,QACAC,WACAC,cACAC,YACAC,gBACAC,mBACAC,OACAC,4lCCrQhB,IAAM+C,EAAO,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAEpE+C,EAAY,CAChB,QACA,QACA,SACA,SACA,WACA,SACA,aACA,WAGIC,EAAS,EACTC,EAAU,IACVC,EAAW,IACXC,EAAe,GAErB,SAASC,EAAT7G,GAA+D,IAAvC8G,EAAuC9G,EAAvC8G,UAAWvG,EAA4BP,EAA5BO,cAAewG,EAAa/G,EAAb+G,WAC1CC,EAAmB1D,OAAAC,EAAA,EAAAD,CACpB,IAAIV,IAAIU,OAAAC,EAAA,EAAAD,CAAI/C,GAAemD,IAAI,SAACc,GAAD,OAAUC,IAAWD,EAAK+B,MAAMpC,OAClET,IAAIG,KAEAoD,EAAiBH,EAAUI,UAAUlF,OAAO,SAACmF,GACjD,IAD2DC,EACrD1G,EAAayG,EAAMpF,MAAM2B,IAAIG,KADwBwD,EAAAC,EAEpCN,GAFoC,IAE3D,IAAAK,EAAAE,MAAAH,EAAAC,EAAAG,KAAAC,MAAyC,KAA9B7D,EAA8BwD,EAAAM,MACvC,IAAKhH,EAAWiH,SAAS/D,GACvB,OAAO,GAJgD,MAAAgE,GAAAP,EAAA3I,EAAAkJ,GAAA,QAAAP,EAAAQ,IAO3D,OAAO,IAGT,OACE7E,EAAAf,EAAAgB,cAAA,WACED,EAAAf,EAAAgB,cAAA,qBAAa+D,EAAiBc,KAAK,OACnC9E,EAAAf,EAAAgB,cAAA,oBAEG8E,IAAaf,GAAkBc,KAAK,OAEvC9E,EAAAf,EAAAgB,cAACiD,EAAA,EAAD,CAASE,QAAQ,oBACda,EAAevD,IAAI,SAACyD,GACnB,IAAMzG,EAAasH,EAA0Bb,EAAOV,GACpD,OACEzD,EAAAf,EAAAgB,cAAA,OAAKyB,IAAKyC,EAAMZ,MACbY,EAAMZ,KACPvD,EAAAf,EAAAgB,cAAA,WAEAD,EAAAf,EAAAgB,cAACgF,EAAA,EAAD,CACEC,cAAexH,EACfyH,YAAa1B,EACb2B,QAAS,EACTC,cAAe,QACftB,WAAYA,SAU5B,SAASiB,EAA0Bb,EAAOV,GACxC,OAAOU,EAAMmB,UAAU5E,IAAI,SAAC6E,GAAD,OACzB1E,YAAoBY,IAAA,GAAA+D,OAAmBrB,EAAMsB,OAAzBD,OAAiC/B,GAAU8B,MAgDpD,SAASG,EAAalD,GAIlC,IACMmD,EAAYnD,EAAZmD,SADNC,EA/BH,WAAgC,IAAAC,EACQC,YACpC,0BACA,MAH4BC,EAAAzF,OAAA0F,EAAA,EAAA1F,CAAAuF,EAAA,GACvBI,EADuBF,EAAA,GACVG,EADUH,EAAA,GAmB9B,MAAO,CAbUnI,IAAM8E,QAAQ,WAC7B,GAAmB,MAAfuD,EACF,IACE,IAAME,EAAW,IAAIC,OAErB,OADAD,EAASE,SAASJ,GACXE,EACP,MAAOvB,GAEP,OADA0B,QAAQC,MAAM,2BAA4B3B,GACnC,OAGV,CAACqB,IAIF,SAACE,GACCD,EAAeC,EAASK,YAWIC,GAF/BC,EAAApG,OAAA0F,EAAA,EAAA1F,CAAAsF,EAAA,GAEMO,EAFNO,EAAA,GAEgBC,EAFhBD,EAAA,GAAAE,EAGqBC,YAAc,MAAO,IAAKC,IAAoBC,QAHnEC,EAAA1G,OAAA0F,EAAA,EAAA1F,CAAAsG,EAAA,GAGMlF,EAHNsF,EAAA,GAGWC,EAHXD,EAAA,GAAAE,EAIiCL,YAChC,YACA,QACAC,IAAoBC,QAPrBI,EAAA7G,OAAA0F,EAAA,EAAA1F,CAAA4G,EAAA,GAIME,EAJND,EAAA,GAIiBE,EAJjBF,EAAA,GAAAG,EASuBxB,YAAgB,mBAAoB,GAT3DyB,EAAAjH,OAAA0F,EAAA,EAAA1F,CAAAgH,EAAA,GASM7J,EATN8J,EAAA,GASYC,EATZD,EAAA,GAAAE,EAU2C3B,YAC1C,8BACA,GAZD4B,EAAApH,OAAA0F,EAAA,EAAA1F,CAAAmH,EAAA,GAUME,EAVND,EAAA,GAUsBE,EAVtBF,EAAA,GAeKG,EAAcjK,IAAMW,YACxB,SAAC7C,GACC,GAAKA,EAAEE,cAAckM,MAArB,CADK,IAGEC,EAHFzH,OAAA0F,EAAA,EAAA1F,CAGU5E,EAAEE,cAAckM,MAH1B,MAKL,GAAIC,EAAM,CACR,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WACdvB,EAAY,IAAIP,OAAgB4B,EAAOG,SACvCX,EAAQ,IAEVQ,EAAOI,kBAAkBL,MAG7B,CAACpB,EAAaa,IAGV1D,EAAYlG,IAAM8E,QAAQ,kBAjFlC,SAAuBhB,EAAK0F,EAAW3D,GACrC,IAAMU,EAAQkE,IAAA,GAAA7C,OAAe9D,EAAf,KAAA8D,OAAsB4B,IAE9B1J,EAAasH,EAA0Bb,EAAOV,GAE9CS,EAAYoE,MACf5H,IAAI,SAAC6H,GAAD,OAAcF,IAAA,GAAA7C,OAAe9D,EAAf,KAAA8D,OAAsB+C,EAAShF,SACjD7C,IAAI,SAACyD,GAAD,OAAA7D,OAAA8B,EAAA,EAAA9B,CAAA,GACA6D,EADA,CAEHqE,kBAAmB,IAAI5I,IACrBuE,EAAMpF,MAAM2B,IAAI,SAACE,GAAD,OAAca,IAAA,GAAA+D,OAAc5E,EAAd,MAA2B3D,OAAMwL,YAIrE,MAAO,CAACtE,QAAOzG,aAAYgE,MAAKwC,aAmEMwE,CAAchH,EAAK0F,EAAW3D,IAAS,CAC3E/B,EACA0F,IAnCDuB,EAqC6C/K,IAAMgL,SAAS,MArC5DC,EAAAvI,OAAA0F,EAAA,EAAA1F,CAAAqI,EAAA,GAqCMG,EArCND,EAAA,GAqCuBE,EArCvBF,EAAA,GAuCKG,EAAsBpL,IAAMW,YAAY,WAC5CwK,EAAmB,CAACtI,KAAMqD,EAAUpG,WAAYuL,KAAM,WACrD,CAACnF,IAEJoF,YAAiBpF,EAAWkF,GAE5B,IAAMG,EAASvL,IAAM8E,QAAQ,WAC3B,OAAIiD,EAASyD,IACJ,SAACC,GAAD,OAAa1D,EAASyD,IAAID,OAAOE,IAEnC,SAACA,MACP,CAAC1D,IAEE5B,GAAanG,IAAM8E,QAAQ,WAC/B,MAAO,CACL4G,cADK,SACS1I,GACZuI,EAAO,CAACzF,EAASjC,IAAWb,GAAU3D,KAAM2G,KAE9C2F,eAJK,SAIU3I,GACbuI,EAAO,CAACxF,EAAUlC,IAAWb,GAAU3D,KAAM2G,OAGhD,CAACuF,IA7DHK,GA+DyC5L,IAAMgL,SAAS,IAAIhJ,KA/D5D6J,GAAAnJ,OAAA0F,EAAA,EAAA1F,CAAAkJ,GAAA,GA+DMjM,GA/DNkM,GAAA,GA+DqBjM,GA/DrBiM,GAAA,GAuFD,OAtBA7L,IAAM8L,UAAU,WACd,IAAMC,EAAe,IAAI/J,IAAIU,OAAAC,EAAA,EAAAD,CAAI/C,IAAemD,IAAI,SAACc,GAAD,OAAUA,EAAKvE,QAKnE,SAASN,IACPgN,EAAaC,QAAQ,SAACC,GACpB9F,GAAWwF,eAAeO,IAAcD,MAN5CF,EAAaC,QAAQ,SAACC,GACpB9F,GAAWuF,cAAcQ,IAAcD,MASzC,IAAME,EAAQC,WAAW,WACvBrN,KACC,KAEH,OAAO,WACLsN,aAAaF,GACbpN,MAED,CAACoH,GAAYxG,KAGdyC,EAAAf,EAAAgB,cAAA,OAAKiK,UAAU,OACblK,EAAAf,EAAAgB,cAAA,OACE9B,MAAO,CACLgM,QAAS,OACTC,cAAe,MACfC,IAAK,EACLC,SAAU,OACVC,QAAS,EACT5I,WAAY,OACZ6I,OAAQ,IAGVxK,EAAAf,EAAAgB,cAAA,2BACaD,EAAAf,EAAAgB,cAAA,SAAOgJ,KAAK,OAAOwB,SAAU5C,KAE1C7H,EAAAf,EAAAgB,cAACyK,EAAA,EAAD,CACEC,MAAM,kBACNC,QAASjD,EACT8C,SAAU,kBAAM7C,EAAkB,SAACrD,GAAD,OAAQA,OAG5CvE,EAAAf,EAAAgB,cAAA,oBACO,IACLD,EAAAf,EAAAgB,cAAA,UACEyE,MAAOZ,EAAUpC,IACjB+I,SAAU,SAACI,GAAD,OAAW5D,EAAO4D,EAAMjP,cAAc8I,SAE/CjE,EAAKC,IAAI,SAACgB,GAAD,OACR1B,EAAAf,EAAAgB,cAAA,UAAQyB,IAAKA,EAAKgD,MAAOhD,GACtBA,OAKT1B,EAAAf,EAAAgB,cAAA,2BACc,IACZD,EAAAf,EAAAgB,cAAA,UACEyE,MAAO0C,EACPqD,SAAU,SAACI,GAAD,OAAWxD,EAAawD,EAAMjP,cAAc8I,SAErDlB,EAAU9C,IAAI,SAACgB,GAAD,OACb1B,EAAAf,EAAAgB,cAAA,UAAQyB,IAAKA,EAAKgD,MAAOhD,GACtBA,OAKT1B,EAAAf,EAAAgB,cAAA,OAAK6K,YAAa9B,GAChBhJ,EAAAf,EAAAgB,cAAA,8BACC6D,EAAUpG,WAAWgD,IAAI,SAACc,GAAD,OAAUsI,IAActI,KAAOsD,OAAQ,KAGnE9E,EAAAf,EAAAgB,cAACgF,EAAA,EAAD,CACEC,cAAe4D,EAAkBA,EAAgBrI,KAAO,KACxD0E,YAAa1B,EACb2B,QAAS,EACTC,cAAeyD,EAAkBA,EAAgBG,KAAO,QACxDlF,WAAYA,KAGd/D,EAAAf,EAAAgB,cAAA,mBAEED,EAAAf,EAAAgB,cAAA,UACE8K,QAAS,WACPvD,EAAQ,SAACjD,GAAD,OAAW,KAAJA,MAFnB,KAOAvE,EAAAf,EAAAgB,cAAA,UACE8K,QAAS,WACPvD,EAAQ,SAACjD,GAAD,OAAOA,GAAK,EAAI,UAF5B,OAUJvE,EAAAf,EAAAgB,cAAA,WAAS+K,MAAM,EAAO7M,MAAO,CAAC8E,UAAW,SACvCjD,EAAAf,EAAAgB,cAAA,uBACAD,EAAAf,EAAAgB,cAAA,WAAMkG,GAAY8E,KAAKC,UAAU/E,EAASK,SAAU,KAAM,KAE/C,MAAZL,GACCnG,EAAAf,EAAAgB,cAAA,OAAK9B,MAAO,CAACgM,QAAS,SACpBnK,EAAAf,EAAAgB,cAAA,OAAK9B,MAAO,CAACgN,UAAW,OAAQjP,MAAO,QACrC8D,EAAAf,EAAAgB,cAACsC,EAAD,CACEtF,KAAMkJ,EAEJ5I,iBACAC,oBACAC,OACAC,WAAYiK,EACR,IAAI/H,IAAIkE,EAAUK,MAAMpF,MAAM2B,IAAIG,MAClC,IAAIjB,OAKdI,EAAAf,EAAAgB,cAAA,OAAK9B,MAAO,CAACjC,MAAO,MAAOiP,UAAW,SACpCnL,EAAAf,EAAAgB,cAAC4D,EAAD,CAAoBC,YAAWvG,iBAAewG","file":"static/js/5.bcc99da2.chunk.js","sourcesContent":["import { note } from '@tonaljs/tonal';\n\nfunction isMidi(arg) {\n  return +arg >= 0 && +arg <= 127;\n}\n/**\r\n * Get the note midi number (a number between 0 and 127)\r\n *\r\n * It returns undefined if not valid note name\r\n *\r\n * @function\r\n * @param {string|number} note - the note name or midi number\r\n * @return {Integer} the midi number or undefined if not valid note\r\n * @example\r\n * import { toMidi } from '@tonaljs/midi'\r\n * toMidi(\"C4\") // => 60\r\n * toMidi(60) // => 60\r\n * toMidi('60') // => 60\r\n */\n\n\nfunction toMidi(note$1) {\n  if (isMidi(note$1)) {\n    return +note$1;\n  }\n\n  var n = note(note$1);\n  return n.empty ? null : n.midi;\n}\n/**\r\n * Get the frequency in hertzs from midi number\r\n *\r\n * @param {number} midi - the note midi number\r\n * @param {number} [tuning = 440] - A4 tuning frequency in Hz (440 by default)\r\n * @return {number} the frequency or null if not valid note midi\r\n * @example\r\n * import { midiToFreq} from '@tonaljs/midi'\r\n * midiToFreq(69) // => 440\r\n */\n\n\nfunction midiToFreq(midi) {\n  var tuning = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 440;\n  return Math.pow(2, (midi - 69) / 12) * tuning;\n}\n\nvar L2 = Math.log(2);\nvar L440 = Math.log(440);\n/**\r\n * Get the midi number from a frequency in hertz. The midi number can\r\n * contain decimals (with two digits precission)\r\n *\r\n * @param {number} frequency\r\n * @return {number}\r\n * @example\r\n * import { freqToMidi} from '@tonaljs/midi'\r\n * freqToMidi(220)); //=> 57\r\n * freqToMidi(261.62)); //=> 60\r\n * freqToMidi(261)); //=> 59.96\r\n */\n\nfunction freqToMidi(freq) {\n  var v = 12 * (Math.log(freq) - L440) / L2 + 69;\n  return Math.round(v * 100) / 100;\n}\n\nvar SHARPS = \"C C# D D# E F F# G G# A A# B\".split(\" \");\nvar FLATS = \"C Db D Eb E F Gb G Ab A Bb B\".split(\" \");\n/**\r\n * Given a midi number, returns a note name. The altered notes will have\r\n * flats unless explicitly set with the optional `useSharps` parameter.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @param {Object} options = default: `{ sharps: false, pitchClass: false }`\r\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\r\n * @return {string} the note name\r\n * @example\r\n * import { midiToNoteName } from '@tonaljs/midi'\r\n * midiToNoteName(61) // => \"Db4\"\r\n * midiToNoteName(61, { pitchClass: true }) // => \"Db\"\r\n * midiToNoteName(61, { sharps: true }) // => \"C#4\"\r\n * midiToNoteName(61, { pitchClass: true, sharps: true }) // => \"C#\"\r\n * // it rounds to nearest note\r\n * midiToNoteName(61.7) // => \"D4\"\r\n */\n\nfunction midiToNoteName(midi) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  midi = Math.round(midi);\n  var pcs = options.sharps === true ? SHARPS : FLATS;\n  var pc = pcs[midi % 12];\n\n  if (options.pitchClass) {\n    return pc;\n  }\n\n  var o = Math.floor(midi / 12) - 1;\n  return pc + o;\n}\n\nexport { freqToMidi, isMidi, midiToFreq, midiToNoteName, toMidi };","// @flow\nimport React from 'react';\nimport * as Midi from '@tonaljs/midi';\nimport * as Tonal from '@tonaljs/tonal';\nimport Details from './Details';\nimport simplifyEnharmonics from './simplifyEnharmonics';\n\nconst PIANOROLL_NOTE_HEIGHT = 10;\nconst PIANOROLL_QUARTER_WIDTH = 10;\nconst SCROLLBAR_HEIGHT = 10;\n\nfunction clamp(val, min, max) {\n  return Math.max(Math.min(val, max), min);\n}\n\nfunction getOffsetInTarget(e) {\n  const rect = e.currentTarget.getBoundingClientRect();\n\n  return {\n    x: clamp(e.pageX - (rect.x + window.scrollX), 0, rect.width),\n    y: clamp(e.pageY - (rect.y + window.scrollY), 0, rect.height),\n  };\n}\n\nfunction collision(a, b) {\n  // work out the corners (x1,x2,y1,y1) of each rectangle\n  // top left\n  let ax1 = a.left;\n  let ay1 = a.top;\n  // bottom right\n  let ax2 = a.left + a.width;\n  let ay2 = a.top + a.height;\n  // top left\n  let bx1 = b.left;\n  let by1 = b.top;\n  // bottom right\n  let bx2 = b.left + b.width;\n  let by2 = b.top + b.height;\n\n  // test rectangular overlap\n  return !(ax1 > bx2 || bx1 > ax2 || ay1 > by2 || by1 > ay2);\n}\n\nfunction getSelectionBox(state) {\n  const startX = Math.min(state.start.x, state.end.x);\n  const startY = Math.min(state.start.y, state.end.y);\n  const endX = Math.max(state.start.x, state.end.x);\n  const endY = Math.max(state.start.y, state.end.y);\n  return {\n    left: startX,\n    top: startY,\n    width: endX - startX,\n    height: endY - startY,\n  };\n}\n\nfunction PianoRollTrack({\n  midi,\n  extents,\n  track,\n  trackIdx,\n  tracksWidth,\n  midiRange,\n  selectedNotes,\n  setSelectedNotes,\n  zoom,\n  scaleNotes,\n}) {\n  const selectionRef = React.useRef({\n    start: {x: 0, y: 0},\n    end: {x: 0, y: 0},\n    dragging: false,\n  });\n\n  const selectionElRef = React.useRef(null);\n\n  function updateSelectionEl() {\n    const el = selectionElRef.current;\n    const state = selectionRef.current;\n    if (el && state) {\n      el.style.visibility = state.dragging ? 'visible' : 'hidden';\n\n      const box = getSelectionBox(state);\n\n      el.style.left = box.left + 'px';\n      el.style.top = box.top + 'px';\n      el.style.width = box.width + 'px';\n      el.style.height = box.height + 'px';\n    }\n  }\n\n  const getNoteLayout = React.useCallback(\n    (ev) => {\n      return {\n        left: (ev.ticks / midi.header.ppq) * PIANOROLL_QUARTER_WIDTH * zoom,\n        top: (midiRange - (ev.midi - extents.minNote)) * PIANOROLL_NOTE_HEIGHT,\n        width:\n          (ev.durationTicks / midi.header.ppq) * PIANOROLL_QUARTER_WIDTH * zoom,\n        height: PIANOROLL_NOTE_HEIGHT,\n      };\n    },\n    [midi.header.ppq, extents.minNote, midiRange, zoom]\n  );\n\n  const selectNotes = React.useCallback(() => {\n    const state = selectionRef.current;\n    if (state) {\n      const box = getSelectionBox(state);\n\n      const selectedNotes = track.notes.filter((ev) => {\n        const layout = getNoteLayout(ev);\n\n        return collision(layout, box);\n      });\n\n      setSelectedNotes(new Set(selectedNotes));\n    }\n  }, [track, getNoteLayout, setSelectedNotes]);\n\n  const onMouseDown = React.useCallback((e) => {\n    selectionRef.current = {\n      start: getOffsetInTarget(e),\n      end: getOffsetInTarget(e),\n      dragging: true,\n    };\n    updateSelectionEl();\n  }, []);\n\n  const onMouseMove = React.useCallback((e) => {\n    const state = selectionRef.current;\n    if (state && state.dragging) {\n      state.end = getOffsetInTarget(e);\n      updateSelectionEl();\n    }\n  }, []);\n\n  const onMouseUp = React.useCallback(() => {\n    const state = selectionRef.current;\n    if (state && state.dragging) {\n      state.dragging = false;\n      selectNotes();\n    }\n    updateSelectionEl();\n  }, [selectNotes]);\n\n  return (\n    <div style={{overflowX: 'scroll'}}>\n      <div\n        onMouseDown={onMouseDown}\n        onMouseMove={onMouseMove}\n        onMouseUp={onMouseUp}\n        onMouseLeave={onMouseUp}\n        style={{\n          height:\n            (midiRange + 1) * PIANOROLL_NOTE_HEIGHT + 1 + SCROLLBAR_HEIGHT,\n          width: tracksWidth * zoom,\n          position: 'relative',\n          borderBottom: 'solid #555 1px',\n        }}\n      >\n        {' '}\n        {[...Array(midiRange + 1).keys()].map((offset) => {\n          const midi = midiRange - offset + extents.minNote;\n          const noteName = simplifyEnharmonics(Midi.midiToNoteName(midi));\n          const note = simplifyEnharmonics(Tonal.note(noteName).pc);\n\n          return (\n            <div\n              key={'track' + trackIdx + 'row' + offset}\n              style={{\n                height: PIANOROLL_NOTE_HEIGHT,\n                background: scaleNotes.has(note)\n                  ? 'rgba(199,200,0,1)'\n                  : (Tonal.note(noteName).acc === ''\n                                    ? '#555'\n                                    : '#333'),\n                borderTop: 'solid #222 1px',\n                overflow: 'hidden',\n              }}\n            >\n              <div\n                style={{\n                  marginTop: -1,\n                  fontSize: 9,\n                  fontFamily: 'Lucida Grande',\n                  position: 'fixed',\n                  left: 0,\n                }}\n              >\n                {noteName}\n              </div>\n            </div>\n          );\n        })}\n        {track.notes.map((ev, evIdx) => (\n          <div\n            key={'track' + trackIdx + 'note' + evIdx}\n            style={{\n              ...getNoteLayout(ev),\n              background: selectedNotes.has(ev) ? 'red' : 'rgba(80,100,255,1)',\n              border: 'solid 1px darkblue ',\n              position: 'absolute',\n            }}\n          ></div>\n        ))}\n        <div\n          ref={selectionElRef}\n          style={{\n            background: `rgba(200,200,200,0.3)`,\n            border: 'solid 1px white',\n            position: 'absolute',\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default function Piano(props: {\n  midi: Object,\n  selectedNotes: Set<Object>,\n  setSelectedNotes: (Set<Object>) => void,\n  zoom: number,\n  scaleNotes: Set<string>,\n}) {\n  const {midi, selectedNotes, setSelectedNotes, zoom, scaleNotes} = props;\n  const trackExtents = React.useMemo(() => {\n    return midi.tracks.map((t) => {\n      return t.notes.length === 0\n        ? {minNote: 0, maxNote: 12, maxTicks: 0}\n        : t.notes.reduce(\n            (acc, ev) => {\n              const minNote = Math.min(acc.minNote, ev.midi);\n              return {\n                minNote,\n                maxNote: Math.max(acc.maxNote, ev.midi, minNote + 12),\n                maxTicks: Math.max(acc.maxTicks, ev.ticks + ev.durationTicks),\n              };\n            },\n            {minNote: 127, maxNote: 0, maxTicks: 0}\n          );\n    });\n  }, [midi.tracks]);\n\n  const tracksWidth = React.useMemo(() => {\n    const maxTicks = trackExtents.reduce(\n      (acc, ex) => Math.max(ex.maxTicks, acc),\n      0\n    );\n    return (maxTicks / midi.header.ppq) * PIANOROLL_QUARTER_WIDTH;\n  }, [trackExtents, midi.header.ppq]);\n\n  return (\n    <div style={{textAlign: 'left'}}>\n      {midi.tracks.map((track, trackIdx) => {\n        const extents = trackExtents[trackIdx];\n        const midiRange = extents.maxNote - extents.minNote;\n        return (\n          <Details\n            key={trackIdx}\n            startOpen={false}\n            summary={\n              <>\n                Track {trackIdx + 1}:{' '}\n                {track.instrument && track.instrument.name}\n              </>\n            }\n          >\n            <PianoRollTrack\n              {...{\n                midi,\n                extents,\n                track,\n                trackIdx,\n                tracksWidth,\n                midiRange,\n                selectedNotes,\n                setSelectedNotes,\n                zoom,\n                scaleNotes,\n              }}\n            />\n          </Details>\n        );\n      })}\n    </div>\n  );\n}\n","// @flow\nimport React from 'react';\nimport * as ToneJSMidi from '@tonejs/midi';\nimport * as Tonal from '@tonaljs/tonal';\nimport * as Scale from '@tonaljs/scale';\nimport * as Note from '@tonaljs/note';\nimport * as Midi from '@tonaljs/midi';\nimport * as Chord from '@tonaljs/chord';\nimport * as ScaleDictionary from '@tonaljs/scale-dictionary';\nimport useLocalStorage from './useLocalStorage';\nimport useQueryParam, {QUERY_PARAM_FORMATS} from './useQueryParam';\nimport useValueObserver from './useValueObserver';\nimport Keyboard from './Keyboard';\nimport PianoRoll from './PianoRoll';\nimport Details from './Details';\nimport simplifyEnharmonics from './simplifyEnharmonics';\nimport Checkbox from './Checkbox';\n\nconst keys = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'Bb', 'B'];\n\nconst allScales = [\n  'major',\n  'minor',\n  'dorian',\n  'lydian',\n  'phrygian',\n  'ionian',\n  'mixolydian',\n  'locrian',\n];\n\nconst octave = 4;\nconst NOTE_ON = 0x90;\nconst NOTE_OFF = 0x80;\nconst velocityMidi = 80;\n\nfunction SelectionInfo({scaleData, selectedNotes, notePlayer}) {\n  const selectedNotesSet = [\n    ...new Set([...selectedNotes].map((note) => Tonal.note(note.name).pc)),\n  ].map(simplifyEnharmonics);\n\n  const matchingScales = scaleData.keyScales.filter((scale) => {\n    const scaleNotes = scale.notes.map(simplifyEnharmonics);\n    for (const noteName of selectedNotesSet) {\n      if (!scaleNotes.includes(noteName)) {\n        return false;\n      }\n    }\n    return true;\n  });\n\n  return (\n    <div>\n      <div>Notes: {selectedNotesSet.join(', ')}</div>\n      <div>\n        Chord:\n        {Chord.detect(selectedNotesSet).join(', ')}\n      </div>\n      <Details summary=\"Matching Scales:\">\n        {matchingScales.map((scale) => {\n          const scaleNotes = reifyScaleNotesWithOctave(scale, octave);\n          return (\n            <div key={scale.name}>\n              {scale.name}\n              <br />\n\n              <Keyboard\n                highlightKeys={scaleNotes}\n                startOctave={octave}\n                octaves={3}\n                highlightType={'scale'}\n                notePlayer={notePlayer}\n              />\n            </div>\n          );\n        })}\n      </Details>\n    </div>\n  );\n}\n\nfunction reifyScaleNotesWithOctave(scale, octave) {\n  return scale.intervals.map((interval) =>\n    simplifyEnharmonics(Tonal.transpose(`${scale.tonic}${octave}`, interval))\n  );\n}\n\nfunction makeScaleData(key, scaleType, octave) {\n  const scale = Scale.scale(`${key} ${scaleType}`);\n\n  const scaleNotes = reifyScaleNotesWithOctave(scale, octave);\n\n  const keyScales = ScaleDictionary.entries()\n    .map((scaleDef) => Scale.scale(`${key} ${scaleDef.name}`))\n    .map((scale) => ({\n      ...scale,\n      notesAbstractMidi: new Set(\n        scale.notes.map((noteName) => Tonal.note(`${noteName}0`).midi).sort()\n      ),\n    }));\n\n  return {scale, scaleNotes, key, keyScales};\n}\n\nfunction usePersistedMidiFile() {\n  const [midiJSONObj, setMidiJSONObj] = useLocalStorage(\n    'MidiExploderPersistence',\n    null\n  );\n\n  const midiFile = React.useMemo(() => {\n    if (midiJSONObj != null) {\n      try {\n        const midiFile = new ToneJSMidi.Midi();\n        midiFile.fromJSON(midiJSONObj);\n        return midiFile;\n      } catch (err) {\n        console.error('failed to load midi file', err);\n        return null;\n      }\n    }\n  }, [midiJSONObj]);\n\n  return [\n    midiFile,\n    (midiFile) => {\n      setMidiJSONObj(midiFile.toJSON());\n    },\n  ];\n}\n\nexport default function MidiExploder(props: {\n  audioApi: {\n    dx7: Object,\n  },\n}) {\n  const {audioApi} = props;\n  const [midiFile, setMidiFile] = usePersistedMidiFile();\n  const [key, setKey] = useQueryParam('key', 'C', QUERY_PARAM_FORMATS.string);\n  const [scaleType, setScaleType] = useQueryParam(\n    'scaleType',\n    'major',\n    QUERY_PARAM_FORMATS.string\n  );\n  const [zoom, setZoom] = useLocalStorage('MidiExploderZoom', 1);\n  const [highlightScale, setHighlightScale] = useLocalStorage(\n    'MidiExploderHighlightScale',\n    false\n  );\n\n  const handleFiles = React.useCallback(\n    (e) => {\n      if (!e.currentTarget.files) return;\n\n      const [file] = e.currentTarget.files;\n\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          setMidiFile(new ToneJSMidi.Midi(reader.result));\n          setZoom(1);\n        };\n        reader.readAsArrayBuffer(file);\n      }\n    },\n    [setMidiFile, setZoom]\n  );\n\n  const scaleData = React.useMemo(() => makeScaleData(key, scaleType, octave), [\n    key,\n    scaleType,\n  ]);\n  const [highlightedKeys, setHighlightedKeys] = React.useState(null);\n\n  const setHighlightedScale = React.useCallback(() => {\n    setHighlightedKeys({keys: scaleData.scaleNotes, type: 'scale'});\n  }, [scaleData]);\n\n  useValueObserver(scaleData, setHighlightedScale);\n\n  const onMidi = React.useMemo(() => {\n    if (audioApi.dx7) {\n      return (message) => audioApi.dx7.onMidi(message);\n    }\n    return (message) => {};\n  }, [audioApi]);\n\n  const notePlayer = React.useMemo(() => {\n    return {\n      triggerAttack(noteName) {\n        onMidi([NOTE_ON, Tonal.note(noteName).midi, velocityMidi]);\n      },\n      triggerRelease(noteName) {\n        onMidi([NOTE_OFF, Tonal.note(noteName).midi, velocityMidi]);\n      },\n    };\n  }, [onMidi]);\n\n  const [selectedNotes, setSelectedNotes] = React.useState(new Set());\n\n  React.useEffect(() => {\n    const newNodesMidi = new Set([...selectedNotes].map((note) => note.midi));\n    newNodesMidi.forEach((noteMidi) => {\n      notePlayer.triggerAttack(Note.fromMidi(noteMidi));\n    });\n\n    function end() {\n      newNodesMidi.forEach((noteMidi) => {\n        notePlayer.triggerRelease(Note.fromMidi(noteMidi));\n      });\n    }\n\n    const timer = setTimeout(() => {\n      end();\n    }, 500);\n\n    return () => {\n      clearTimeout(timer);\n      end();\n    };\n  }, [notePlayer, selectedNotes]);\n\n  return (\n    <div className=\"App\">\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          gap: 8,\n          flexWrap: 'wrap',\n          padding: 8,\n          background: '#777',\n          margin: 8,\n        }}\n      >\n        <label>\n          midi file: <input type=\"file\" onChange={handleFiles} />\n        </label>\n        <Checkbox\n          label=\"highlight scale\"\n          checked={highlightScale}\n          onChange={() => setHighlightScale((s) => !s)}\n        />\n\n        <label>\n          key:{' '}\n          <select\n            value={scaleData.key}\n            onChange={(event) => setKey(event.currentTarget.value)}\n          >\n            {keys.map((key) => (\n              <option key={key} value={key}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </label>\n        <label>\n          scale type:{' '}\n          <select\n            value={scaleType}\n            onChange={(event) => setScaleType(event.currentTarget.value)}\n          >\n            {allScales.map((key) => (\n              <option key={key} value={key}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </label>\n        <div onMouseOver={setHighlightedScale}>\n          <label>scale notes: </label>\n          {scaleData.scaleNotes.map((note) => Note.simplify(note)).join()}{' '}\n        </div>\n\n        <Keyboard\n          highlightKeys={highlightedKeys ? highlightedKeys.keys : null}\n          startOctave={octave}\n          octaves={3}\n          highlightType={highlightedKeys ? highlightedKeys.type : 'scale'}\n          notePlayer={notePlayer}\n        />\n\n        <div>\n          zoom:\n          <button\n            onClick={() => {\n              setZoom((s) => s * 1.05);\n            }}\n          >\n            +\n          </button>\n          <button\n            onClick={() => {\n              setZoom((s) => s * (1 / 1.05));\n            }}\n          >\n            -\n          </button>\n        </div>\n      </div>\n\n      <details open={false} style={{textAlign: 'left'}}>\n        <summary>JSON</summary>\n        <pre>{midiFile && JSON.stringify(midiFile.toJSON(), null, 2)}</pre>\n      </details>\n      {midiFile != null && (\n        <div style={{display: 'flex'}}>\n          <div style={{overflowY: 'auto', width: '66%'}}>\n            <PianoRoll\n              midi={midiFile}\n              {...{\n                selectedNotes,\n                setSelectedNotes,\n                zoom,\n                scaleNotes: highlightScale\n                  ? new Set(scaleData.scale.notes.map(simplifyEnharmonics))\n                  : new Set(),\n              }}\n            />\n          </div>\n\n          <div style={{width: '33%', overflowY: 'auto'}}>\n            <SelectionInfo {...{scaleData, selectedNotes, notePlayer}} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"sourceRoot":""}