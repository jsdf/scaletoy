{"version":3,"sources":["logo.svg","Recorder.js","useLocalStorage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","makeNewRecorder","actx","inputNode","chunks","dest","createMediaStreamDestination","mediaRecorder","MediaRecorder","stream","connect","ondataavailable","evt","push","data","onstop","blob","Blob","type","document","createElement","fileName","a","body","appendChild","style","url","URL","createObjectURL","href","download","click","revokeObjectURL","remove","saveData","React","memo","props","recorderRef","useRef","_React$useState","useState","_React$useState2","Object","slicedToArray","recording","setRecording","toggleRecording","useCallback","s","useEffect","current","start","state","stop","react_default","onClick","useLocalStorage","baseKey","initialValue","key","concat","_useState","item","window","localStorage","getItem","JSON","parse","error","console","log","_useState2","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","SIZE_ASC","strummingTimes","strummingTimesIndex","forEach","v","i","keys","scaleTypesPosNames","major","minor","scaleTypesChordPatterns","getScaleChords","scaleType","Scale","notes","map","pc","pos","chords","chordType","Chord","sort","b","intervals","length","chord","tonic","aliases","beatDurationSeconds","NOTE_ON","NOTE_OFF","velocityMidi","TEST_PLAY_SCALE","testPlayScale","audioApi","scaleNotes","octave","note","Tonal","shift","oct","makeOctaveScaleNoteSequence","currentNoteIndex","prevNoteIndex","setInterval","dx7","onMidi","midi","playNote","events","noteName","end","noteMidi","updatedEvents","ev","message","time","newEvents","addEvents","getReifiedNotesForChordForScale","chordName","scalePitchClassesNotesMap","chordData","tonicReified","interval","makeScaleData","scale","scalePitchClasses","reifyScaleNotesWithOctave","scalePosChords","Map","chordNames","chordNotesForOctave","size","quality","sizes","Set","chordDatas","add","Array","from","chordTypeColors","diminished","buttonStyle","display","width","cursor","color","padding","paddingBottom","height","overflow","ChordButton","_ref","playChord","setLastChord","strumming","selected","objectSpread","background","border","borderColor","join","App","setAudioApi","resumeAudio","resume","suspendAudio","suspend","_useLocalStorage","_useLocalStorage2","setKey","_useLocalStorage3","_useLocalStorage4","setStrumming","_useLocalStorage5","_useLocalStorage6","includeExtra","setIncludeExtra","_React$useState3","_React$useState4","lastChord","_useLocalStorage7","_useLocalStorage8","setOctave","_useLocalStorage9","_useLocalStorage10","setScaleType","scaleData","useMemo","toggleExtra","_React$useState5","_React$useState6","setEvents","playScale","slice","currentTime","lastStartTimeOffset","chordNotes","onDX7Init","newAudioApi","nextEvent","onTick","initDX7","process","className","src_Recorder","onChange","event","currentTarget","parseInt","min","max","e","hidden","readOnly","checked","filter","sizeIndex","_ref2","_ref3","flex","assign","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.294c6441.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nfunction saveData(blob, fileName) {\n  var a = document.createElement('a');\n  document.body.appendChild(a);\n  a.style = 'display: none';\n\n  const url = URL.createObjectURL(blob);\n  a.href = url;\n  a.download = fileName;\n  a.click();\n  URL.revokeObjectURL(url);\n  a.remove();\n}\n\nfunction makeNewRecorder(actx, inputNode) {\n  const chunks = [];\n  const dest = actx.createMediaStreamDestination();\n  const mediaRecorder = new MediaRecorder(dest.stream);\n  inputNode.connect(dest);\n\n  mediaRecorder.ondataavailable = function(evt) {\n    // push each chunk (blobs) in an array\n    chunks.push(evt.data);\n  };\n\n  mediaRecorder.onstop = function(evt) {\n    // Make blob out of our blobs, and open it.\n    var blob = new Blob(chunks, {type: 'audio/ogg; codecs=opus'});\n    const audioEl = document.createElement('audio');\n\n    const fileName = 'audio.ogg';\n\n    saveData(blob, fileName);\n  };\n\n  return mediaRecorder;\n}\n\nexport default React.memo(function Recorder(props) {\n  const recorderRef = React.useRef(\n    makeNewRecorder(props.actx, props.inputNode)\n  );\n\n  const [recording, setRecording] = React.useState(false);\n\n  const toggleRecording = React.useCallback(() => setRecording(s => !s), [\n    setRecording,\n  ]);\n\n  React.useEffect(() => {\n    if (recording) {\n      recorderRef.current.start();\n    } else {\n      if (recorderRef.current.state !== 'inactive') {\n        recorderRef.current.stop();\n        recorderRef.current = makeNewRecorder(props.actx, props.inputNode);\n      }\n    }\n  }, [recording]);\n\n  return (\n    <button onClick={toggleRecording}>\n      {recording ? 'stop recording' : 'record'}\n    </button>\n  );\n});\n","import {useState} from 'react';\n\nexport default function useLocalStorage(baseKey, initialValue) {\n  const key = `scaletoy-${baseKey}`;\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport * as Tonal from '@tonaljs/tonal';\nimport * as Scale from '@tonaljs/scale';\nimport * as Chord from '@tonaljs/chord';\nimport Recorder from './Recorder';\nimport useLocalStorage from './useLocalStorage';\n\n/* global initDX7 */\n\nconst SHOW_NOTE_NAMES = true;\nconst SHOW_NOTE_OCTS = true;\nconst SHOW_FULL_CHORD_NAMES = false;\nconst SIZE_ASC = true;\n\nconst strummingTimes = [0, 10, 30, 50, 75, 100, 150, 200];\nconst strummingTimesIndex = {};\nstrummingTimes.forEach((v, i) => {\n  strummingTimesIndex[v] = i;\n});\n\nfunction transposeByOctaves(note, shift) {\n  return `${note.pc}${note.oct + shift}`;\n}\n\nfunction getChordsBySize(chords, key) {\n  return chords\n    .map(chordType => Chord.chord(`${key}${chordType}`))\n    .sort((a, b) => a.intervals.length - b.intervals.length)\n    .map(chord => `${chord.tonic}${chord.aliases[0]}`);\n}\n\nconst keys = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'Bb', 'B'];\n\nconst scaleTypesPosNames = {\n  major: ['I', 'ii', 'iii', 'VI', 'V', 'vi', 'vii*'],\n  minor: ['i', 'ii*', 'III', 'iv', 'v', 'VI', 'VII'],\n};\n\nconst scaleTypesChordPatterns = {\n  major: ['major', 'minor', 'minor', 'major', 'major', 'minor', 'diminished'],\n  minor: ['minor', 'diminished', 'major', 'minor', 'minor', 'major', 'major'],\n};\n\nfunction getScaleChords(key, scaleType) {\n  return Scale.scale(key + ' ' + scaleType).notes.map((pc, pos) =>\n    getChordsBySize(\n      Scale.scaleChords(scaleTypesChordPatterns[scaleType][pos]),\n      pc\n    )\n  );\n}\n\nconst bpm = 140;\nconst beatDurationSeconds = (1 / bpm) * 60;\n\nconst NOTE_ON = 0x90;\nconst NOTE_OFF = 0x80;\nconst velocityMidi = 80;\n\nconst TEST_PLAY_SCALE = false;\n\nfunction testPlayScale(audioApi) {\n  const scaleNotes = makeOctaveScaleNoteSequence('c', 4, 'major');\n\n  let currentNoteIndex = 0;\n  let prevNoteIndex = null;\n\n  setInterval(() => {\n    if (prevNoteIndex != null) {\n      audioApi.dx7.onMidi([\n        NOTE_OFF,\n        Tonal.note(scaleNotes[prevNoteIndex]).midi,\n        velocityMidi,\n      ]);\n    }\n\n    audioApi.dx7.onMidi([\n      NOTE_ON,\n      Tonal.note(scaleNotes[currentNoteIndex]).midi,\n      velocityMidi,\n    ]);\n    prevNoteIndex = currentNoteIndex;\n\n    currentNoteIndex = (currentNoteIndex + 1) % scaleNotes.length;\n    // currentNoteIndex = Math.floor(Math.random() * scaleNotes.length);\n  }, beatDurationSeconds * 1000);\n}\n\nfunction onTick(events, audioApi) {\n  let i = 0;\n  for (; i < events.length; i++) {\n    const nextEvent = events[i];\n    if (nextEvent.time > audioApi.actx.currentTime) {\n      break;\n    }\n\n    audioApi.dx7.onMidi(nextEvent.message);\n  }\n\n  return i === 0 ? events : events.slice(i);\n}\n\nfunction playNote(events, noteName, start, end) {\n  const noteMidi = Tonal.note(noteName).midi;\n\n  let updatedEvents = events;\n  // end any upcoming events for this key\n  events.forEach(ev => {\n    if (ev.message[1] == noteMidi) {\n      ev.time = start - 0.01;\n      ev.message[0] = NOTE_OFF;\n    }\n  });\n  return addEvents(updatedEvents, [\n    {\n      message: [NOTE_ON, noteMidi, velocityMidi],\n      time: start,\n    },\n    {\n      message: [NOTE_OFF, noteMidi, velocityMidi],\n      time: end,\n    },\n  ]);\n}\n\nfunction addEvents(events, newEvents) {\n  const updatedEvents = events.concat(newEvents);\n  updatedEvents.sort((a, b) => a.time - b.time);\n  return updatedEvents;\n}\n\nfunction makeOctaveScaleNoteSequence(key, octave, scaleType) {\n  const scaleNotes = Scale.scale(`${key}${octave} ${scaleType}`).notes;\n\n  scaleNotes.push(transposeByOctaves(Tonal.note(scaleNotes[0]), 1));\n\n  return scaleNotes;\n}\n\n// get the notes for a chord, for an octave\nfunction getReifiedNotesForChord(chordName, octave) {\n  const chordData = Chord.chord(chordName);\n  const tonicReified = chordData.tonic + octave;\n  const notes = chordData.intervals.map(interval =>\n    Tonal.transpose(tonicReified, interval)\n  );\n  return notes;\n}\n\n// we need to make sure that the tonic is from the correct octave when the\n// scale spans multiple octaves\nfunction getReifiedNotesForChordForScale(chordName, scalePitchClassesNotesMap) {\n  const chordData = Chord.chord(chordName);\n  const tonicReified = scalePitchClassesNotesMap[chordData.tonic];\n  const notes = chordData.intervals.map(interval =>\n    Tonal.transpose(tonicReified, interval)\n  );\n  return notes;\n}\n\nfunction reifyScaleNotesWithOctave(scale, octave) {\n  return scale.intervals.map(interval =>\n    Tonal.transpose(`${scale.tonic}${octave}`, interval)\n  );\n}\n\nfunction makeScaleData(key, scaleType, octave) {\n  const scale = Scale.scale(`${key} ${scaleType}`);\n  const scalePitchClasses = scale.notes;\n\n  const scaleNotes = reifyScaleNotesWithOctave(scale, octave);\n  const scalePitchClassesNotesMap = {};\n  scaleNotes.forEach(noteName => {\n    scalePitchClassesNotesMap[Tonal.note(noteName).pc] = noteName;\n  });\n\n  const scalePosChords = new Map(\n    getScaleChords(key, scaleType).map((chordNames, pos) => {\n      return [\n        pos,\n\n        chordNames.map(chordName => {\n          const chord = Chord.chord(chordName);\n          return {\n            pos,\n            chord,\n            chordType: scaleTypesChordPatterns[scaleType][pos],\n            chordNotesForOctave: getReifiedNotesForChordForScale(\n              chordName,\n              scalePitchClassesNotesMap\n            ),\n            chordName,\n            size:\n              chord.intervals.length * (chord.quality === 'Unknown' ? -1 : 1),\n          };\n        }),\n      ];\n    })\n  );\n\n  const sizes = new Set();\n\n  scalePosChords.forEach((chordDatas, pos) => {\n    chordDatas.forEach(chordData => {\n      sizes.add(chordData.size);\n    });\n  });\n\n  return {\n    scaleType,\n    key,\n    scalePitchClasses,\n    scalePosChords,\n    scaleNotes,\n    sizes: Array.from(sizes).sort((a, b) => a - b),\n  };\n}\n\nconst chordTypeColors = {\n  major: 'rgb(127,199,175)',\n  minor: 'rgb(255,158,157)',\n  diminished: 'rgb(218,216,167)',\n};\n\nconst buttonStyle = {\n  display: 'block',\n  width: '100%',\n  cursor: 'pointer',\n  color: 'black',\n  padding: 4,\n  paddingBottom: 8,\n  height: 46,\n  overflow: 'hidden',\n};\n\nconst ChordButton = React.memo(\n  ({chordData, playChord, setLastChord, octave, strumming, selected}) => {\n    return (\n      <div\n        style={{\n          ...buttonStyle,\n          background: chordTypeColors[chordData.chordType],\n          border: '1px solid',\n          borderColor: selected ? 'rgba(0,0,0,0.2)' : 'transparent',\n        }}\n        onClick={() => {\n          playChord(chordData, octave, strumming);\n          setLastChord(chordData.chordName);\n          console.log(chordData);\n        }}\n      >\n        <div>\n          {chordData.chordName}\n          {SHOW_FULL_CHORD_NAMES && (\n            <div>\n              <small>\n                {chordData.chord.name.length > 3 ? (\n                  chordData.chord.name\n                ) : (\n                  // bad data, don't show\n                  <span>&nbsp;</span>\n                )}\n              </small>\n            </div>\n          )}\n          {true && (\n            <div>\n              {SHOW_NOTE_NAMES && SHOW_NOTE_OCTS && (\n                <small>{chordData.chordNotesForOctave.join()}</small>\n              )}\n\n              {SHOW_NOTE_NAMES && !SHOW_NOTE_OCTS && (\n                <small>{chordData.chord.notes.join()}</small>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\nfunction App() {\n  const [audioApi, setAudioApi] = React.useState(null);\n  const resumeAudio = React.useCallback(\n    () => audioApi && audioApi.actx.resume(),\n    [audioApi]\n  );\n  const suspendAudio = React.useCallback(\n    () => audioApi && audioApi.actx.suspend(),\n    [audioApi]\n  );\n\n  const [key, setKey] = useLocalStorage('key', 'C');\n  const [strumming, setStrumming] = useLocalStorage(\n    'strumming',\n    strummingTimes[2]\n  );\n\n  const [includeExtra, setIncludeExtra] = useLocalStorage(\n    'includeExtra',\n    false\n  );\n  const [lastChord, setLastChord] = React.useState(null);\n  const [octave, setOctave] = useLocalStorage('octave', 4);\n  const [scaleType, setScaleType] = useLocalStorage('scaleType', 'major');\n\n  const scaleData = React.useMemo(() => makeScaleData(key, scaleType, octave), [\n    key,\n    scaleType,\n    octave,\n  ]);\n\n  const toggleExtra = React.useCallback(() => setIncludeExtra(s => !s));\n\n  const [events, setEvents] = React.useState([]);\n\n  const playScale = React.useCallback(() => {\n    setEvents(events => {\n      if (audioApi == null) {\n        return events;\n      }\n      let updatedEvents = events;\n      const scaleNotes = scaleData.scaleNotes.slice();\n      scaleNotes.push(Tonal.transpose(scaleNotes[0], '8P'));\n      const currentTime = audioApi.actx.currentTime;\n      debugger;\n      let lastStartTimeOffset = 0;\n      scaleNotes.forEach(noteName => {\n        lastStartTimeOffset += beatDurationSeconds;\n\n        updatedEvents = playNote(\n          updatedEvents,\n          noteName,\n          currentTime + lastStartTimeOffset,\n          currentTime + lastStartTimeOffset + beatDurationSeconds\n        );\n      });\n\n      return updatedEvents;\n    });\n  }, [setEvents, audioApi, scaleData]);\n\n  const playChord = React.useCallback(\n    (chordData, octave, strumming) => {\n      const chordNotes = chordData.chordNotesForOctave;\n\n      setEvents(events => {\n        if (audioApi == null) {\n          return events;\n        }\n        let updatedEvents = events;\n\n        const currentTime = audioApi.actx.currentTime;\n\n        chordNotes.forEach((noteName, i) => {\n          const strumDelay = i * (strumming / 1000);\n          updatedEvents = playNote(\n            updatedEvents,\n            noteName,\n            currentTime + strumDelay,\n            currentTime + beatDurationSeconds + i * (strumming / 1000)\n          );\n        });\n\n        return updatedEvents;\n      });\n    },\n    [setEvents, audioApi]\n  );\n\n  // startup\n  React.useEffect(() => {\n    window.onDX7Init = (dx7, actx) => {\n      const newAudioApi = {\n        dx7,\n        actx,\n      };\n\n      // start event-consuming interval\n      setInterval(() => {\n        setEvents(events => onTick(events, newAudioApi));\n      }, 1);\n\n      if (TEST_PLAY_SCALE) {\n        testPlayScale(newAudioApi);\n      }\n\n      setAudioApi(newAudioApi);\n    };\n    initDX7(process.env.PUBLIC_URL);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <button onClick={resumeAudio}>start audio</button>\n      <button onClick={suspendAudio}>pause audio</button>\n      {audioApi && <Recorder actx={audioApi.actx} inputNode={audioApi.dx7} />}\n      <div>\n        <label>\n          key:{' '}\n          <select\n            value={scaleData.key}\n            onChange={event => setKey(event.currentTarget.value)}\n          >\n            {keys.map(key => (\n              <option key={key} value={key}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </label>{' '}\n        <label>\n          octave:{' '}\n          <select\n            value={octave}\n            onChange={event => setOctave(parseInt(event.currentTarget.value))}\n          >\n            {[1, 2, 3, 4, 5, 6, 7].map(key => (\n              <option key={key} value={key}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </label>{' '}\n        <label>\n          scale type:{' '}\n          <select\n            value={scaleType}\n            onChange={event => setScaleType(event.currentTarget.value)}\n          >\n            {['major', 'minor'].map(key => (\n              <option key={key} value={key}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </label>{' '}\n        <label>scale notes: </label>\n        {scaleData.scaleNotes.join()}{' '}\n        <button onClick={playScale}>play scale</button>{' '}\n        <label>\n          strumming:\n          <input\n            type=\"range\"\n            min={0}\n            max={9}\n            value={strummingTimesIndex[strumming]}\n            onChange={e => {\n              setStrumming(strummingTimes[parseInt(e.currentTarget.value)]);\n            }}\n          />{' '}\n          <input hidden type=\"number\" value={strumming} readOnly />\n        </label>\n        <label>\n          <input\n            type=\"checkbox\"\n            onChange={toggleExtra}\n            checked={includeExtra}\n          />\n          include extra chords\n        </label>\n      </div>\n\n      {scaleData.sizes\n        .filter(size => (includeExtra ? true : size > 0))\n        .sort((a, b) => (SIZE_ASC ? a - b : b - a))\n        .map((size, sizeIndex) => (\n          <div key={sizeIndex}>\n            {false && <div style={{flex: 1}}>{size}</div>}\n            <br />\n            <div key={size} style={{display: 'flex'}}>\n              {Array.from(scaleData.scalePosChords).map(([pos, chordDatas]) => {\n                return (\n                  <div key={pos} style={{flex: 1}}>\n                    {sizeIndex === 0 && (\n                      <div>{scaleTypesPosNames[scaleType][pos]}</div>\n                    )}\n\n                    {chordDatas\n                      .filter(chordData => chordData.size === size)\n                      // silly heuristic for simpler chords\n                      .sort((a, b) => a.chordName.length - b.chordName.length)\n                      .map((chordData, i) => (\n                        <ChordButton\n                          key={i}\n                          {...{\n                            chordData,\n                            playChord,\n                            setLastChord,\n                            octave,\n                            strumming,\n                            selected: chordData.chordName === lastChord,\n                          }}\n                        />\n                      ))}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        ))}\n\n      <pre style={{height: 300, overflow: 'scroll'}}>\n        {events.map(ev => JSON.stringify(ev)).join('\\n')}\n      </pre>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}