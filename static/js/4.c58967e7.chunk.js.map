{"version":3,"sources":["../node_modules/tone/Tone/core/Tone.js","../node_modules/tone/Tone/type/Frequency.js","../node_modules/tone/Tone/type/TimeBase.js","../node_modules/tone/Tone/version.js","../node_modules/tone/Tone/type/Time.js","../node_modules/tone/Tone/type/TransportTime.js","../node_modules/tone/Tone/core/Emitter.js","../node_modules/tone/Tone/core/Timeline.js","../node_modules/tone/Tone/shim/OfflineAudioContext.js","../node_modules/tone/Tone/shim/AudioContext.js","../node_modules/tone/Tone/core/Context.js","../node_modules/tone/Tone/type/Type.js","../node_modules/tone/Tone/shim/AudioNode.js","../node_modules/tone/Tone/core/AudioNode.js","../node_modules/tone/Tone/core/Param.js","../node_modules/tone/Tone/signal/SignalBase.js","../node_modules/tone/Tone/core/Gain.js","../node_modules/tone/Tone/shim/ConstantSourceNode.js","../node_modules/tone/Tone/signal/Signal.js","../node_modules/tone/Tone/component/Volume.js","../node_modules/tone/Tone/core/Master.js","../node_modules/tone/Tone/instrument/Instrument.js","../node_modules/tone/Tone/shim/AudioBuffer.js","../node_modules/tone/Tone/core/Buffer.js","../node_modules/tone/Tone/core/Buffers.js","../node_modules/tone/Tone/signal/TickSignal.js","../node_modules/tone/Tone/core/TimelineState.js","../node_modules/tone/Tone/source/TickSource.js","../node_modules/tone/Tone/core/Clock.js","../node_modules/tone/Tone/core/IntervalTimeline.js","../node_modules/tone/Tone/type/Ticks.js","../node_modules/tone/Tone/core/TransportEvent.js","../node_modules/tone/Tone/core/TransportRepeatEvent.js","../node_modules/tone/Tone/core/Transport.js","../node_modules/tone/Tone/source/Source.js","../node_modules/tone/Tone/source/BufferSource.js","../node_modules/tone/Tone/instrument/Sampler.js"],"names":["global","_version__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","Tone","this","Error","prototype","toString","className","isLetter","match","sameConstructor","constructor","isFunction","dispose","set","params","value","isString","tmpObj","paramLoop","attr","parent","indexOf","attrSplit","split","i","length","splice","innerParam","join","param","isUndef","Signal","Param","AudioParam","TimeBase","get","_collectDefaults","ret","subRet","j","subAttr","isObject","isDefined","constr","defaults","Object","keys","_super","superDefs","push","values","options","defaultArg","given","fallback","givenProp","fallbackProp","log","debug","TONE_DEBUG_CLASS","args","Array","from","arguments","unshift","console","apply","undefined","assert","statement","error","connectSeries","currentUnit","toUnit","connect","srcNode","dstNode","outputNumber","inputNumber","input","isArray","AudioNode","disconnect","bDone","forEach","e","val","isNumber","arg","call","isBoolean","isNote","test","noOp","_readOnly","property","defineProperty","writable","enumerable","_writable","State","Started","Stopped","Paused","window","equalPowerScale","percent","piFactor","Math","PI","sin","dbToGain","db","pow","gainToDb","gain","LN10","intervalToFrequencyRatio","interval","now","context","immediate","currentTime","extend","child","TempConstructor","_audioContext","start","resume","isContext","Context","emit","setContext","ctx","sampleRate","hasAudioContext","hasOwnProperty","hasPromises","Boolean","getContext","resolve","initialized","on","resCallback","off","version","__webpack_exports__","_core_Tone__WEBPACK_IMPORTED_MODULE_0__","Frequency","units","_expressions","assign","midi","regexp","method","_defaultUnits","mtof","note","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","parseInt","tr","m","q","s","total","_beatsToUnits","_getTimeSignature","parseFloat","transpose","valueOf","harmonize","intervals","map","bind","toMidi","ftom","toNote","freq","toFrequency","log2","A4","round","floor","scaleIndexToNote","toSeconds","toTicks","quarterTime","quarters","Transport","PPQ","_noArg","_frequencyToUnits","_ticksToUnits","ticks","bpm","beats","_secondsToUnits","seconds","cbb","cb","c","c#","cx","dbb","d","d#","dx","ebb","eb","e#","ex","fbb","fb","f","f#","fx","gbb","gb","g","g#","gx","abb","ab","a","a#","ax","bbb","bb","b","b#","bx","frequency","_val","_units","charAt","n","dot","scalar","t","hz","samples","default","_getBpm","timeSignature","_getPPQ","_now","trim","typeName","quantity","expr","matching","slice","toSamples","toMilliseconds","Time","quantize","capture","quantTo","nextSubdivision","subdiv","subdivision","toNotation","time","testNotations","power","closest","closestSeconds","notation","notationSeconds","abs","toBarsBeatsSixteenths","toFixed","measures","sixteenths","TransportTime","Emitter","_events","event","callback","events","eventName","once","boundCallback","ev","eventList","len","mixin","object","functions","func","emitterFunc","Timeline","_timeline","memory","Infinity","add","index","_search","diff","remove","comparator","peek","shift","getAfter","getBefore","cancel","after","cancelBefore","previousEvent","beginning","end","midPoint","nextEvent","_iterate","lowerBound","upperBound","forEachBefore","forEachAfter","forEachBetween","startTime","endTime","forEachFrom","forEachAtTime","supported","OfflineAudioContext","webkitOfflineAudioContext","OfflineAudioContext_ret","startRendering","then","_native_startRendering","Promise","done","oncomplete","renderedBuffer","AudioContext","webkitAudioContext","close","suspend","buffer","createBuffer","source","createBufferSource","destination","createGain","createGainNode","createDelay","createDelayNode","decodeAudioDataPromise","offlineContext","audioData","Uint32Array","AudioContext_ret","decodeAudioData","_native_decodeAudioData","success","AudioContextProperties","AudioContextMethods","_context","rawContext","prop","_defineProperty","_defineMethod","_latencyHint","latencyHint","_constants","lookAhead","_computedUpdateInterval","_ticker","Context_Ticker","clockSource","updateInterval","_timeouts","_timeoutIds","_timeoutLoop","onstatechange","master","state","closePromise","TONE_AUDIO_CONTEXT","getConstant","arr","getChannelData","constant","channelCount","channelCountMode","loop","setTimeout","fn","timeout","id","clearTimeout","type","hint","con","_type","_updateInterval","_callback","_createClock","Type","Worker","Timeout","Offline","_createWorker","URL","webkitURL","blob","Blob","blobUrl","createObjectURL","worker","onmessage","_worker","_createTimeout","_timeout","max","postMessage","_disposeClock","terminate","TONE_SILENCE_LOGGING","prefix","printString","warn","Default","Ticks","NormalRange","AudioRange","Decibels","Interval","BPM","Positive","Gain","Cents","Degrees","MIDI","BarsBeatsSixteenths","Samples","Hertz","Note","Milliseconds","Seconds","Notation","testContext","testSrcNode","testDstNode","nativeConnect","createInsOuts","inputs","outputs","output","channelInterpretation","unit","outputNum","inputNum","chain","fan","_param","convert","overridden","setValueAtTime","_toUnits","getValueAtTime","_initialValue","_fromUnits","cancelScheduledValues","minValue","maxValue","min","_minOutput","AutomationType","Linear","Exponential","Target","SetValue","Cancel","before","initialValue","defaultValue","previousVal","previous","_exponentialApproach","_linearInterpolate","_exponentialInterpolate","setRampPoint","currentVal","cancelAndHoldAtTime","linearRampToValueAtTime","exponentialRampToValueAtTime","exponentialRampTo","rampTime","linearRampTo","targetRampTo","exponentialApproachValueAtTime","timeConstant","setTargetAtTime","setValueCurveAtTime","duration","scaling","segTime","valueAtTime","sampleTime","rampTo","t0","v0","v1","exp","t1","SignalBase","node","_gainNode","createConstantSource","ConstantSourceNode","_bufferSource","gainNode","_output","offset","stop","_constantSource","Volume","volume","_unmutedVolume","mute","Master","_volume","isMaster","toMaster","MasterConstructor","Instrument","_scheduledEvents","triggerAttack","triggerRelease","sync","_syncMethod","timePosition","originalMethod","schedule","unsync","clear","_original_triggerAttack","_original_triggerRelease","triggerAttackRelease","velocity","AudioBuffer","copyToChannel","src","chanNum","channel","copyFromChannel","dest","Buffer","_buffer","_reversed","reverse","_xhr","onload","url","loaded","load","catch","onerror","_reverse","buff","err","_removeFromDownloadQueue","abort","numberOfChannels","fromArray","array","isMultidimensional","channels","toMono","toArray","outputArray","Float32Array","numChannels","channelArray","sample","startSamples","endSamples","replacement","rev","_downloadQueue","baseUrl","fromUrl","request","matches","extensions","extension","supportsType","replace","onError","onProgress","totalProgress","progress","XMLHttpRequest","open","responseType","addEventListener","status","response","lengthComputable","send","cancelDownloads","document","createElement","canPlayType","removeEvents","fail","Buffers","urls","key","_buffers","_loadingCount","_bufferLoaded","has","name","isLoaded","buffName","_wrapScheduleMethods","ticksUntilTime","_getTicksUntilEvent","TickSignal","prevEvent","segments","rampVal","segmentDur","val0","val1","getTicksAtTime","getDurationOfTicks","currentTick","getTimeOfTick","tick","delta","k","sqrt","sol1","ticksToTime","when","timeToTicks","startTicks","endTicks","TimelineState","initial","_initial","setStateAtTime","getLastState","getNextState","TickSource","_state","_tickOffset","setTicksAtTime","pause","stopEvent","tmpEvent","lastState","elapsedTicks","periodStartTime","offsetEvent","getSecondsAtTime","elapsedSeconds","getStateAtTime","absoluteTicks","forEachTickBetween","lastStateEvent","nextTickTime","Clock","_nextTick","_tickSource","_lastUpdate","_boundLoop","_loop","ceil","IntervalTimeline","_root","_length","IntervalNode","insert","updateHeight","updateMax","_rebalance","results","search","_removeNode","_setRoot","_replaceNodeInParent","isLeftChild","left","right","temp","getBalance","_rotateLeft","pivotNode","_rotateRight","balance","low","allNodes","traverse","searchAfter","high","_left","_right","height","point","TransportEvent","_eventId","_once","invoke","TransportRepeatEvent","_interval","_currentId","_nextId","_boundRestart","_restart","_createEvents","scheduleOnce","_boundCreateEvents","_loopStart","_loopEnd","_ppq","TransportConstructor","_clock","_processTick","_bindClockEvents","_timeSignature","_repeatedEvents","_syncedSignals","_swingTicks","_swingAmount","transport","swing","swingSubdivision","loopStart","loopEnd","isTransport","tickTime","amount","_addEvent","scheduleRepeat","eventId","item","timeline","toggle","timeSig","startPosition","endPosition","setLoopPoints","ppq","remainingTicks","syncSignal","signal","ratio","ratioSignal","unsyncSignal","syncedSignal","Source","_synced","_scheduled","_start","restart","_stop","sched","_syncedStart","stateEvent","startOffset","_syncedStop","BufferSource","onended","_startTime","_sourceStarted","_sourceStopped","_stopTime","_source","_onended","playbackRate","fadeIn","fadeOut","curve","_onendedTimeout","fadeInTime","computedDur","cancelStop","fadeOutTime","additionalTail","_wasDisposed","Sampler","urlMap","isNaN","_activeSources","attack","release","_findClosest","notes","difference","closestNote","releaseAll","sources","mid"],"mappings":"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","file":"static/js/4.c58967e7.chunk.js","sourcesContent":["/**\n *  Tone.js\n *  @author Yotam Mann\n *  @license http://opensource.org/licenses/MIT MIT License\n *  @copyright 2014-2019 Yotam Mann\n */\nimport version from \"../version\"; ///////////////////////////////////////////////////////////////////////////\n//\tTONE\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  @class  Tone is the base class of all other classes.\n *  @constructor\n */\n\nvar Tone = function Tone() {\n  if (!(this instanceof Tone)) {\n    throw new Error(\"constructor needs to be called with the 'new' keyword\");\n  }\n};\n/**\n *  @memberOf Tone#\n *  @returns {String} returns the name of the class as a string\n */\n\n\nTone.prototype.toString = function () {\n  for (var className in Tone) {\n    var isLetter = className[0].match(/^[A-Z]$/);\n    var sameConstructor = Tone[className] === this.constructor;\n\n    if (Tone.isFunction(Tone[className]) && isLetter && sameConstructor) {\n      return className;\n    }\n  }\n\n  return \"Tone\";\n};\n/**\n *  @memberOf Tone#\n *  disconnect and dispose\n *  @returns {Tone} this\n */\n\n\nTone.prototype.dispose = function () {\n  return this;\n}; ///////////////////////////////////////////////////////////////////////////\n//\tGET/SET\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Set the parameters at once. Either pass in an\n *  object mapping parameters to values, or to set a\n *  single parameter, by passing in a string and value.\n *  The last argument is an optional ramp time which\n *  will ramp any signal values to their destination value\n *  over the duration of the rampTime.\n *  @param {Object|String} params\n *  @param {Number=} value\n *  @returns {Tone} this\n *  @memberOf Tone#\n *  @example\n * //set values using an object\n * filter.set({\n * \t\"frequency\" : 300,\n * \t\"type\" : highpass\n * });\n *  @example\n * filter.set(\"type\", \"highpass\");\n *  @example\n * //ramp to the value 220 over 3 seconds.\n * oscillator.set({\n * \t\"frequency\" : 220\n * }, 3);\n */\n\n\nTone.prototype.set = function (params, value) {\n  if (Tone.isString(params)) {\n    var tmpObj = {};\n    tmpObj[params] = value;\n    params = tmpObj;\n  }\n\n  paramLoop: for (var attr in params) {\n    value = params[attr];\n    var parent = this;\n\n    if (attr.indexOf(\".\") !== -1) {\n      var attrSplit = attr.split(\".\");\n\n      for (var i = 0; i < attrSplit.length - 1; i++) {\n        parent = parent[attrSplit[i]];\n\n        if (parent instanceof Tone) {\n          attrSplit.splice(0, i + 1);\n          var innerParam = attrSplit.join(\".\");\n          parent.set(innerParam, value);\n          continue paramLoop;\n        }\n      }\n\n      attr = attrSplit[attrSplit.length - 1];\n    }\n\n    var param = parent[attr];\n\n    if (Tone.isUndef(param)) {\n      continue;\n    }\n\n    if (Tone.Signal && param instanceof Tone.Signal || Tone.Param && param instanceof Tone.Param) {\n      if (param.value !== value) {\n        param.value = value;\n      }\n    } else if (param instanceof AudioParam) {\n      if (param.value !== value) {\n        param.value = value;\n      }\n    } else if (Tone.TimeBase && param instanceof Tone.TimeBase) {\n      parent[attr] = value;\n    } else if (param instanceof Tone) {\n      param.set(value);\n    } else if (param !== value) {\n      parent[attr] = value;\n    }\n  }\n\n  return this;\n};\n/**\n *  Get the object's attributes. Given no arguments get\n *  will return all available object properties and their corresponding\n *  values. Pass in a single attribute to retrieve or an array\n *  of attributes. The attribute strings can also include a \".\"\n *  to access deeper properties.\n *  @memberOf Tone#\n *  @example\n * osc.get();\n * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n *  @example\n * osc.get(\"type\");\n * //returns { \"type\" : \"sine\"}\n * @example\n * //use dot notation to access deep properties\n * synth.get([\"envelope.attack\", \"envelope.release\"]);\n * //returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n *  @param {Array=|string|undefined} params the parameters to get, otherwise will return\n *  \t\t\t\t\t                  all available.\n *  @returns {Object}\n */\n\n\nTone.prototype.get = function (params) {\n  if (Tone.isUndef(params)) {\n    params = this._collectDefaults(this.constructor);\n  } else if (Tone.isString(params)) {\n    params = [params];\n  }\n\n  var ret = {};\n\n  for (var i = 0; i < params.length; i++) {\n    var attr = params[i];\n    var parent = this;\n    var subRet = ret;\n\n    if (attr.indexOf(\".\") !== -1) {\n      var attrSplit = attr.split(\".\");\n\n      for (var j = 0; j < attrSplit.length - 1; j++) {\n        var subAttr = attrSplit[j];\n        subRet[subAttr] = subRet[subAttr] || {};\n        subRet = subRet[subAttr];\n        parent = parent[subAttr];\n      }\n\n      attr = attrSplit[attrSplit.length - 1];\n    }\n\n    var param = parent[attr];\n\n    if (Tone.isObject(params[attr])) {\n      subRet[attr] = param.get();\n    } else if (Tone.Signal && param instanceof Tone.Signal) {\n      subRet[attr] = param.value;\n    } else if (Tone.Param && param instanceof Tone.Param) {\n      subRet[attr] = param.value;\n    } else if (param instanceof AudioParam) {\n      subRet[attr] = param.value;\n    } else if (param instanceof Tone) {\n      subRet[attr] = param.get();\n    } else if (!Tone.isFunction(param) && Tone.isDefined(param)) {\n      subRet[attr] = param;\n    }\n  }\n\n  return ret;\n};\n/**\n *  collect all of the default attributes in one\n *  @private\n *  @param {Function} constr the constructor to find the defaults from\n *  @return {Array} all of the attributes which belong to the class\n */\n\n\nTone.prototype._collectDefaults = function (constr) {\n  var ret = [];\n\n  if (Tone.isDefined(constr.defaults)) {\n    ret = Object.keys(constr.defaults);\n  }\n\n  if (Tone.isDefined(constr._super)) {\n    var superDefs = this._collectDefaults(constr._super); //filter out repeats\n\n\n    for (var i = 0; i < superDefs.length; i++) {\n      if (ret.indexOf(superDefs[i]) === -1) {\n        ret.push(superDefs[i]);\n      }\n    }\n  }\n\n  return ret;\n}; ///////////////////////////////////////////////////////////////////////////\n//\tDEFAULTS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  @memberOf Tone\n *  @param  {Array}  values  The arguments array\n *  @param  {Array}  keys    The names of the arguments\n *  @param {Function|Object} constr The class constructor\n *  @return  {Object}  An object composed of the  defaults between the class' defaults\n *                        and the passed in arguments.\n */\n\n\nTone.defaults = function (values, keys, constr) {\n  var options = {};\n\n  if (values.length === 1 && Tone.isObject(values[0])) {\n    options = values[0];\n  } else {\n    for (var i = 0; i < keys.length; i++) {\n      options[keys[i]] = values[i];\n    }\n  }\n\n  if (Tone.isDefined(constr.defaults)) {\n    return Tone.defaultArg(options, constr.defaults);\n  } else if (Tone.isObject(constr)) {\n    return Tone.defaultArg(options, constr);\n  } else {\n    return options;\n  }\n};\n/**\n *  If the `given` parameter is undefined, use the `fallback`.\n *  If both `given` and `fallback` are object literals, it will\n *  return a deep copy which includes all of the parameters from both\n *  objects. If a parameter is undefined in given, it will return\n *  the fallback property.\n *  <br><br>\n *  WARNING: if object is self referential, it will go into an an\n *  infinite recursive loop.\n *  @memberOf Tone\n *  @param  {*} given\n *  @param  {*} fallback\n *  @return {*}\n */\n\n\nTone.defaultArg = function (given, fallback) {\n  if (Tone.isObject(given) && Tone.isObject(fallback)) {\n    var ret = {}; //make a deep copy of the given object\n\n    for (var givenProp in given) {\n      ret[givenProp] = Tone.defaultArg(fallback[givenProp], given[givenProp]);\n    }\n\n    for (var fallbackProp in fallback) {\n      ret[fallbackProp] = Tone.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n    }\n\n    return ret;\n  } else {\n    return Tone.isUndef(given) ? fallback : given;\n  }\n}; ///////////////////////////////////////////////////////////////////////////\n//\tDEBUGGING\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Print the outputs to the console log for debugging purposes. \n *  Prints the contents only if either the object has a property\n *  called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n *  is set to the name of the class. \n *  @example\n * //prints all logs originating from Tone.OscillatorNode\n * Tone.global.TONE_DEBUG_CLASS = \"OscillatorNode\"\n *  @param {*} args Any arguments to print to the console.\n *  @private\n */\n\n\nTone.prototype.log = function () {\n  //if the object is either set to debug = true\n  //or if there is a string on the Tone.global.with the class name\n  if (this.debug || this.toString() === Tone.global.TONE_DEBUG_CLASS) {\n    var args = Array.from(arguments);\n    args.unshift(this.toString() + \":\"); // eslint-disable-next-line no-console\n\n    console.log.apply(undefined, args);\n  }\n};\n/**\n *  Assert that the statement is true, otherwise invoke the error. \n *  @param {Boolean} statement\n *  @param {String} error The message which is passed into an Error\n *  @private\n */\n\n\nTone.prototype.assert = function (statement, error) {\n  if (!statement) {\n    throw new Error(error);\n  }\n}; ///////////////////////////////////////////////////////////////////////////\n//\tCONNECTIONS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  connect together all of the arguments in series\n *  @param {...(AudioParam|Tone|AudioNode)} nodes\n *  @returns {Tone}\n *  @memberOf Tone\n *  @static\n */\n\n\nTone.connectSeries = function () {\n  var currentUnit = arguments[0];\n\n  for (var i = 1; i < arguments.length; i++) {\n    var toUnit = arguments[i];\n    Tone.connect(currentUnit, toUnit);\n    currentUnit = toUnit;\n  }\n\n  return Tone;\n};\n/**\n * Connect two nodes together so that signal flows from the \n * first node to the second. The second node can be an AudioParam. \n * Optionally specific the input and output channels. \n * @param {(AudioNode|Tone.AudioNode)} srcNode The source node\n * @param {(AudioNode|Tone.AudioNode|AudioParam|Tone.AudioParam)} dstNode The destination node\n * @param {number} [outputNumber=0] The output channel of the srcNode\n * @param {number} [inputNumber=0] The input channel of the dstNode\n */\n\n\nTone.connect = function (srcNode, dstNode, outputNumber, inputNumber) {\n  //resolve the input of the dstNode\n  while (Tone.isDefined(dstNode.input)) {\n    if (Tone.isArray(dstNode.input)) {\n      inputNumber = Tone.defaultArg(inputNumber, 0);\n      dstNode = dstNode.input[inputNumber];\n      inputNumber = 0;\n    } else if (dstNode.input) {\n      dstNode = dstNode.input;\n    }\n  } //make the connection\n\n\n  if (dstNode instanceof AudioParam) {\n    srcNode.connect(dstNode, outputNumber);\n  } else if (dstNode instanceof AudioNode) {\n    srcNode.connect(dstNode, outputNumber, inputNumber);\n  }\n\n  return Tone;\n};\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param {(AudioNode|Tone.AudioNode)} srcNode The source node\n * @param {?(AudioNode|Tone.AudioNode|AudioParam|Tone.AudioParam)} dstNode The destination node\n * @param {?number} [outputNumber=0] The output channel of the srcNode\n * @param {?number} [inputNumber=0] The input channel of the dstNode\n */\n\n\nTone.disconnect = function (srcNode, dstNode, outputNumber, inputNumber) {\n  if (dstNode) {\n    //resolve the input of the dstNode\n    var bDone = false;\n\n    while (!bDone) {\n      if (Tone.isArray(dstNode.input)) {\n        if (Tone.isDefined(inputNumber)) {\n          Tone.disconnect(srcNode, dstNode.input[inputNumber], outputNumber);\n        } else {\n          dstNode.input.forEach(function (dstNode) {\n            //ignore errors from connections that aren't there\n            try {\n              Tone.disconnect(srcNode, dstNode, outputNumber); // eslint-disable-next-line\n            } catch (e) {}\n          });\n        }\n\n        bDone = true;\n      } else if (dstNode.input) {\n        dstNode = dstNode.input;\n      } else {\n        bDone = true;\n      }\n    } //make the connection\n\n\n    if (dstNode instanceof AudioParam) {\n      srcNode.disconnect(dstNode, outputNumber);\n    } else if (dstNode instanceof AudioNode) {\n      srcNode.disconnect(dstNode, outputNumber, inputNumber);\n    }\n  } else {\n    srcNode.disconnect();\n  }\n\n  return Tone;\n}; ///////////////////////////////////////////////////////////////////////////\n// TYPE CHECKING\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Test if the arg is undefined\n *  @param {*} arg the argument to test\n *  @returns {Boolean} true if the arg is undefined\n *  @static\n *  @memberOf Tone\n */\n\n\nTone.isUndef = function (val) {\n  return typeof val === \"undefined\";\n};\n/**\n *  Test if the arg is not undefined\n *  @param {*} arg the argument to test\n *  @returns {Boolean} true if the arg is undefined\n *  @static\n *  @memberOf Tone\n */\n\n\nTone.isDefined = function (val) {\n  return !Tone.isUndef(val);\n};\n/**\n *  Test if the arg is a function\n *  @param {*} arg the argument to test\n *  @returns {Boolean} true if the arg is a function\n *  @static\n *  @memberOf Tone\n */\n\n\nTone.isFunction = function (val) {\n  return typeof val === \"function\";\n};\n/**\n *  Test if the argument is a number.\n *  @param {*} arg the argument to test\n *  @returns {Boolean} true if the arg is a number\n *  @static\n *  @memberOf Tone\n */\n\n\nTone.isNumber = function (arg) {\n  return typeof arg === \"number\";\n};\n/**\n *  Test if the given argument is an object literal (i.e. `{}`);\n *  @param {*} arg the argument to test\n *  @returns {Boolean} true if the arg is an object literal.\n *  @static\n *  @memberOf Tone\n */\n\n\nTone.isObject = function (arg) {\n  return Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object;\n};\n/**\n *  Test if the argument is a boolean.\n *  @param {*} arg the argument to test\n *  @returns {Boolean} true if the arg is a boolean\n *  @static\n *  @memberOf Tone\n */\n\n\nTone.isBoolean = function (arg) {\n  return typeof arg === \"boolean\";\n};\n/**\n *  Test if the argument is an Array\n *  @param {*} arg the argument to test\n *  @returns {Boolean} true if the arg is an array\n *  @static\n *  @memberOf Tone\n */\n\n\nTone.isArray = function (arg) {\n  return Array.isArray(arg);\n};\n/**\n *  Test if the argument is a string.\n *  @param {*} arg the argument to test\n *  @returns {Boolean} true if the arg is a string\n *  @static\n *  @memberOf Tone\n */\n\n\nTone.isString = function (arg) {\n  return typeof arg === \"string\";\n};\n/**\n *  Test if the argument is in the form of a note in scientific pitch notation.\n *  e.g. \"C4\"\n *  @param {*} arg the argument to test\n *  @returns {Boolean} true if the arg is a string\n *  @static\n *  @memberOf Tone\n */\n\n\nTone.isNote = function (arg) {\n  return Tone.isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n};\n/**\n *  An empty function.\n *  @static\n */\n\n\nTone.noOp = function () {};\n/**\n *  Make the property not writable. Internal use only.\n *  @private\n *  @param  {String}  property  the property to make not writable\n */\n\n\nTone.prototype._readOnly = function (property) {\n  if (Array.isArray(property)) {\n    for (var i = 0; i < property.length; i++) {\n      this._readOnly(property[i]);\n    }\n  } else {\n    Object.defineProperty(this, property, {\n      \"writable\": false,\n      \"enumerable\": true\n    });\n  }\n};\n/**\n *  Make an attribute writeable. Interal use only.\n *  @private\n *  @param  {String}  property  the property to make writable\n */\n\n\nTone.prototype._writable = function (property) {\n  if (Array.isArray(property)) {\n    for (var i = 0; i < property.length; i++) {\n      this._writable(property[i]);\n    }\n  } else {\n    Object.defineProperty(this, property, {\n      \"writable\": true\n    });\n  }\n};\n/**\n * Possible play states.\n * @enum {String}\n */\n\n\nTone.State = {\n  \"Started\": \"started\",\n  \"Stopped\": \"stopped\",\n  \"Paused\": \"paused\"\n};\n/**\n * A reference to the global context, `global` or `Tone.global.\n */\n\nTone.global = Tone.isUndef(global) ? window : global; ///////////////////////////////////////////////////////////////////////////\n// CONVERSIONS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Equal power gain scale. Good for cross-fading.\n *  @param  {NormalRange} percent (0-1)\n *  @return {Number}         output gain (0-1)\n *  @static\n *  @memberOf Tone\n */\n\nTone.equalPowerScale = function (percent) {\n  var piFactor = 0.5 * Math.PI;\n  return Math.sin(percent * piFactor);\n};\n/**\n *  Convert decibels into gain.\n *  @param  {Decibels} db\n *  @return {Number}\n *  @static\n *  @memberOf Tone\n */\n\n\nTone.dbToGain = function (db) {\n  return Math.pow(10, db / 20);\n};\n/**\n *  Convert gain to decibels.\n *  @param  {Number} gain (0-1)\n *  @return {Decibels}\n *  @static\n *  @memberOf Tone\n */\n\n\nTone.gainToDb = function (gain) {\n  return 20 * (Math.log(gain) / Math.LN10);\n};\n/**\n *  Convert an interval (in semitones) to a frequency ratio.\n *  @param  {Interval} interval the number of semitones above the base note\n *  @return {Number}          the frequency ratio\n *  @static\n *  @memberOf Tone\n *  @example\n * tone.intervalToFrequencyRatio(0); // 1\n * tone.intervalToFrequencyRatio(12); // 2\n * tone.intervalToFrequencyRatio(-12); // 0.5\n */\n\n\nTone.intervalToFrequencyRatio = function (interval) {\n  return Math.pow(2, interval / 12);\n}; ///////////////////////////////////////////////////////////////////////////\n//\tTIMING\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Return the current time of the AudioContext clock plus\n *  the lookAhead.\n *  @return {Number} the currentTime from the AudioContext\n *  @memberOf Tone#\n */\n\n\nTone.prototype.now = function () {\n  return Tone.context.now();\n};\n/**\n *  Return the current time of the AudioContext clock plus\n *  the lookAhead.\n *  @return {Number} the currentTime from the AudioContext\n *  @static\n *  @memberOf Tone\n */\n\n\nTone.now = function () {\n  return Tone.context.now();\n};\n/**\n *  Return the current time of the AudioContext clock without\n *  any lookAhead.\n *  @return {Number} the currentTime from the AudioContext\n *  @memberOf Tone#\n */\n\n\nTone.prototype.immediate = function () {\n  return Tone.context.currentTime;\n};\n/**\n *  Return the current time of the AudioContext clock without\n *  any lookAhead.\n *  @return {Number} the currentTime from the AudioContext\n *  @memberOf Tone\n */\n\n\nTone.immediate = function () {\n  return Tone.context.currentTime;\n}; ///////////////////////////////////////////////////////////////////////////\n//\tINHERITANCE\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  have a child inherit all of Tone's (or a parent's) prototype\n *  to inherit the parent's properties, make sure to call\n *  Parent.call(this) in the child's constructor\n *\n *  based on closure library's inherit function\n *\n *  @memberOf Tone\n *  @static\n *  @param  {Function} \tchild\n *  @param  {Function=} parent (optional) parent to inherit from\n *                             if no parent is supplied, the child\n *                             will inherit from Tone\n */\n\n\nTone.extend = function (child, parent) {\n  if (Tone.isUndef(parent)) {\n    parent = Tone;\n  }\n\n  function TempConstructor() {}\n\n  TempConstructor.prototype = parent.prototype;\n  child.prototype = new TempConstructor();\n  /** @override */\n\n  child.prototype.constructor = child;\n  child._super = parent;\n}; ///////////////////////////////////////////////////////////////////////////\n//\tCONTEXT\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * The shared AudioContext\n * @type {Tone.Context}\n * @private\n */\n\n\nTone._audioContext = null;\n/**\n * \tMost browsers will not play _any_ audio until a user \n * \tclicks something (like a play button). Invoke this method\n * \ton a click or keypress event handler to start the audio context. \n * \tMore about the Autoplay policy [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n *  @memberOf Tone\n *  @static\n *  @return {Promise} This promise is resolved when the audio context is started. \n *  @example\n * document.querySelector('#playbutton').addEventListener('click', () => Tone.start())\n */\n\nTone.start = function () {\n  return Tone.context.resume();\n};\n/**\n *  A static pointer to the audio context accessible as Tone.context.\n *  @type {Tone.Context}\n *  @name context\n *  @memberOf Tone\n */\n\n\nObject.defineProperty(Tone, \"context\", {\n  \"get\": function get() {\n    return Tone._audioContext;\n  },\n  \"set\": function set(context) {\n    if (context.isContext) {\n      Tone._audioContext = context;\n    } else {\n      Tone._audioContext = new Tone.Context(context);\n    } //initialize the new audio context\n\n\n    Tone.Context.emit(\"init\", Tone._audioContext);\n  }\n});\n/**\n *  The AudioContext\n *  @type {Tone.Context}\n *  @name context\n *  @memberOf Tone#\n *  @readOnly\n */\n\nObject.defineProperty(Tone.prototype, \"context\", {\n  \"get\": function get() {\n    return Tone.context;\n  }\n});\n/**\n *  Tone automatically creates a context on init, but if you are working\n *  with other libraries which also create an AudioContext, it can be\n *  useful to set your own. If you are going to set your own context,\n *  be sure to do it at the start of your code, before creating any objects.\n *  @static\n *  @param {AudioContext} ctx The new audio context to set\n */\n\nTone.setContext = function (ctx) {\n  Tone.context = ctx;\n}; ///////////////////////////////////////////////////////////////////////////\n//\tATTRIBUTES\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  The number of seconds of 1 processing block (128 samples)\n *  @type {Number}\n *  @name blockTime\n *  @memberOf Tone\n *  @static\n *  @readOnly\n */\n\n\nObject.defineProperty(Tone.prototype, \"blockTime\", {\n  \"get\": function get() {\n    return 128 / this.context.sampleRate;\n  }\n});\n/**\n *  The duration in seconds of one sample.\n *  @type {Number}\n *  @name sampleTime\n *  @memberOf Tone\n *  @static\n *  @readOnly\n */\n\nObject.defineProperty(Tone.prototype, \"sampleTime\", {\n  \"get\": function get() {\n    return 1 / this.context.sampleRate;\n  }\n});\n/**\n *  Whether or not all the technologies that Tone.js relies on are supported by the current browser.\n *  @type {Boolean}\n *  @name supported\n *  @memberOf Tone\n *  @readOnly\n *  @static\n */\n\nObject.defineProperty(Tone, \"supported\", {\n  \"get\": function get() {\n    var hasAudioContext = Tone.global.hasOwnProperty(\"AudioContext\") || Tone.global.hasOwnProperty(\"webkitAudioContext\");\n    var hasPromises = Tone.global.hasOwnProperty(\"Promise\");\n    return hasAudioContext && hasPromises;\n  }\n});\n/**\n *  Boolean value if the audio context has been initialized.\n *  @type {Boolean}\n *  @memberOf Tone\n *  @static\n *  @name initialized\n *  @readOnly\n */\n\nObject.defineProperty(Tone, \"initialized\", {\n  \"get\": function get() {\n    return Boolean(Tone.context);\n  }\n});\n/**\n *  Get the context when it becomes available\n *  @param  {Function}  resolve  Callback when the context is initialized\n *  @return  {Tone}\n */\n\nTone.getContext = function (resolve) {\n  if (Tone.initialized) {\n    resolve(Tone.context);\n  } else {\n    var resCallback = function resCallback() {\n      resolve(Tone.context);\n      Tone.Context.off(\"init\", resCallback);\n    };\n\n    Tone.Context.on(\"init\", resCallback);\n  }\n\n  return Tone;\n};\n/**\n * The version number\n * @type {String}\n * @static\n */\n\n\nTone.version = version;\nexport default Tone;","import Tone from \"../core/Tone\";\nimport \"../type/TimeBase\";\n/**\n *  @class Tone.Frequency is a primitive type for encoding Frequency values.\n *         Eventually all time values are evaluated to hertz\n *         using the `eval` method.\n *  @constructor\n *  @extends {Tone.TimeBase}\n *  @param  {String|Number}  val    The time value.\n *  @param  {String=}  units  The units of the value.\n *  @example\n * Tone.Frequency(\"C3\") // 261\n * Tone.Frequency(38, \"midi\") //\n * Tone.Frequency(\"C3\").transpose(4);\n */\n\nTone.Frequency = function (val, units) {\n  if (this instanceof Tone.Frequency) {\n    Tone.TimeBase.call(this, val, units);\n  } else {\n    return new Tone.Frequency(val, units);\n  }\n};\n\nTone.extend(Tone.Frequency, Tone.TimeBase); ///////////////////////////////////////////////////////////////////////////\n//\tAUGMENT BASE EXPRESSIONS\n///////////////////////////////////////////////////////////////////////////\n\nTone.Frequency.prototype._expressions = Object.assign({}, Tone.TimeBase.prototype._expressions, {\n  \"midi\": {\n    regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n    method: function method(value) {\n      if (this._defaultUnits === \"midi\") {\n        return value;\n      } else {\n        return Tone.Frequency.mtof(value);\n      }\n    }\n  },\n  \"note\": {\n    regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n    method: function method(pitch, octave) {\n      var index = noteToScaleIndex[pitch.toLowerCase()];\n      var noteNumber = index + (parseInt(octave) + 1) * 12;\n\n      if (this._defaultUnits === \"midi\") {\n        return noteNumber;\n      } else {\n        return Tone.Frequency.mtof(noteNumber);\n      }\n    }\n  },\n  \"tr\": {\n    regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n    method: function method(m, q, s) {\n      var total = 1;\n\n      if (m && m !== \"0\") {\n        total *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n      }\n\n      if (q && q !== \"0\") {\n        total *= this._beatsToUnits(parseFloat(q));\n      }\n\n      if (s && s !== \"0\") {\n        total *= this._beatsToUnits(parseFloat(s) / 4);\n      }\n\n      return total;\n    }\n  }\n}); ///////////////////////////////////////////////////////////////////////////\n//\tEXPRESSIONS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Transposes the frequency by the given number of semitones.\n *  @param  {Interval}  interval\n *  @return  {Tone.Frequency} A new transposed frequency\n *  @example\n * Tone.Frequency(\"A4\").transpose(3); //\"C5\"\n */\n\nTone.Frequency.prototype.transpose = function (interval) {\n  return new this.constructor(this.valueOf() * Tone.intervalToFrequencyRatio(interval));\n};\n/**\n *  Takes an array of semitone intervals and returns\n *  an array of frequencies transposed by those intervals.\n *  @param  {Array}  intervals\n *  @return  {Array<Tone.Frequency>} Returns an array of Frequencies\n *  @example\n * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n */\n\n\nTone.Frequency.prototype.harmonize = function (intervals) {\n  return intervals.map(function (interval) {\n    return this.transpose(interval);\n  }.bind(this));\n}; ///////////////////////////////////////////////////////////////////////////\n//\tUNIT CONVERSIONS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Return the value of the frequency as a MIDI note\n *  @return  {MIDI}\n *  @example\n * Tone.Frequency(\"C4\").toMidi(); //60\n */\n\n\nTone.Frequency.prototype.toMidi = function () {\n  return Tone.Frequency.ftom(this.valueOf());\n};\n/**\n *  Return the value of the frequency in Scientific Pitch Notation\n *  @return  {Note}\n *  @example\n * Tone.Frequency(69, \"midi\").toNote(); //\"A4\"\n */\n\n\nTone.Frequency.prototype.toNote = function () {\n  var freq = this.toFrequency();\n  var log = Math.log2(freq / Tone.Frequency.A4);\n  var noteNumber = Math.round(12 * log) + 57;\n  var octave = Math.floor(noteNumber / 12);\n\n  if (octave < 0) {\n    noteNumber += -12 * octave;\n  }\n\n  var noteName = scaleIndexToNote[noteNumber % 12];\n  return noteName + octave.toString();\n};\n/**\n *  Return the duration of one cycle in seconds.\n *  @return  {Seconds}\n */\n\n\nTone.Frequency.prototype.toSeconds = function () {\n  return 1 / Tone.TimeBase.prototype.toSeconds.call(this);\n};\n/**\n *  Return the value in Hertz\n *  @return  {Frequency}\n */\n\n\nTone.Frequency.prototype.toFrequency = function () {\n  return Tone.TimeBase.prototype.toFrequency.call(this);\n};\n/**\n *  Return the duration of one cycle in ticks\n *  @return  {Ticks}\n */\n\n\nTone.Frequency.prototype.toTicks = function () {\n  var quarterTime = this._beatsToUnits(1);\n\n  var quarters = this.valueOf() / quarterTime;\n  return Math.floor(quarters * Tone.Transport.PPQ);\n}; ///////////////////////////////////////////////////////////////////////////\n//\tUNIT CONVERSIONS HELPERS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  With no arguments, return 0\n *  @return  {Number}\n *  @private\n */\n\n\nTone.Frequency.prototype._noArg = function () {\n  return 0;\n};\n/**\n *  Returns the value of a frequency in the current units\n *  @param {Frequency} freq\n *  @return  {Number}\n *  @private\n */\n\n\nTone.Frequency.prototype._frequencyToUnits = function (freq) {\n  return freq;\n};\n/**\n *  Returns the value of a tick in the current time units\n *  @param {Ticks} ticks\n *  @return  {Number}\n *  @private\n */\n\n\nTone.Frequency.prototype._ticksToUnits = function (ticks) {\n  return 1 / (ticks * 60 / (Tone.Transport.bpm.value * Tone.Transport.PPQ));\n};\n/**\n *  Return the value of the beats in the current units\n *  @param {Number} beats\n *  @return  {Number}\n *  @private\n */\n\n\nTone.Frequency.prototype._beatsToUnits = function (beats) {\n  return 1 / Tone.TimeBase.prototype._beatsToUnits.call(this, beats);\n};\n/**\n *  Returns the value of a second in the current units\n *  @param {Seconds} seconds\n *  @return  {Number}\n *  @private\n */\n\n\nTone.Frequency.prototype._secondsToUnits = function (seconds) {\n  return 1 / seconds;\n};\n/**\n *  The default units if none are given.\n *  @private\n */\n\n\nTone.Frequency.prototype._defaultUnits = \"hz\"; ///////////////////////////////////////////////////////////////////////////\n//\tFREQUENCY CONVERSIONS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Note to scale index\n *  @type  {Object}\n *  @private\n */\n\nvar noteToScaleIndex = {\n  \"cbb\": -2,\n  \"cb\": -1,\n  \"c\": 0,\n  \"c#\": 1,\n  \"cx\": 2,\n  \"dbb\": 0,\n  \"db\": 1,\n  \"d\": 2,\n  \"d#\": 3,\n  \"dx\": 4,\n  \"ebb\": 2,\n  \"eb\": 3,\n  \"e\": 4,\n  \"e#\": 5,\n  \"ex\": 6,\n  \"fbb\": 3,\n  \"fb\": 4,\n  \"f\": 5,\n  \"f#\": 6,\n  \"fx\": 7,\n  \"gbb\": 5,\n  \"gb\": 6,\n  \"g\": 7,\n  \"g#\": 8,\n  \"gx\": 9,\n  \"abb\": 7,\n  \"ab\": 8,\n  \"a\": 9,\n  \"a#\": 10,\n  \"ax\": 11,\n  \"bbb\": 9,\n  \"bb\": 10,\n  \"b\": 11,\n  \"b#\": 12,\n  \"bx\": 13\n};\n/**\n *  scale index to note (sharps)\n *  @type  {Array}\n *  @private\n */\n\nvar scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n/**\n *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)\n *  A4's values in Hertz.\n *  @type {Frequency}\n *  @static\n */\n\nTone.Frequency.A4 = 440;\n/**\n *  Convert a MIDI note to frequency value.\n *  @param  {MIDI} midi The midi number to convert.\n *  @return {Frequency} the corresponding frequency value\n *  @static\n *  @example\n * Tone.Frequency.mtof(69); // returns 440\n */\n\nTone.Frequency.mtof = function (midi) {\n  return Tone.Frequency.A4 * Math.pow(2, (midi - 69) / 12);\n};\n/**\n *  Convert a frequency value to a MIDI note.\n *  @param {Frequency} frequency The value to frequency value to convert.\n *  @returns  {MIDI}\n *  @static\n *  @example\n * Tone.Frequency.ftom(440); // returns 69\n */\n\n\nTone.Frequency.ftom = function (frequency) {\n  return 69 + Math.round(12 * Math.log2(frequency / Tone.Frequency.A4));\n};\n\nexport default Tone.Frequency;","import Tone from \"../core/Tone\";\n/**\n *  @class Tone.TimeBase is a flexible encoding of time\n *         which can be evaluated to and from a string.\n *  @extends {Tone}\n *  @param  {Time}  val    The time value as a number, string or object\n *  @param  {String=}  units  Unit values\n *  @example\n * Tone.TimeBase(4, \"n\")\n * Tone.TimeBase(2, \"t\")\n * Tone.TimeBase(\"2t\")\n * Tone.TimeBase({\"2t\" : 2})\n * Tone.TimeBase(\"2t\") + Tone.TimeBase(\"4n\");\n */\n\nTone.TimeBase = function (val, units) {\n  //allows it to be constructed with or without 'new'\n  if (this instanceof Tone.TimeBase) {\n    /**\n     *  The value\n     *  @type  {Number|String|Tone.TimeBase}\n     *  @private\n     */\n    this._val = val;\n    /**\n     * The units\n     * @type {String?}\n     * @private\n     */\n\n    this._units = units; //test if the value is a string representation of a number\n\n    if (Tone.isUndef(this._units) && Tone.isString(this._val) && // eslint-disable-next-line eqeqeq\n    parseFloat(this._val) == this._val && this._val.charAt(0) !== \"+\") {\n      this._val = parseFloat(this._val);\n      this._units = this._defaultUnits;\n    } else if (val && val.constructor === this.constructor) {\n      //if they're the same type, just copy values over\n      this._val = val._val;\n      this._units = val._units;\n    } else if (val instanceof Tone.TimeBase) {\n      switch (this._defaultUnits) {\n        case \"s\":\n          this._val = val.toSeconds();\n          break;\n\n        case \"i\":\n          this._val = val.toTicks();\n          break;\n\n        case \"hz\":\n          this._val = val.toFrequency();\n          break;\n\n        case \"midi\":\n          this._val = val.toMidi();\n          break;\n\n        default:\n          throw new Error(\"Unrecognized default units \" + this._defaultUnits);\n      }\n    }\n  } else {\n    return new Tone.TimeBase(val, units);\n  }\n};\n\nTone.extend(Tone.TimeBase); ///////////////////////////////////////////////////////////////////////////\n//\tABSTRACT SYNTAX TREE PARSER\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  All the primary expressions.\n *  @private\n *  @type  {Object}\n */\n\nTone.TimeBase.prototype._expressions = {\n  \"n\": {\n    regexp: /^(\\d+)n(\\.?)$/i,\n    method: function method(value, dot) {\n      value = parseInt(value);\n      var scalar = dot === \".\" ? 1.5 : 1;\n\n      if (value === 1) {\n        return this._beatsToUnits(this._getTimeSignature()) * scalar;\n      } else {\n        return this._beatsToUnits(4 / value) * scalar;\n      }\n    }\n  },\n  \"t\": {\n    regexp: /^(\\d+)t$/i,\n    method: function method(value) {\n      value = parseInt(value);\n      return this._beatsToUnits(8 / (parseInt(value) * 3));\n    }\n  },\n  \"m\": {\n    regexp: /^(\\d+)m$/i,\n    method: function method(value) {\n      return this._beatsToUnits(parseInt(value) * this._getTimeSignature());\n    }\n  },\n  \"i\": {\n    regexp: /^(\\d+)i$/i,\n    method: function method(value) {\n      return this._ticksToUnits(parseInt(value));\n    }\n  },\n  \"hz\": {\n    regexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n    method: function method(value) {\n      return this._frequencyToUnits(parseFloat(value));\n    }\n  },\n  \"tr\": {\n    regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n    method: function method(m, q, s) {\n      var total = 0;\n\n      if (m && m !== \"0\") {\n        total += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n      }\n\n      if (q && q !== \"0\") {\n        total += this._beatsToUnits(parseFloat(q));\n      }\n\n      if (s && s !== \"0\") {\n        total += this._beatsToUnits(parseFloat(s) / 4);\n      }\n\n      return total;\n    }\n  },\n  \"s\": {\n    regexp: /^(\\d+(?:\\.\\d+)?)s$/,\n    method: function method(value) {\n      return this._secondsToUnits(parseFloat(value));\n    }\n  },\n  \"samples\": {\n    regexp: /^(\\d+)samples$/,\n    method: function method(value) {\n      return parseInt(value) / this.context.sampleRate;\n    }\n  },\n  \"default\": {\n    regexp: /^(\\d+(?:\\.\\d+)?)$/,\n    method: function method(value) {\n      return this._expressions[this._defaultUnits].method.call(this, value);\n    }\n  }\n};\n/**\n *  The default units if none are given.\n *  @type {String}\n *  @private\n */\n\nTone.TimeBase.prototype._defaultUnits = \"s\"; ///////////////////////////////////////////////////////////////////////////\n//\tTRANSPORT FALLBACKS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * Return the bpm, or 120 if Transport is not available\n * @type {Number}\n * @private\n */\n\nTone.TimeBase.prototype._getBpm = function () {\n  if (Tone.Transport) {\n    return Tone.Transport.bpm.value;\n  } else {\n    return 120;\n  }\n};\n/**\n * Return the timeSignature or 4 if Transport is not available\n * @type {Number}\n * @private\n */\n\n\nTone.TimeBase.prototype._getTimeSignature = function () {\n  if (Tone.Transport) {\n    return Tone.Transport.timeSignature;\n  } else {\n    return 4;\n  }\n};\n/**\n * Return the PPQ or 192 if Transport is not available\n * @type {Number}\n * @private\n */\n\n\nTone.TimeBase.prototype._getPPQ = function () {\n  if (Tone.Transport) {\n    return Tone.Transport.PPQ;\n  } else {\n    return 192;\n  }\n};\n/**\n * Return the current time in whichever context is relevant\n * @type {Number}\n * @private\n */\n\n\nTone.TimeBase.prototype._now = function () {\n  return this.now();\n}; ///////////////////////////////////////////////////////////////////////////\n//\tUNIT CONVERSIONS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Returns the value of a frequency in the current units\n *  @param {Frequency} freq\n *  @return  {Number}\n *  @private\n */\n\n\nTone.TimeBase.prototype._frequencyToUnits = function (freq) {\n  return 1 / freq;\n};\n/**\n *  Return the value of the beats in the current units\n *  @param {Number} beats\n *  @return  {Number}\n *  @private\n */\n\n\nTone.TimeBase.prototype._beatsToUnits = function (beats) {\n  return 60 / this._getBpm() * beats;\n};\n/**\n *  Returns the value of a second in the current units\n *  @param {Seconds} seconds\n *  @return  {Number}\n *  @private\n */\n\n\nTone.TimeBase.prototype._secondsToUnits = function (seconds) {\n  return seconds;\n};\n/**\n *  Returns the value of a tick in the current time units\n *  @param {Ticks} ticks\n *  @return  {Number}\n *  @private\n */\n\n\nTone.TimeBase.prototype._ticksToUnits = function (ticks) {\n  return ticks * (this._beatsToUnits(1) / this._getPPQ());\n};\n/**\n * With no arguments, return 'now'\n *  @return  {Number}\n *  @private\n */\n\n\nTone.TimeBase.prototype._noArg = function () {\n  return this._now();\n}; ///////////////////////////////////////////////////////////////////////////\n//\tEXPRESSIONS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Evaluate the time value. Returns the time\n *  in seconds.\n *  @return  {Seconds}\n */\n\n\nTone.TimeBase.prototype.valueOf = function () {\n  if (Tone.isUndef(this._val)) {\n    return this._noArg();\n  } else if (Tone.isString(this._val) && Tone.isUndef(this._units)) {\n    for (var units in this._expressions) {\n      if (this._expressions[units].regexp.test(this._val.trim())) {\n        this._units = units;\n        break;\n      }\n    }\n  } else if (Tone.isObject(this._val)) {\n    var total = 0;\n\n    for (var typeName in this._val) {\n      var quantity = this._val[typeName];\n      var time = new this.constructor(typeName).valueOf() * quantity;\n      total += time;\n    }\n\n    return total;\n  }\n\n  if (Tone.isDefined(this._units)) {\n    var expr = this._expressions[this._units];\n\n    var matching = this._val.toString().trim().match(expr.regexp);\n\n    if (matching) {\n      return expr.method.apply(this, matching.slice(1));\n    } else {\n      return expr.method.call(this, parseFloat(this._val));\n    }\n  } else {\n    return this._val;\n  }\n};\n/**\n *  Return the value in seconds\n *  @return {Seconds}\n */\n\n\nTone.TimeBase.prototype.toSeconds = function () {\n  return this.valueOf();\n};\n/**\n *  Return the value in hertz\n *  @return {Frequency}\n */\n\n\nTone.TimeBase.prototype.toFrequency = function () {\n  return 1 / this.toSeconds();\n};\n/**\n *  Return the time in samples\n *  @return  {Samples}\n */\n\n\nTone.TimeBase.prototype.toSamples = function () {\n  return this.toSeconds() * this.context.sampleRate;\n};\n/**\n *  Return the time in milliseconds.\n *  @return  {Milliseconds}\n */\n\n\nTone.TimeBase.prototype.toMilliseconds = function () {\n  return this.toSeconds() * 1000;\n};\n/**\n *  Clean up\n *  @return {Tone.TimeBase} this\n */\n\n\nTone.TimeBase.prototype.dispose = function () {\n  this._val = null;\n  this._units = null;\n};\n\nexport default Tone.TimeBase;","export default \"13.8.22\";","import Tone from \"../core/Tone\";\nimport \"../type/TimeBase\";\nimport \"../type/Frequency\";\n/**\n *  @class Tone.Time is a primitive type for encoding Time values.\n *         Tone.Time can be constructed with or without the `new` keyword. Tone.Time can be passed\n *         into the parameter of any method which takes time as an argument.\n *  @constructor\n *  @extends {Tone.TimeBase}\n *  @param  {String|Number|Object}  val    The time value.\n *  @param  {String=}  units  The units of the value.\n *  @example\n * var t = Tone.Time(\"4n\");//a quarter note\n */\n\nTone.Time = function (val, units) {\n  if (this instanceof Tone.Time) {\n    Tone.TimeBase.call(this, val, units);\n  } else {\n    return new Tone.Time(val, units);\n  }\n};\n\nTone.extend(Tone.Time, Tone.TimeBase);\n/**\n * Extend the base expressions\n */\n\nTone.Time.prototype._expressions = Object.assign({}, Tone.TimeBase.prototype._expressions, {\n  \"quantize\": {\n    regexp: /^@(.+)/,\n    method: function method(capture) {\n      if (Tone.Transport) {\n        var quantTo = new this.constructor(capture);\n        return this._secondsToUnits(Tone.Transport.nextSubdivision(quantTo));\n      } else {\n        return 0;\n      }\n    }\n  },\n  \"now\": {\n    regexp: /^\\+(.+)/,\n    method: function method(capture) {\n      return this._now() + new this.constructor(capture);\n    }\n  }\n});\n/**\n *  Quantize the time by the given subdivision. Optionally add a\n *  percentage which will move the time value towards the ideal\n *  quantized value by that percentage.\n *  @param  {Number|Time}  val    The subdivision to quantize to\n *  @param  {NormalRange}  [percent=1]  Move the time value\n *                                   towards the quantized value by\n *                                   a percentage.\n *  @return  {Number}  this\n *  @example\n * Tone.Time(21).quantize(2) //returns 22\n * Tone.Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n */\n\nTone.Time.prototype.quantize = function (subdiv, percent) {\n  percent = Tone.defaultArg(percent, 1);\n  var subdivision = new this.constructor(subdiv);\n  var value = this.valueOf();\n  var multiple = Math.round(value / subdivision);\n  var ideal = multiple * subdivision;\n  var diff = ideal - value;\n  return value + diff * percent;\n}; ///////////////////////////////////////////////////////////////////////////\n// CONVERSIONS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Convert a Time to Notation. The notation values are will be the\n *  closest representation between 1m to 128th note.\n *  @return {Notation}\n *  @example\n * //if the Transport is at 120bpm:\n * Tone.Time(2).toNotation();//returns \"1m\"\n */\n\n\nTone.Time.prototype.toNotation = function () {\n  var time = this.toSeconds();\n  var testNotations = [\"1m\"];\n\n  for (var power = 1; power < 8; power++) {\n    var subdiv = Math.pow(2, power);\n    testNotations.push(subdiv + \"n.\");\n    testNotations.push(subdiv + \"n\");\n    testNotations.push(subdiv + \"t\");\n  }\n\n  testNotations.push(\"0\"); //find the closets notation representation\n\n  var closest = testNotations[0];\n  var closestSeconds = Tone.Time(testNotations[0]).toSeconds();\n  testNotations.forEach(function (notation) {\n    var notationSeconds = Tone.Time(notation).toSeconds();\n\n    if (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n      closest = notation;\n      closestSeconds = notationSeconds;\n    }\n  });\n  return closest;\n};\n/**\n *  Return the time encoded as Bars:Beats:Sixteenths.\n *  @return  {BarsBeatsSixteenths}\n */\n\n\nTone.Time.prototype.toBarsBeatsSixteenths = function () {\n  var quarterTime = this._beatsToUnits(1);\n\n  var quarters = this.valueOf() / quarterTime;\n  quarters = parseFloat(quarters.toFixed(4));\n  var measures = Math.floor(quarters / this._getTimeSignature());\n  var sixteenths = quarters % 1 * 4;\n  quarters = Math.floor(quarters) % this._getTimeSignature();\n  sixteenths = sixteenths.toString();\n\n  if (sixteenths.length > 3) {\n    // the additional parseFloat removes insignificant trailing zeroes\n    sixteenths = parseFloat(parseFloat(sixteenths).toFixed(3));\n  }\n\n  var progress = [measures, quarters, sixteenths];\n  return progress.join(\":\");\n};\n/**\n *  Return the time in ticks.\n *  @return  {Ticks}\n */\n\n\nTone.Time.prototype.toTicks = function () {\n  var quarterTime = this._beatsToUnits(1);\n\n  var quarters = this.valueOf() / quarterTime;\n  return Math.round(quarters * this._getPPQ());\n};\n/**\n *  Return the time in seconds.\n *  @return  {Seconds}\n */\n\n\nTone.Time.prototype.toSeconds = function () {\n  return this.valueOf();\n};\n/**\n *  Return the value as a midi note.\n *  @return  {Midi}\n */\n\n\nTone.Time.prototype.toMidi = function () {\n  return Tone.Frequency.ftom(this.toFrequency());\n};\n\nexport default Tone.Time;","import Tone from \"../core/Tone\";\nimport \"../type/Time\";\n/**\n *  @class Tone.TransportTime is a the time along the Transport's\n *         timeline. It is similar to Tone.Time, but instead of evaluating\n *         against the AudioContext's clock, it is evaluated against\n *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n *  @constructor\n *  @param  {Time}  val    The time value as a number or string\n *  @param  {String=}  units  Unit values\n *  @extends {Tone.Time}\n */\n\nTone.TransportTime = function (val, units) {\n  if (this instanceof Tone.TransportTime) {\n    Tone.Time.call(this, val, units);\n  } else {\n    return new Tone.TransportTime(val, units);\n  }\n};\n\nTone.extend(Tone.TransportTime, Tone.Time);\n/**\n * Return the current time in whichever context is relevant\n * @type {Number}\n * @private\n */\n\nTone.TransportTime.prototype._now = function () {\n  return Tone.Transport.seconds;\n};\n\nexport default Tone.TransportTime;","import Tone from \"../core/Tone\";\n/**\n *  @class Tone.Emitter gives classes which extend it\n *         the ability to listen for and emit events.\n *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n *         MIT (c) 2011 Jerome Etienne.\n *\n *  @extends {Tone}\n */\n\nTone.Emitter = function () {\n  Tone.call(this);\n  /**\n   *  Contains all of the events.\n   *  @private\n   *  @type  {Object}\n   */\n\n  this._events = {};\n};\n\nTone.extend(Tone.Emitter);\n/**\n *  Bind a callback to a specific event.\n *  @param  {String}    event     The name of the event to listen for.\n *  @param  {Function}  callback  The callback to invoke when the\n *                                event is emitted\n *  @return  {Tone.Emitter}    this\n */\n\nTone.Emitter.prototype.on = function (event, callback) {\n  //split the event\n  var events = event.split(/\\W+/);\n\n  for (var i = 0; i < events.length; i++) {\n    var eventName = events[i];\n\n    if (!this._events.hasOwnProperty(eventName)) {\n      this._events[eventName] = [];\n    }\n\n    this._events[eventName].push(callback);\n  }\n\n  return this;\n};\n/**\n *  Bind a callback which is only invoked once\n *  @param  {String}    event     The name of the event to listen for.\n *  @param  {Function}  callback  The callback to invoke when the\n *                                event is emitted\n *  @return  {Tone.Emitter}    this\n */\n\n\nTone.Emitter.prototype.once = function (event, callback) {\n  var boundCallback = function () {\n    //invoke the callback\n    callback.apply(this, arguments);\n    this.off(event, boundCallback);\n  }.bind(this);\n\n  this.on(event, boundCallback);\n  return this;\n};\n/**\n *  Remove the event listener.\n *  @param  {String}    event     The event to stop listening to.\n *  @param  {Function=}  callback  The callback which was bound to\n *                                the event with Tone.Emitter.on.\n *                                If no callback is given, all callbacks\n *                                events are removed.\n *  @return  {Tone.Emitter}    this\n */\n\n\nTone.Emitter.prototype.off = function (event, callback) {\n  var events = event.split(/\\W+/);\n\n  for (var ev = 0; ev < events.length; ev++) {\n    event = events[ev];\n\n    if (this._events.hasOwnProperty(event)) {\n      if (Tone.isUndef(callback)) {\n        this._events[event] = [];\n      } else {\n        var eventList = this._events[event];\n\n        for (var i = 0; i < eventList.length; i++) {\n          if (eventList[i] === callback) {\n            eventList.splice(i, 1);\n          }\n        }\n      }\n    }\n  }\n\n  return this;\n};\n/**\n *  Invoke all of the callbacks bound to the event\n *  with any arguments passed in.\n *  @param  {String}  event  The name of the event.\n *  @param {...*} args The arguments to pass to the functions listening.\n *  @return  {Tone.Emitter}  this\n */\n\n\nTone.Emitter.prototype.emit = function (event) {\n  if (this._events) {\n    var args = Array.apply(null, arguments).slice(1);\n\n    if (this._events.hasOwnProperty(event)) {\n      var eventList = this._events[event].slice(0);\n\n      for (var i = 0, len = eventList.length; i < len; i++) {\n        eventList[i].apply(this, args);\n      }\n    }\n  }\n\n  return this;\n};\n/**\n *  Add Emitter functions (on/off/emit) to the object\n *  @param  {Object|Function}  object  The object or class to extend.\n *  @returns {Tone.Emitter}\n */\n\n\nTone.Emitter.mixin = function (object) {\n  var functions = [\"on\", \"once\", \"off\", \"emit\"];\n  object._events = {};\n\n  for (var i = 0; i < functions.length; i++) {\n    var func = functions[i];\n    var emitterFunc = Tone.Emitter.prototype[func];\n    object[func] = emitterFunc;\n  }\n\n  return Tone.Emitter;\n};\n/**\n *  Clean up\n *  @return  {Tone.Emitter}  this\n */\n\n\nTone.Emitter.prototype.dispose = function () {\n  Tone.prototype.dispose.call(this);\n  this._events = null;\n  return this;\n};\n\nexport default Tone.Emitter;","import Tone from \"../core/Tone\";\n/**\n *  @class A Timeline class for scheduling and maintaining state\n *         along a timeline. All events must have a \"time\" property.\n *         Internally, events are stored in time order for fast\n *         retrieval.\n *  @extends {Tone}\n *  @param {Positive} [memory=Infinity] The number of previous events that are retained.\n */\n\nTone.Timeline = function () {\n  var options = Tone.defaults(arguments, [\"memory\"], Tone.Timeline);\n  Tone.call(this);\n  /**\n   *  The array of scheduled timeline events\n   *  @type  {Array}\n   *  @private\n   */\n\n  this._timeline = [];\n  /**\n   *  The memory of the timeline, i.e.\n   *  how many events in the past it will retain\n   *  @type {Positive}\n   */\n\n  this.memory = options.memory;\n};\n\nTone.extend(Tone.Timeline);\n/**\n *  the default parameters\n *  @static\n *  @const\n */\n\nTone.Timeline.defaults = {\n  \"memory\": Infinity\n};\n/**\n *  The number of items in the timeline.\n *  @type {Number}\n *  @memberOf Tone.Timeline#\n *  @name length\n *  @readOnly\n */\n\nObject.defineProperty(Tone.Timeline.prototype, \"length\", {\n  get: function get() {\n    return this._timeline.length;\n  }\n});\n/**\n *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n *  @param  {Object}  event  The event object to insert into the\n *                           timeline.\n *  @returns {Tone.Timeline} this\n */\n\nTone.Timeline.prototype.add = function (event) {\n  //the event needs to have a time attribute\n  if (Tone.isUndef(event.time)) {\n    throw new Error(\"Tone.Timeline: events must have a time attribute\");\n  }\n\n  event.time = event.time.valueOf();\n\n  var index = this._search(event.time);\n\n  this._timeline.splice(index + 1, 0, event); //if the length is more than the memory, remove the previous ones\n\n\n  if (this.length > this.memory) {\n    var diff = this.length - this.memory;\n\n    this._timeline.splice(0, diff);\n  }\n\n  return this;\n};\n/**\n *  Remove an event from the timeline.\n *  @param  {Object}  event  The event object to remove from the list.\n *  @returns {Tone.Timeline} this\n */\n\n\nTone.Timeline.prototype.remove = function (event) {\n  var index = this._timeline.indexOf(event);\n\n  if (index !== -1) {\n    this._timeline.splice(index, 1);\n  }\n\n  return this;\n};\n/**\n *  Get the nearest event whose time is less than or equal to the given time.\n *  @param  {Number}  time  The time to query.\n *  @param  {String}  comparator Which value in the object to compare\n *  @returns {Object} The event object set after that time.\n */\n\n\nTone.Timeline.prototype.get = function (time, comparator) {\n  comparator = Tone.defaultArg(comparator, \"time\");\n\n  var index = this._search(time, comparator);\n\n  if (index !== -1) {\n    return this._timeline[index];\n  } else {\n    return null;\n  }\n};\n/**\n *  Return the first event in the timeline without removing it\n *  @returns {Object} The first event object\n */\n\n\nTone.Timeline.prototype.peek = function () {\n  return this._timeline[0];\n};\n/**\n *  Return the first event in the timeline and remove it\n *  @returns {Object} The first event object\n */\n\n\nTone.Timeline.prototype.shift = function () {\n  return this._timeline.shift();\n};\n/**\n *  Get the event which is scheduled after the given time.\n *  @param  {Number}  time  The time to query.\n *  @param  {String}  comparator Which value in the object to compare\n *  @returns {Object} The event object after the given time\n */\n\n\nTone.Timeline.prototype.getAfter = function (time, comparator) {\n  comparator = Tone.defaultArg(comparator, \"time\");\n\n  var index = this._search(time, comparator);\n\n  if (index + 1 < this._timeline.length) {\n    return this._timeline[index + 1];\n  } else {\n    return null;\n  }\n};\n/**\n *  Get the event before the event at the given time.\n *  @param  {Number}  time  The time to query.\n *  @param  {String}  comparator Which value in the object to compare\n *  @returns {Object} The event object before the given time\n */\n\n\nTone.Timeline.prototype.getBefore = function (time, comparator) {\n  comparator = Tone.defaultArg(comparator, \"time\");\n  var len = this._timeline.length; //if it's after the last item, return the last item\n\n  if (len > 0 && this._timeline[len - 1][comparator] < time) {\n    return this._timeline[len - 1];\n  }\n\n  var index = this._search(time, comparator);\n\n  if (index - 1 >= 0) {\n    return this._timeline[index - 1];\n  } else {\n    return null;\n  }\n};\n/**\n *  Cancel events after the given time\n *  @param  {Number}  time  The time to query.\n *  @returns {Tone.Timeline} this\n */\n\n\nTone.Timeline.prototype.cancel = function (after) {\n  if (this._timeline.length > 1) {\n    var index = this._search(after);\n\n    if (index >= 0) {\n      if (this._timeline[index].time === after) {\n        //get the first item with that time\n        for (var i = index; i >= 0; i--) {\n          if (this._timeline[i].time === after) {\n            index = i;\n          } else {\n            break;\n          }\n        }\n\n        this._timeline = this._timeline.slice(0, index);\n      } else {\n        this._timeline = this._timeline.slice(0, index + 1);\n      }\n    } else {\n      this._timeline = [];\n    }\n  } else if (this._timeline.length === 1) {\n    //the first item's time\n    if (this._timeline[0].time >= after) {\n      this._timeline = [];\n    }\n  }\n\n  return this;\n};\n/**\n *  Cancel events before or equal to the given time.\n *  @param  {Number}  time  The time to cancel before.\n *  @returns {Tone.Timeline} this\n */\n\n\nTone.Timeline.prototype.cancelBefore = function (time) {\n  var index = this._search(time);\n\n  if (index >= 0) {\n    this._timeline = this._timeline.slice(index + 1);\n  }\n\n  return this;\n};\n/**\n * Returns the previous event if there is one. null otherwise\n * @param  {Object} event The event to find the previous one of\n * @return {Object}       The event right before the given event\n */\n\n\nTone.Timeline.prototype.previousEvent = function (event) {\n  var index = this._timeline.indexOf(event);\n\n  if (index > 0) {\n    return this._timeline[index - 1];\n  } else {\n    return null;\n  }\n};\n/**\n *  Does a binary search on the timeline array and returns the\n *  nearest event index whose time is after or equal to the given time.\n *  If a time is searched before the first index in the timeline, -1 is returned.\n *  If the time is after the end, the index of the last item is returned.\n *  @param  {Number}  time\n *  @param  {String}  comparator Which value in the object to compare\n *  @return  {Number} the index in the timeline array\n *  @private\n */\n\n\nTone.Timeline.prototype._search = function (time, comparator) {\n  if (this._timeline.length === 0) {\n    return -1;\n  }\n\n  comparator = Tone.defaultArg(comparator, \"time\");\n  var beginning = 0;\n  var len = this._timeline.length;\n  var end = len;\n\n  if (len > 0 && this._timeline[len - 1][comparator] <= time) {\n    return len - 1;\n  }\n\n  while (beginning < end) {\n    // calculate the midpoint for roughly equal partition\n    var midPoint = Math.floor(beginning + (end - beginning) / 2);\n    var event = this._timeline[midPoint];\n    var nextEvent = this._timeline[midPoint + 1];\n\n    if (event[comparator] === time) {\n      //choose the last one that has the same time\n      for (var i = midPoint; i < this._timeline.length; i++) {\n        var testEvent = this._timeline[i];\n\n        if (testEvent[comparator] === time) {\n          midPoint = i;\n        }\n      }\n\n      return midPoint;\n    } else if (event[comparator] < time && nextEvent[comparator] > time) {\n      return midPoint;\n    } else if (event[comparator] > time) {\n      //search lower\n      end = midPoint;\n    } else {\n      //search upper\n      beginning = midPoint + 1;\n    }\n  }\n\n  return -1;\n};\n/**\n *  Internal iterator. Applies extra safety checks for\n *  removing items from the array.\n *  @param  {Function}  callback\n *  @param  {Number=}    lowerBound\n *  @param  {Number=}    upperBound\n *  @private\n */\n\n\nTone.Timeline.prototype._iterate = function (callback, lowerBound, upperBound) {\n  lowerBound = Tone.defaultArg(lowerBound, 0);\n  upperBound = Tone.defaultArg(upperBound, this._timeline.length - 1);\n\n  this._timeline.slice(lowerBound, upperBound + 1).forEach(function (event) {\n    callback.call(this, event);\n  }.bind(this));\n};\n/**\n *  Iterate over everything in the array\n *  @param  {Function}  callback The callback to invoke with every item\n *  @returns {Tone.Timeline} this\n */\n\n\nTone.Timeline.prototype.forEach = function (callback) {\n  this._iterate(callback);\n\n  return this;\n};\n/**\n *  Iterate over everything in the array at or before the given time.\n *  @param  {Number}  time The time to check if items are before\n *  @param  {Function}  callback The callback to invoke with every item\n *  @returns {Tone.Timeline} this\n */\n\n\nTone.Timeline.prototype.forEachBefore = function (time, callback) {\n  //iterate over the items in reverse so that removing an item doesn't break things\n  var upperBound = this._search(time);\n\n  if (upperBound !== -1) {\n    this._iterate(callback, 0, upperBound);\n  }\n\n  return this;\n};\n/**\n *  Iterate over everything in the array after the given time.\n *  @param  {Number}  time The time to check if items are before\n *  @param  {Function}  callback The callback to invoke with every item\n *  @returns {Tone.Timeline} this\n */\n\n\nTone.Timeline.prototype.forEachAfter = function (time, callback) {\n  //iterate over the items in reverse so that removing an item doesn't break things\n  var lowerBound = this._search(time);\n\n  this._iterate(callback, lowerBound + 1);\n\n  return this;\n};\n/**\n *  Iterate over everything in the array between the startTime and endTime. \n *  The timerange is inclusive of the startTime, but exclusive of the endTime. \n *  range = [startTime, endTime). \n *  @param  {Number}  startTime The time to check if items are before\n *  @param  {Number}  endTime The end of the test interval. \n *  @param  {Function}  callback The callback to invoke with every item\n *  @returns {Tone.Timeline} this\n */\n\n\nTone.Timeline.prototype.forEachBetween = function (startTime, endTime, callback) {\n  var lowerBound = this._search(startTime);\n\n  var upperBound = this._search(endTime);\n\n  if (lowerBound !== -1 && upperBound !== -1) {\n    if (this._timeline[lowerBound].time !== startTime) {\n      lowerBound += 1;\n    } //exclusive of the end time\n\n\n    if (this._timeline[upperBound].time === endTime) {\n      upperBound -= 1;\n    }\n\n    this._iterate(callback, lowerBound, upperBound);\n  } else if (lowerBound === -1) {\n    this._iterate(callback, 0, upperBound);\n  }\n\n  return this;\n};\n/**\n *  Iterate over everything in the array at or after the given time. Similar to\n *  forEachAfter, but includes the item(s) at the given time.\n *  @param  {Number}  time The time to check if items are before\n *  @param  {Function}  callback The callback to invoke with every item\n *  @returns {Tone.Timeline} this\n */\n\n\nTone.Timeline.prototype.forEachFrom = function (time, callback) {\n  //iterate over the items in reverse so that removing an item doesn't break things\n  var lowerBound = this._search(time); //work backwards until the event time is less than time\n\n\n  while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n    lowerBound--;\n  }\n\n  this._iterate(callback, lowerBound + 1);\n\n  return this;\n};\n/**\n *  Iterate over everything in the array at the given time\n *  @param  {Number}  time The time to check if items are before\n *  @param  {Function}  callback The callback to invoke with every item\n *  @returns {Tone.Timeline} this\n */\n\n\nTone.Timeline.prototype.forEachAtTime = function (time, callback) {\n  //iterate over the items in reverse so that removing an item doesn't break things\n  var upperBound = this._search(time);\n\n  if (upperBound !== -1) {\n    this._iterate(function (event) {\n      if (event.time === time) {\n        callback.call(this, event);\n      }\n    }, 0, upperBound);\n  }\n\n  return this;\n};\n/**\n *  Clean up.\n *  @return  {Tone.Timeline}  this\n */\n\n\nTone.Timeline.prototype.dispose = function () {\n  Tone.prototype.dispose.call(this);\n  this._timeline = null;\n  return this;\n};\n\nexport default Tone.Timeline;","import Tone from \"../core/Tone\";\n\nif (Tone.supported) {\n  if (!Tone.global.hasOwnProperty(\"OfflineAudioContext\") && Tone.global.hasOwnProperty(\"webkitOfflineAudioContext\")) {\n    Tone.global.OfflineAudioContext = Tone.global.webkitOfflineAudioContext;\n  } //returns promise?\n\n\n  var context = new OfflineAudioContext(1, 1, 44100);\n  var ret = context.startRendering();\n\n  if (!(ret && Tone.isFunction(ret.then))) {\n    OfflineAudioContext.prototype._native_startRendering = OfflineAudioContext.prototype.startRendering;\n\n    OfflineAudioContext.prototype.startRendering = function () {\n      return new Promise(function (done) {\n        this.oncomplete = function (e) {\n          done(e.renderedBuffer);\n        };\n\n        this._native_startRendering();\n      }.bind(this));\n    };\n  }\n}","import Tone from \"../core/Tone\";\nimport \"../shim/OfflineAudioContext\";\n\nif (Tone.supported) {\n  if (!Tone.global.hasOwnProperty(\"AudioContext\") && Tone.global.hasOwnProperty(\"webkitAudioContext\")) {\n    Tone.global.AudioContext = Tone.global.webkitAudioContext;\n  } //not functionally equivalent, but only an API placeholder\n\n\n  if (!AudioContext.prototype.close) {\n    AudioContext.prototype.close = function () {\n      if (Tone.isFunction(this.suspend)) {\n        this.suspend();\n      }\n\n      return Promise.resolve();\n    };\n  } //not functionally equivalent\n\n\n  if (!AudioContext.prototype.resume) {\n    AudioContext.prototype.resume = function () {\n      //play some silent audio to jumpstart the context\n      var buffer = this.createBuffer(1, 1, this.sampleRate);\n      var source = this.createBufferSource();\n      source.buffer = buffer;\n      source.connect(this.destination);\n      source.start(0);\n      return Promise.resolve();\n    };\n  } //createGain\n\n\n  if (!AudioContext.prototype.createGain && AudioContext.prototype.createGainNode) {\n    AudioContext.prototype.createGain = AudioContext.prototype.createGainNode;\n  } //createDelay\n\n\n  if (!AudioContext.prototype.createDelay && AudioContext.prototype.createDelayNode) {\n    AudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;\n  } //test decodeAudioData returns a promise\n  // https://github.com/mohayonao/web-audio-api-shim/blob/master/src/AudioContext.js\n  // MIT License (c) 2015 @mohayonao\n\n\n  var decodeAudioDataPromise = false;\n  var offlineContext = new OfflineAudioContext(1, 1, 44100);\n  var audioData = new Uint32Array([1179011410, 48, 1163280727, 544501094, 16, 131073, 44100, 176400, 1048580, 1635017060, 8, 0, 0, 0, 0]).buffer;\n\n  try {\n    var ret = offlineContext.decodeAudioData(audioData);\n\n    if (ret && Tone.isFunction(ret.then)) {\n      decodeAudioDataPromise = true;\n    }\n  } catch (e) {\n    decodeAudioDataPromise = false;\n  }\n\n  if (!decodeAudioDataPromise) {\n    AudioContext.prototype._native_decodeAudioData = AudioContext.prototype.decodeAudioData;\n\n    AudioContext.prototype.decodeAudioData = function (audioData) {\n      return new Promise(function (success, error) {\n        this._native_decodeAudioData(audioData, success, error);\n      }.bind(this));\n    };\n  }\n}","import Tone from \"../core/Tone\";\nimport \"../core/Emitter\";\nimport \"../core/Timeline\";\nimport \"../shim/AudioContext\";\nvar AudioContextProperties = [\"baseLatency\", \"destination\", \"currentTime\", \"sampleRate\", \"listener\", \"state\"];\nvar AudioContextMethods = [\"suspend\", \"close\", \"resume\", \"getOutputTimestamp\", \"createMediaElementSource\", \"createMediaStreamSource\", \"createMediaStreamDestination\", \"createBuffer\", \"decodeAudioData\", \"createBufferSource\", \"createConstantSource\", \"createGain\", \"createDelay\", \"createBiquadFilter\", \"createIIRFilter\", \"createWaveShaper\", \"createPanner\", \"createConvolver\", \"createDynamicsCompressor\", \"createAnalyser\", \"createScriptProcessor\", \"createStereoPanner\", \"createOscillator\", \"createPeriodicWave\", \"createChannelSplitter\", \"createChannelMerger\", \"audioWorklet\"];\n/**\n *  @class Wrapper around the native AudioContext.\n *  @extends {Tone.Emitter}\n *  @param {AudioContext=} context optionally pass in a context\n */\n\nTone.Context = function () {\n  Tone.Emitter.call(this);\n  var options = Tone.defaults(arguments, [\"context\"], Tone.Context);\n\n  if (!options.context) {\n    options.context = new Tone.global.AudioContext();\n\n    if (!options.context) {\n      throw new Error(\"could not create AudioContext. Possibly too many AudioContexts running already.\");\n    }\n  }\n\n  this._context = options.context; //make sure it's not an AudioContext wrapper\n\n  while (this._context.rawContext) {\n    this._context = this._context.rawContext;\n  } // extend all of the properties\n\n\n  AudioContextProperties.forEach(function (prop) {\n    this._defineProperty(this._context, prop);\n  }.bind(this)); // extend all of the methods\n\n  AudioContextMethods.forEach(function (method) {\n    this._defineMethod(this._context, method);\n  }.bind(this));\n  /**\n   *  The default latency hint\n   *  @type  {String}\n   *  @private\n   */\n\n  this._latencyHint = options.latencyHint;\n  /**\n   *  An object containing all of the constants AudioBufferSourceNodes\n   *  @type  {Object}\n   *  @private\n   */\n\n  this._constants = {}; ///////////////////////////////////////////////////////////////////////\n  // WORKER\n  ///////////////////////////////////////////////////////////////////////\n\n  /**\n   *  The amount of time events are scheduled\n   *  into the future\n   *  @type  {Number}\n   */\n\n  this.lookAhead = options.lookAhead;\n  /**\n   *  A reference to the actual computed update interval\n   *  @type  {Number}\n   *  @private\n   */\n\n  this._computedUpdateInterval = 0;\n  /**\n   *  A reliable callback method\n   *  @private\n   *  @type  {Ticker}\n   */\n\n  this._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval); ///////////////////////////////////////////////////////////////////////\n  // TIMEOUTS\n  ///////////////////////////////////////////////////////////////////////\n\n  /**\n   *  All of the setTimeout events.\n   *  @type  {Tone.Timeline}\n   *  @private\n   */\n\n  this._timeouts = new Tone.Timeline();\n  /**\n   *  The timeout id counter\n   *  @private\n   *  @type {Number}\n   */\n\n  this._timeoutIds = 0;\n  this.on(\"tick\", this._timeoutLoop.bind(this)); //forward state change events\n\n  this._context.onstatechange = function (e) {\n    this.emit(\"statechange\", e);\n  }.bind(this);\n};\n\nTone.extend(Tone.Context, Tone.Emitter);\nTone.Emitter.mixin(Tone.Context);\n/**\n * defaults\n * @static\n * @type {Object}\n */\n\nTone.Context.defaults = {\n  \"clockSource\": \"worker\",\n  \"latencyHint\": \"interactive\",\n  \"lookAhead\": 0.1,\n  \"updateInterval\": 0.03\n};\n/**\n * Is an instanceof Tone.Context\n * @type {Boolean}\n */\n\nTone.Context.prototype.isContext = true;\n/**\n *  Define a property on this Tone.Context.\n *  This is used to extend the native AudioContext\n *  @param  {AudioContext}  context\n *  @param  {String}  prop\n *  @private\n */\n\nTone.Context.prototype._defineProperty = function (context, prop) {\n  if (Tone.isUndef(this[prop])) {\n    Object.defineProperty(this, prop, {\n      \"get\": function get() {\n        return context[prop];\n      },\n      \"set\": function set(val) {\n        context[prop] = val;\n      }\n    });\n  }\n};\n/**\n *  Define a method on this Tone.Context.\n *  This is used to extend the native AudioContext\n *  @param  {AudioContext}  context\n *  @param  {String}  prop\n *  @private\n */\n\n\nTone.Context.prototype._defineMethod = function (context, prop) {\n  if (Tone.isUndef(this[prop])) {\n    Object.defineProperty(this, prop, {\n      \"get\": function get() {\n        return context[prop].bind(context);\n      }\n    });\n  }\n};\n/**\n *  The current audio context time\n *  @return  {Number}\n */\n\n\nTone.Context.prototype.now = function () {\n  return this._context.currentTime + this.lookAhead;\n};\n/**\n *  The audio output destination. Alias for Tone.Master\n *  @readyOnly\n *  @type  {Tone.Master}\n */\n\n\nObject.defineProperty(Tone.Context.prototype, \"destination\", {\n  \"get\": function get() {\n    if (!this.master) {\n      return this._context.destination;\n    } else {\n      return this.master;\n    }\n  }\n});\n/**\n *  Starts the audio context from a suspended state. This is required\n *  to initially start the AudioContext.\n *  @return  {Promise}\n */\n\nTone.Context.prototype.resume = function () {\n  if (this._context.state === \"suspended\" && this._context instanceof AudioContext) {\n    return this._context.resume();\n  } else {\n    return Promise.resolve();\n  }\n};\n/**\n *  Promise which is invoked when the context is running.\n *  Tries to resume the context if it's not started.\n *  @return  {Promise}\n */\n\n\nTone.Context.prototype.close = function () {\n  var closePromise = Promise.resolve(); //never close the global Tone.Context\n\n  if (this !== Tone.global.TONE_AUDIO_CONTEXT) {\n    closePromise = this.rawContext.close();\n  }\n\n  return closePromise.then(function () {\n    Tone.Context.emit(\"close\", this);\n  }.bind(this));\n};\n/**\n *  Generate a looped buffer at some constant value.\n *  @param  {Number}  val\n *  @return  {BufferSourceNode}\n */\n\n\nTone.Context.prototype.getConstant = function (val) {\n  if (this._constants[val]) {\n    return this._constants[val];\n  } else {\n    var buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\n    var arr = buffer.getChannelData(0);\n\n    for (var i = 0; i < arr.length; i++) {\n      arr[i] = val;\n    }\n\n    var constant = this._context.createBufferSource();\n\n    constant.channelCount = 1;\n    constant.channelCountMode = \"explicit\";\n    constant.buffer = buffer;\n    constant.loop = true;\n    constant.start(0);\n    this._constants[val] = constant;\n    return constant;\n  }\n};\n/**\n *  The private loop which keeps track of the context scheduled timeouts\n *  Is invoked from the clock source\n *  @private\n */\n\n\nTone.Context.prototype._timeoutLoop = function () {\n  var now = this.now();\n\n  while (this._timeouts && this._timeouts.length && this._timeouts.peek().time <= now) {\n    this._timeouts.shift().callback();\n  }\n};\n/**\n *  A setTimeout which is gaurenteed by the clock source.\n *  Also runs in the offline context.\n *  @param  {Function}  fn       The callback to invoke\n *  @param  {Seconds}    timeout  The timeout in seconds\n *  @returns {Number} ID to use when invoking Tone.Context.clearTimeout\n */\n\n\nTone.Context.prototype.setTimeout = function (fn, timeout) {\n  this._timeoutIds++;\n  var now = this.now();\n\n  this._timeouts.add({\n    \"callback\": fn,\n    \"time\": now + timeout,\n    \"id\": this._timeoutIds\n  });\n\n  return this._timeoutIds;\n};\n/**\n *  Clears a previously scheduled timeout with Tone.context.setTimeout\n *  @param  {Number}  id  The ID returned from setTimeout\n *  @return  {Tone.Context}  this\n */\n\n\nTone.Context.prototype.clearTimeout = function (id) {\n  this._timeouts.forEach(function (event) {\n    if (event.id === id) {\n      this.remove(event);\n    }\n  });\n\n  return this;\n};\n/**\n *  How often the Web Worker callback is invoked.\n *  This number corresponds to how responsive the scheduling\n *  can be. Context.updateInterval + Context.lookAhead gives you the\n *  total latency between scheduling an event and hearing it.\n *  @type {Number}\n *  @memberOf Tone.Context#\n *  @name updateInterval\n */\n\n\nObject.defineProperty(Tone.Context.prototype, \"updateInterval\", {\n  \"get\": function get() {\n    return this._ticker.updateInterval;\n  },\n  \"set\": function set(interval) {\n    this._ticker.updateInterval = interval;\n  }\n});\n/**\n *  The unwrapped AudioContext.\n *  @type {AudioContext}\n *  @memberOf Tone.Context#\n *  @name rawContext\n *  @readOnly\n */\n\nObject.defineProperty(Tone.Context.prototype, \"rawContext\", {\n  \"get\": function get() {\n    return this._context;\n  }\n});\n/**\n *  What the source of the clock is, either \"worker\" (Web Worker [default]),\n *  \"timeout\" (setTimeout), or \"offline\" (none).\n *  @type {String}\n *  @memberOf Tone.Context#\n *  @name clockSource\n */\n\nObject.defineProperty(Tone.Context.prototype, \"clockSource\", {\n  \"get\": function get() {\n    return this._ticker.type;\n  },\n  \"set\": function set(type) {\n    this._ticker.type = type;\n  }\n});\n/**\n *  The type of playback, which affects tradeoffs between audio\n *  output latency and responsiveness.\n *\n *  In addition to setting the value in seconds, the latencyHint also\n *  accepts the strings \"interactive\" (prioritizes low latency),\n *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n *  latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n *  @type {String|Seconds}\n *  @memberOf Tone.Context#\n *  @name latencyHint\n *  @example\n * //set the lookAhead to 0.3 seconds\n * Tone.context.latencyHint = 0.3;\n */\n\nObject.defineProperty(Tone.Context.prototype, \"latencyHint\", {\n  \"get\": function get() {\n    return this._latencyHint;\n  },\n  \"set\": function set(hint) {\n    var lookAhead = hint;\n    this._latencyHint = hint;\n\n    if (Tone.isString(hint)) {\n      switch (hint) {\n        case \"interactive\":\n          lookAhead = 0.1;\n          this._context.latencyHint = hint;\n          break;\n\n        case \"playback\":\n          lookAhead = 0.8;\n          this._context.latencyHint = hint;\n          break;\n\n        case \"balanced\":\n          lookAhead = 0.25;\n          this._context.latencyHint = hint;\n          break;\n\n        case \"fastest\":\n          this._context.latencyHint = \"interactive\";\n          lookAhead = 0.01;\n          break;\n      }\n    }\n\n    this.lookAhead = lookAhead;\n    this.updateInterval = lookAhead / 3;\n  }\n});\n/**\n *  Unlike other dispose methods, this returns a Promise\n *  which executes when the context is closed and disposed\n *  @returns {Promise} this\n */\n\nTone.Context.prototype.dispose = function () {\n  return this.close().then(function () {\n    Tone.Emitter.prototype.dispose.call(this);\n\n    this._ticker.dispose();\n\n    this._ticker = null;\n\n    this._timeouts.dispose();\n\n    this._timeouts = null;\n\n    for (var con in this._constants) {\n      this._constants[con].disconnect();\n    }\n\n    this._constants = null;\n  }.bind(this));\n};\n/**\n * @class A class which provides a reliable callback using either\n *        a Web Worker, or if that isn't supported, falls back to setTimeout.\n * @private\n */\n\n\nvar Ticker = function Ticker(callback, type, updateInterval) {\n  /**\n   * Either \"worker\" or \"timeout\"\n   * @type {String}\n   * @private\n   */\n  this._type = type;\n  /**\n   * The update interval of the worker\n   * @private\n   * @type {Number}\n   */\n\n  this._updateInterval = updateInterval;\n  /**\n   * The callback to invoke at regular intervals\n   * @type {Function}\n   * @private\n   */\n\n  this._callback = Tone.defaultArg(callback, Tone.noOp); //create the clock source for the first time\n\n  this._createClock();\n};\n/**\n * The possible ticker types\n * @private\n * @type {Object}\n */\n\n\nTicker.Type = {\n  \"Worker\": \"worker\",\n  \"Timeout\": \"timeout\",\n  \"Offline\": \"offline\"\n};\n/**\n *  Generate a web worker\n *  @return  {WebWorker}\n *  @private\n */\n\nTicker.prototype._createWorker = function () {\n  //URL Shim\n  Tone.global.URL = Tone.global.URL || Tone.global.webkitURL;\n  var blob = new Blob([//the initial timeout time\n  \"var timeoutTime = \" + (this._updateInterval * 1000).toFixed(1) + \";\" + //onmessage callback\n  \"self.onmessage = function(msg){\" + \"\ttimeoutTime = parseInt(msg.data);\" + \"};\" + //the tick function which posts a message\n  //and schedules a new tick\n  \"function tick(){\" + \"\tsetTimeout(tick, timeoutTime);\" + \"\tself.postMessage('tick');\" + \"}\" + //call tick initially\n  \"tick();\"]);\n  var blobUrl = URL.createObjectURL(blob);\n  var worker = new Worker(blobUrl);\n  worker.onmessage = this._callback.bind(this);\n  this._worker = worker;\n};\n/**\n * Create a timeout loop\n * @private\n */\n\n\nTicker.prototype._createTimeout = function () {\n  this._timeout = setTimeout(function () {\n    this._createTimeout();\n\n    this._callback();\n  }.bind(this), this._updateInterval * 1000);\n};\n/**\n * Create the clock source.\n * @private\n */\n\n\nTicker.prototype._createClock = function () {\n  if (this._type === Ticker.Type.Worker) {\n    try {\n      this._createWorker();\n    } catch (e) {\n      // workers not supported, fallback to timeout\n      this._type = Ticker.Type.Timeout;\n\n      this._createClock();\n    }\n  } else if (this._type === Ticker.Type.Timeout) {\n    this._createTimeout();\n  }\n};\n/**\n * @memberOf Ticker#\n * @type {Number}\n * @name updateInterval\n * @private\n */\n\n\nObject.defineProperty(Ticker.prototype, \"updateInterval\", {\n  \"get\": function get() {\n    return this._updateInterval;\n  },\n  \"set\": function set(interval) {\n    this._updateInterval = Math.max(interval, 128 / 44100);\n\n    if (this._type === Ticker.Type.Worker) {\n      this._worker.postMessage(Math.max(interval * 1000, 1));\n    }\n  }\n});\n/**\n * The type of the ticker, either a worker or a timeout\n * @memberOf Ticker#\n * @type {Number}\n * @name type\n * @private\n */\n\nObject.defineProperty(Ticker.prototype, \"type\", {\n  \"get\": function get() {\n    return this._type;\n  },\n  \"set\": function set(type) {\n    this._disposeClock();\n\n    this._type = type;\n\n    this._createClock();\n  }\n});\n/**\n * Clean up the current clock source\n * @private\n */\n\nTicker.prototype._disposeClock = function () {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n    this._timeout = null;\n  }\n\n  if (this._worker) {\n    this._worker.terminate();\n\n    this._worker.onmessage = null;\n    this._worker = null;\n  }\n};\n/**\n * Clean up\n * @private\n */\n\n\nTicker.prototype.dispose = function () {\n  this._disposeClock();\n\n  this._callback = null;\n}; // set the audio context initially, and if one is not already created\n\n\nif (Tone.supported && !Tone.initialized) {\n  if (!Tone.global.TONE_AUDIO_CONTEXT) {\n    Tone.global.TONE_AUDIO_CONTEXT = new Tone.Context();\n  }\n\n  Tone.context = Tone.global.TONE_AUDIO_CONTEXT; // log on first initialization\n  // allow optional silencing of this log\n\n  if (!Tone.global.TONE_SILENCE_LOGGING) {\n    var prefix = \"v\";\n\n    if (Tone.version === \"dev\") {\n      prefix = \"\";\n    }\n\n    var printString = \" * Tone.js \" + prefix + Tone.version + \" * \"; // eslint-disable-next-line no-console\n\n    console.log(\"%c\" + printString, \"background: #000; color: #fff\");\n  }\n} else if (!Tone.supported && !Tone.global.TONE_SILENCE_LOGGING) {\n  // eslint-disable-next-line no-console\n  console.warn(\"This browser does not support Tone.js\");\n}\n\nexport default Tone.Context;","import Tone from \"../core/Tone\";\nimport \"../type/Time\";\nimport \"../type/Frequency\";\nimport \"../type/TransportTime\";\nimport \"../core/Context\"; ///////////////////////////////////////////////////////////////////////////\n//\tTYPES\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * Units which a value can take on.\n * @enum {String}\n */\n\nTone.Type = {\n  /**\n   *  Default units\n   *  @typedef {Default}\n   */\n  Default: \"number\",\n\n  /**\n   *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n   *\n   *  * Numbers, which will be taken literally as the time (in seconds).\n   *  * Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.\n   *  * TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times\n   *  in the form BARS:QUARTERS:SIXTEENTHS.\n   *  * Frequency, (\"8hz\") is converted to the length of the cycle in seconds.\n   *  * Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as\n   *  \"the current time plus whatever expression follows\".\n   *  * Object, ({\"4n\" : 3, \"8t\" : -1}). The resulting time is equal to the sum of all of the keys multiplied by the values in the object. \n   *  * No Argument, for methods which accept time, no argument will be interpreted as\n   *  \"now\" (i.e. the currentTime).\n   *\n   *  @typedef {Time}\n   */\n  Time: \"time\",\n\n  /**\n   *  Frequency can be described similar to time, except ultimately the\n   *  values are converted to frequency instead of seconds. A number\n   *  is taken literally as the value in hertz. Additionally any of the\n   *  Time encodings can be used. Note names in the form\n   *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n   *  frequency value.\n   *  @typedef {Frequency}\n   */\n  Frequency: \"frequency\",\n\n  /**\n   *  TransportTime describes a position along the Transport's timeline. It is\n   *  similar to Time in that it uses all the same encodings, but TransportTime specifically\n   *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable.\n   *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)\n   *  @typedef {TransportTime}\n   */\n  TransportTime: \"transportTime\",\n\n  /**\n   *  Ticks are the basic subunit of the Transport. They are\n   *  the smallest unit of time that the Transport supports.\n   *  @typedef {Ticks}\n   */\n  Ticks: \"ticks\",\n\n  /**\n   *  Normal values are within the range [0, 1].\n   *  @typedef {NormalRange}\n   */\n  NormalRange: \"normalRange\",\n\n  /**\n   *  AudioRange values are between [-1, 1].\n   *  @typedef {AudioRange}\n   */\n  AudioRange: \"audioRange\",\n\n  /**\n   *  Decibels are a logarithmic unit of measurement which is useful for volume\n   *  because of the logarithmic way that we perceive loudness. 0 decibels\n   *  means no change in volume. -10db is approximately half as loud and 10db\n   *  is twice is loud.\n   *  @typedef {Decibels}\n   */\n  Decibels: \"db\",\n\n  /**\n   *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.\n   *  @typedef {Interval}\n   */\n  Interval: \"interval\",\n\n  /**\n   *  Beats per minute.\n   *  @typedef {BPM}\n   */\n  BPM: \"bpm\",\n\n  /**\n   *  The value must be greater than or equal to 0.\n   *  @typedef {Positive}\n   */\n  Positive: \"positive\",\n\n  /**\n   *  Gain is the ratio between input and output of a signal.\n   *  A gain of 0 is the same as silencing the signal. A gain of\n   *  1, causes no change to the incoming signal.\n   *  @typedef {Gain}\n   */\n  Gain: \"gain\",\n\n  /**\n   *  A cent is a hundredth of a semitone.\n   *  @typedef {Cents}\n   */\n  Cents: \"cents\",\n\n  /**\n   *  Angle between 0 and 360.\n   *  @typedef {Degrees}\n   */\n  Degrees: \"degrees\",\n\n  /**\n   *  A number representing a midi note.\n   *  @typedef {MIDI}\n   */\n  MIDI: \"midi\",\n\n  /**\n   *  A colon-separated representation of time in the form of\n   *  Bars:Beats:Sixteenths.\n   *  @typedef {BarsBeatsSixteenths}\n   */\n  BarsBeatsSixteenths: \"barsBeatsSixteenths\",\n\n  /**\n   *  Sampling is the reduction of a continuous signal to a discrete signal.\n   *  Audio is typically sampled 44100 times per second.\n   *  @typedef {Samples}\n   */\n  Samples: \"samples\",\n\n  /**\n   *  Hertz are a frequency representation defined as one cycle per second.\n   *  @typedef {Hertz}\n   */\n  Hertz: \"hertz\",\n\n  /**\n   *  A frequency represented by a letter name,\n   *  accidental and octave. This system is known as\n   *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).\n   *  @typedef {Note}\n   */\n  Note: \"note\",\n\n  /**\n   *  One millisecond is a thousandth of a second.\n   *  @typedef {Milliseconds}\n   */\n  Milliseconds: \"milliseconds\",\n\n  /**\n   *  Seconds are the time unit of the AudioContext. In the end,\n   *  all values need to be evaluated to seconds.\n   *  @typedef {Seconds}\n   */\n  Seconds: \"seconds\",\n\n  /**\n   *  A string representing a duration relative to a measure.\n   *  * \"4n\" = quarter note\n   *  * \"2m\" = two measures\n   *  * \"8t\" = eighth-note triplet\n   *  @typedef {Notation}\n   */\n  Notation: \"notation\"\n}; ///////////////////////////////////////////////////////////////////////////\n// AUGMENT TONE's PROTOTYPE\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Convert Time into seconds.\n *\n *  Unlike the method which it overrides, this takes into account\n *  transporttime and musical notation.\n *\n *  Time : 1.40\n *  Notation: 4n or 1m or 2t\n *  Now Relative: +3n\n *\n *  @param  {Time} time\n *  @return {Seconds}\n */\n\nTone.prototype.toSeconds = function (time) {\n  if (Tone.isNumber(time)) {\n    return time;\n  } else if (Tone.isUndef(time)) {\n    return this.now();\n  } else if (Tone.isString(time) || Tone.isObject(time)) {\n    return new Tone.Time(time).toSeconds();\n  } else if (time instanceof Tone.TimeBase) {\n    return time.toSeconds();\n  }\n};\n/**\n *  Convert a frequency representation into a number.\n *  @param  {Frequency} freq\n *  @return {Hertz}      the frequency in hertz\n */\n\n\nTone.prototype.toFrequency = function (freq) {\n  if (Tone.isNumber(freq)) {\n    return freq;\n  } else if (Tone.isString(freq) || Tone.isUndef(freq) || Tone.isObject(freq)) {\n    return new Tone.Frequency(freq).valueOf();\n  } else if (freq instanceof Tone.TimeBase) {\n    return freq.toFrequency();\n  }\n};\n/**\n *  Convert a time representation into ticks.\n *  @param  {Time} time\n *  @return {Ticks}  the time in ticks\n */\n\n\nTone.prototype.toTicks = function (time) {\n  if (Tone.isNumber(time) || Tone.isString(time) || Tone.isObject(time)) {\n    return new Tone.TransportTime(time).toTicks();\n  } else if (Tone.isUndef(time)) {\n    return Tone.Transport.ticks;\n  } else if (time instanceof Tone.TimeBase) {\n    return time.toTicks();\n  }\n};\n\nexport default Tone;","import Tone from \"../core/Tone\";\n/**\n *  Makes sure that connect returns the dst node\n *  @private\n */\n\nif (Tone.supported) {\n  var testContext = new OfflineAudioContext(2, 1, 44100);\n  var testSrcNode = testContext.createGain();\n  var testDstNode = testContext.createGain();\n\n  if (testSrcNode.connect(testDstNode) !== testDstNode) {\n    var nativeConnect = AudioNode.prototype.connect;\n\n    AudioNode.prototype.connect = function () {\n      nativeConnect.apply(this, arguments);\n      return arguments[0];\n    };\n  }\n}","import Tone from \"../core/Tone\";\nimport \"../core/Context\";\nimport \"../shim/AudioNode\";\n/**\n *  @class Tone.AudioNode is the base class for classes which process audio.\n *         AudioNodes have inputs and outputs.\n *  @param\t{AudioContext=} context\tThe audio context to use with the class\n *  @extends {Tone}\n */\n\nTone.AudioNode = function () {\n  Tone.call(this); //use the default context if one is not passed in\n\n  var options = Tone.defaults(arguments, [\"context\"], {\n    \"context\": Tone.context\n  });\n  /**\n   * The AudioContext of this instance\n   * @private\n   * @type {AudioContext}\n   */\n\n  this._context = options.context;\n};\n\nTone.extend(Tone.AudioNode);\n/**\n * Get the audio context belonging to this instance.\n * @type {Tone.Context}\n * @memberOf Tone.AudioNode#\n * @name context\n * @readOnly\n */\n\nObject.defineProperty(Tone.AudioNode.prototype, \"context\", {\n  get: function get() {\n    return this._context;\n  }\n});\n/**\n *  Create input and outputs for this object.\n *  @param  {Number}  [input=0]   The number of inputs\n *  @param  {Number}  [outputs=0]  The number of outputs\n *  @return  {Tone.AudioNode}  this\n *  @private\n */\n\nTone.AudioNode.prototype.createInsOuts = function (inputs, outputs) {\n  if (inputs === 1) {\n    this.input = this.context.createGain();\n  } else if (inputs > 1) {\n    this.input = new Array(inputs);\n  }\n\n  if (outputs === 1) {\n    this.output = this.context.createGain();\n  } else if (outputs > 1) {\n    this.output = new Array(outputs);\n  }\n};\n/**\n *  channelCount is the number of channels used when up-mixing and down-mixing\n *  connections to any inputs to the node. The default value is 2 except for\n *  specific nodes where its value is specially determined.\n *\n *  @memberof Tone.AudioNode#\n *  @type {Number}\n *  @name channelCount\n *  @readOnly\n */\n\n\nObject.defineProperty(Tone.AudioNode.prototype, \"channelCount\", {\n  get: function get() {\n    return this.output.channelCount;\n  },\n  set: function set(c) {\n    return this.output.channelCount = c;\n  }\n});\n/**\n *  channelCountMode determines how channels will be counted when up-mixing and\n *  down-mixing connections to any inputs to the node.\n *  The default value is \"max\". This attribute has no effect for nodes with no inputs.\n *  @memberof Tone.AudioNode#\n *  @type {String}\n *  @name channelCountMode\n *  @readOnly\n */\n\nObject.defineProperty(Tone.AudioNode.prototype, \"channelCountMode\", {\n  get: function get() {\n    return this.output.channelCountMode;\n  },\n  set: function set(m) {\n    return this.output.channelCountMode = m;\n  }\n});\n/**\n *  channelInterpretation determines how individual channels will be treated\n *  when up-mixing and down-mixing connections to any inputs to the node.\n *  The default value is \"speakers\".\n *  @memberof Tone.AudioNode#\n *  @type {String}\n *  @name channelInterpretation\n *  @readOnly\n */\n\nObject.defineProperty(Tone.AudioNode.prototype, \"channelInterpretation\", {\n  get: function get() {\n    return this.output.channelInterpretation;\n  },\n  set: function set(i) {\n    return this.output.channelInterpretation = i;\n  }\n});\n/**\n *  The number of inputs feeding into the AudioNode.\n *  For source nodes, this will be 0.\n *  @type {Number}\n *  @name numberOfInputs\n *  @memberof Tone.AudioNode#\n *  @readOnly\n */\n\nObject.defineProperty(Tone.AudioNode.prototype, \"numberOfInputs\", {\n  get: function get() {\n    if (this.input) {\n      if (Tone.isArray(this.input)) {\n        return this.input.length;\n      } else {\n        return 1;\n      }\n    } else {\n      return 0;\n    }\n  }\n});\n/**\n *  The number of outputs coming out of the AudioNode.\n *  @type {Number}\n *  @name numberOfOutputs\n *  @memberof Tone.AudioNode#\n *  @readOnly\n */\n\nObject.defineProperty(Tone.AudioNode.prototype, \"numberOfOutputs\", {\n  get: function get() {\n    if (this.output) {\n      if (Tone.isArray(this.output)) {\n        return this.output.length;\n      } else {\n        return 1;\n      }\n    } else {\n      return 0;\n    }\n  }\n});\n/**\n *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode\n *  @param  {Tone | AudioParam | AudioNode} unit\n *  @param {number} [outputNum=0] optionally which output to connect from\n *  @param {number} [inputNum=0] optionally which input to connect to\n *  @returns {Tone.AudioNode} this\n */\n\nTone.AudioNode.prototype.connect = function (unit, outputNum, inputNum) {\n  if (Tone.isArray(this.output)) {\n    outputNum = Tone.defaultArg(outputNum, 0);\n    this.output[outputNum].connect(unit, 0, inputNum);\n  } else {\n    Tone.connect(this.output, unit, outputNum, inputNum);\n  }\n\n  return this;\n};\n/**\n *  disconnect the output\n *  @param {Number|AudioNode} output Either the output index to disconnect\n *                                   if the output is an array, or the\n *                                   node to disconnect from.\n *  @returns {Tone.AudioNode} this\n */\n\n\nTone.AudioNode.prototype.disconnect = function (destination, outputNum, inputNum) {\n  if (Tone.isArray(this.output)) {\n    outputNum = Tone.defaultArg(outputNum, 0);\n    this.output[outputNum].disconnect(destination, 0, inputNum);\n  } else {\n    Tone.disconnect(this.output, destination, outputNum, inputNum);\n  }\n\n  return this;\n};\n/**\n *  Connect the output of this node to the rest of the nodes in series.\n *  @example\n *  //connect a node to an effect, panVol and then to the master output\n *  node.chain(effect, panVol, Tone.Master);\n *  @param {...(AudioParam|Tone|AudioNode)} nodes\n *  @returns {Tone.AudioNode} this\n */\n\n\nTone.AudioNode.prototype.chain = function () {\n  var args = Array.from(arguments);\n  args.unshift(this);\n  Tone.connectSeries.apply(undefined, args);\n  return this;\n};\n/**\n *  connect the output of this node to the rest of the nodes in parallel.\n *  @param {...(AudioParam|Tone|AudioNode)} nodes\n *  @returns {Tone.AudioNode} this\n */\n\n\nTone.AudioNode.prototype.fan = function () {\n  for (var i = 0; i < arguments.length; i++) {\n    this.connect(arguments[i]);\n  }\n\n  return this;\n};\n/**\n * Dispose and disconnect\n * @return {Tone.AudioNode} this\n */\n\n\nTone.AudioNode.prototype.dispose = function () {\n  if (Tone.isDefined(this.input)) {\n    if (this.input instanceof AudioNode) {\n      this.input.disconnect();\n    }\n\n    this.input = null;\n  }\n\n  if (Tone.isDefined(this.output)) {\n    if (this.output instanceof AudioNode) {\n      this.output.disconnect();\n    }\n\n    this.output = null;\n  }\n\n  this._context = null;\n  return this;\n};\n\nexport default Tone.AudioNode;","import Tone from \"../core/Tone\";\nimport \"../type/Type\";\nimport \"../core/AudioNode\";\nimport \"../core/Timeline\";\n/**\n *  @class Tone.Param wraps the native Web Audio's AudioParam to provide\n *         additional unit conversion functionality. It also\n *         serves as a base-class for classes which have a single,\n *         automatable parameter.\n *  @extends {Tone.AudioNode}\n *  @param  {AudioParam}  param  The parameter to wrap.\n *  @param  {Tone.Type} units The units of the audio param.\n *  @param  {Boolean} convert If the param should be converted.\n */\n\nTone.Param = function () {\n  var options = Tone.defaults(arguments, [\"param\", \"units\", \"convert\"], Tone.Param);\n  Tone.AudioNode.call(this, options);\n  /**\n   *  The native parameter to control\n   *  @type  {AudioParam}\n   *  @private\n   */\n\n  this._param = this.input = options.param;\n  /**\n   *  The units of the parameter\n   *  @type {Tone.Type}\n   */\n\n  this.units = options.units;\n  /**\n   *  If the value should be converted or not\n   *  @type {Boolean}\n   */\n\n  this.convert = options.convert;\n  /**\n   *  True if the signal value is being overridden by\n   *  a connected signal.\n   *  @readOnly\n   *  @type  {boolean}\n   *  @private\n   */\n\n  this.overridden = false;\n  /**\n   * The timeline which tracks all of the automations.\n   * @type {Tone.Timeline}\n   * @private\n   */\n\n  this._events = new Tone.Timeline(1000);\n\n  if (Tone.isDefined(options.value) && this._param) {\n    this.setValueAtTime(options.value, 0);\n  }\n};\n\nTone.extend(Tone.Param, Tone.AudioNode);\n/**\n *  Defaults\n *  @type  {Object}\n *  @const\n */\n\nTone.Param.defaults = {\n  \"units\": Tone.Type.Default,\n  \"convert\": true,\n  \"param\": undefined\n};\n/**\n * The current value of the parameter.\n * @memberOf Tone.Param#\n * @type {Number}\n * @name value\n */\n\nObject.defineProperty(Tone.Param.prototype, \"value\", {\n  get: function get() {\n    var now = this.now();\n    return this._toUnits(this.getValueAtTime(now));\n  },\n  set: function set(value) {\n    this._initialValue = this._fromUnits(value);\n    this.cancelScheduledValues(this.now());\n    this.setValueAtTime(value, this.now());\n  }\n});\n/**\n * The minimum output value of the parameter\n * @memberOf Tone.Param#\n * @type {Number}\n * @name value\n */\n\nObject.defineProperty(Tone.Param.prototype, \"minValue\", {\n  get: function get() {\n    if (this.units === Tone.Type.Time || this.units === Tone.Type.Frequency || this.units === Tone.Type.NormalRange || this.units === Tone.Type.Positive || this.units === Tone.Type.BPM) {\n      return 0;\n    } else if (this.units === Tone.Type.AudioRange) {\n      return -1;\n    } else if (this.units === Tone.Type.Decibels) {\n      return -Infinity;\n    } else {\n      return this._param.minValue;\n    }\n  }\n});\n/**\n * The maximum output value of the parameter\n * @memberOf Tone.Param#\n * @type {Number}\n * @name value\n */\n\nObject.defineProperty(Tone.Param.prototype, \"maxValue\", {\n  get: function get() {\n    if (this.units === Tone.Type.NormalRange || this.units === Tone.Type.AudioRange) {\n      return 1;\n    } else {\n      return this._param.maxValue;\n    }\n  }\n});\n/**\n *  Convert the given value from the type specified by Tone.Param.units\n *  into the destination value (such as Gain or Frequency).\n *  @private\n *  @param  {*} val the value to convert\n *  @return {number}     the number which the value should be set to\n */\n\nTone.Param.prototype._fromUnits = function (val) {\n  if ((this.convert || Tone.isUndef(this.convert)) && !this.overridden) {\n    switch (this.units) {\n      case Tone.Type.Time:\n        return this.toSeconds(val);\n\n      case Tone.Type.Frequency:\n        return this.toFrequency(val);\n\n      case Tone.Type.Decibels:\n        return Tone.dbToGain(val);\n\n      case Tone.Type.NormalRange:\n        return Math.min(Math.max(val, 0), 1);\n\n      case Tone.Type.AudioRange:\n        return Math.min(Math.max(val, -1), 1);\n\n      case Tone.Type.Positive:\n        return Math.max(val, 0);\n\n      default:\n        return val;\n    }\n  } else {\n    return val;\n  }\n};\n/**\n * Convert the parameters value into the units specified by Tone.Param.units.\n * @private\n * @param  {number} val the value to convert\n * @return {number}\n */\n\n\nTone.Param.prototype._toUnits = function (val) {\n  if (this.convert || Tone.isUndef(this.convert)) {\n    switch (this.units) {\n      case Tone.Type.Decibels:\n        return Tone.gainToDb(val);\n\n      default:\n        return val;\n    }\n  } else {\n    return val;\n  }\n};\n/**\n *  the minimum output value\n *  @type {Number}\n *  @private\n */\n\n\nTone.Param.prototype._minOutput = 1e-5;\n/**\n *  The event types\n *  @enum {String}\n *  @private\n */\n\nTone.Param.AutomationType = {\n  Linear: \"linearRampToValueAtTime\",\n  Exponential: \"exponentialRampToValueAtTime\",\n  Target: \"setTargetAtTime\",\n  SetValue: \"setValueAtTime\",\n  Cancel: \"cancelScheduledValues\"\n};\n/**\n *  Schedules a parameter value change at the given time.\n *  @param {*}\tvalue The value to set the signal.\n *  @param {Time}  time The time when the change should occur.\n *  @returns {Tone.Param} this\n *  @example\n * //set the frequency to \"G4\" in exactly 1 second from now.\n * freq.setValueAtTime(\"G4\", \"+1\");\n */\n\nTone.Param.prototype.setValueAtTime = function (value, time) {\n  time = this.toSeconds(time);\n  value = this._fromUnits(value);\n\n  this._events.add({\n    \"type\": Tone.Param.AutomationType.SetValue,\n    \"value\": value,\n    \"time\": time\n  });\n\n  this.log(Tone.Param.AutomationType.SetValue, value, time);\n\n  this._param.setValueAtTime(value, time);\n\n  return this;\n};\n/**\n *  Get the signals value at the given time. Subsequent scheduling\n *  may invalidate the returned value.\n *  @param {Time} time When to get the value\n *  @returns {Number} The value at the given time\n */\n\n\nTone.Param.prototype.getValueAtTime = function (time) {\n  time = this.toSeconds(time);\n\n  var after = this._events.getAfter(time);\n\n  var before = this._events.get(time);\n\n  var initialValue = Tone.defaultArg(this._initialValue, this._param.defaultValue);\n  var value = initialValue; //if it was set by\n\n  if (before === null) {\n    value = initialValue;\n  } else if (before.type === Tone.Param.AutomationType.Target) {\n    var previous = this._events.getBefore(before.time);\n\n    var previousVal;\n\n    if (previous === null) {\n      previousVal = initialValue;\n    } else {\n      previousVal = previous.value;\n    }\n\n    value = this._exponentialApproach(before.time, previousVal, before.value, before.constant, time);\n  } else if (after === null) {\n    value = before.value;\n  } else if (after.type === Tone.Param.AutomationType.Linear) {\n    value = this._linearInterpolate(before.time, before.value, after.time, after.value, time);\n  } else if (after.type === Tone.Param.AutomationType.Exponential) {\n    value = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);\n  } else {\n    value = before.value;\n  }\n\n  return value;\n};\n/**\n *  Creates a schedule point with the current value at the current time.\n *  This is useful for creating an automation anchor point in order to\n *  schedule changes from the current value.\n *\n *  @param {number=} now (Optionally) pass the now value in.\n *  @returns {Tone.Param} this\n */\n\n\nTone.Param.prototype.setRampPoint = function (time) {\n  time = this.toSeconds(time);\n  var currentVal = this.getValueAtTime(time);\n  this.cancelAndHoldAtTime(time);\n\n  if (currentVal === 0) {\n    currentVal = this._minOutput;\n  }\n\n  this.setValueAtTime(this._toUnits(currentVal), time);\n  return this;\n};\n/**\n *  Schedules a linear continuous change in parameter value from the\n *  previous scheduled parameter value to the given value.\n *\n *  @param  {number} value\n *  @param  {Time} endTime\n *  @returns {Tone.Param} this\n */\n\n\nTone.Param.prototype.linearRampToValueAtTime = function (value, endTime) {\n  value = this._fromUnits(value);\n  endTime = this.toSeconds(endTime);\n\n  this._events.add({\n    \"type\": Tone.Param.AutomationType.Linear,\n    \"value\": value,\n    \"time\": endTime\n  });\n\n  this.log(Tone.Param.AutomationType.Linear, value, endTime);\n\n  this._param.linearRampToValueAtTime(value, endTime);\n\n  return this;\n};\n/**\n *  Schedules an exponential continuous change in parameter value from\n *  the previous scheduled parameter value to the given value.\n *\n *  @param  {number} value\n *  @param  {Time} endTime\n *  @returns {Tone.Param} this\n */\n\n\nTone.Param.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n  value = this._fromUnits(value);\n  value = Math.max(this._minOutput, value);\n  endTime = this.toSeconds(endTime); //store the event\n\n  this._events.add({\n    \"type\": Tone.Param.AutomationType.Exponential,\n    \"time\": endTime,\n    \"value\": value\n  });\n\n  this.log(Tone.Param.AutomationType.Exponential, value, endTime);\n\n  this._param.exponentialRampToValueAtTime(value, endTime);\n\n  return this;\n};\n/**\n *  Schedules an exponential continuous change in parameter value from\n *  the current time and current value to the given value over the\n *  duration of the rampTime.\n *\n *  @param  {number} value   The value to ramp to.\n *  @param  {Time} rampTime the time that it takes the\n *                               value to ramp from it's current value\n *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n *  @returns {Tone.Param} this\n *  @example\n * //exponentially ramp to the value 2 over 4 seconds.\n * signal.exponentialRampTo(2, 4);\n */\n\n\nTone.Param.prototype.exponentialRampTo = function (value, rampTime, startTime) {\n  startTime = this.toSeconds(startTime);\n  this.setRampPoint(startTime);\n  this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n  return this;\n};\n/**\n *  Schedules an linear continuous change in parameter value from\n *  the current time and current value to the given value over the\n *  duration of the rampTime.\n *\n *  @param  {number} value   The value to ramp to.\n *  @param  {Time} rampTime the time that it takes the\n *                               value to ramp from it's current value\n *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n *  @returns {Tone.Param} this\n *  @example\n * //linearly ramp to the value 4 over 3 seconds.\n * signal.linearRampTo(4, 3);\n */\n\n\nTone.Param.prototype.linearRampTo = function (value, rampTime, startTime) {\n  startTime = this.toSeconds(startTime);\n  this.setRampPoint(startTime);\n  this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n  return this;\n};\n/**\n *  Start exponentially approaching the target value at the given time. Since it\n *  is an exponential approach it will continue approaching after the ramp duration. The\n *  rampTime is the time that it takes to reach over 99% of the way towards the value.\n *  @param  {number} value   The value to ramp to.\n *  @param  {Time} rampTime the time that it takes the\n *                               value to ramp from it's current value\n *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n *  @returns {Tone.Param} this\n *  @example\n * //exponentially ramp to the value 2 over 4 seconds.\n * signal.exponentialRampTo(2, 4);\n */\n\n\nTone.Param.prototype.targetRampTo = function (value, rampTime, startTime) {\n  startTime = this.toSeconds(startTime);\n  this.setRampPoint(startTime);\n  this.exponentialApproachValueAtTime(value, startTime, rampTime);\n  return this;\n};\n/**\n *  Start exponentially approaching the target value at the given time. Since it\n *  is an exponential approach it will continue approaching after the ramp duration. The\n *  rampTime is the time that it takes to reach over 99% of the way towards the value. This methods\n *  is similar to setTargetAtTime except the third argument is a time instead of a 'timeConstant'\n *  @param  {number} value   The value to ramp to.\n *  @param {Time}\ttime \tWhen the ramp should start.\n *  @param  {Time} rampTime the time that it takes the\n *                               value to ramp from it's current value\n *  @returns {Tone.Param} this\n *  @example\n * //exponentially ramp to the value 2 over 4 seconds.\n * signal.exponentialRampTo(2, 4);\n */\n\n\nTone.Param.prototype.exponentialApproachValueAtTime = function (value, time, rampTime) {\n  var timeConstant = Math.log(this.toSeconds(rampTime) + 1) / Math.log(200);\n  time = this.toSeconds(time);\n  this.setTargetAtTime(value, time, timeConstant); //at 90% start a linear ramp to the final value\n\n  this.cancelAndHoldAtTime(time + rampTime * 0.9);\n  this.linearRampToValueAtTime(value, time + rampTime);\n  return this;\n};\n/**\n *  Start exponentially approaching the target value at the given time with\n *  a rate having the given time constant.\n *  @param {number} value\n *  @param {Time} startTime\n *  @param {number} timeConstant\n *  @returns {Tone.Param} this\n */\n\n\nTone.Param.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n  value = this._fromUnits(value); // The value will never be able to approach without timeConstant > 0.\n\n  if (timeConstant <= 0) {\n    throw new Error(\"timeConstant must be greater than 0\");\n  }\n\n  startTime = this.toSeconds(startTime);\n\n  this._events.add({\n    \"type\": Tone.Param.AutomationType.Target,\n    \"value\": value,\n    \"time\": startTime,\n    \"constant\": timeConstant\n  });\n\n  this.log(Tone.Param.AutomationType.Target, value, startTime, timeConstant);\n\n  this._param.setTargetAtTime(value, startTime, timeConstant);\n\n  return this;\n};\n/**\n *  Sets an array of arbitrary parameter values starting at the given time\n *  for the given duration.\n *\n *  @param {Array} values\n *  @param {Time} startTime\n *  @param {Time} duration\n *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n *  @returns {Tone.Param} this\n */\n\n\nTone.Param.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {\n  scaling = Tone.defaultArg(scaling, 1);\n  duration = this.toSeconds(duration);\n  startTime = this.toSeconds(startTime);\n  this.setValueAtTime(values[0] * scaling, startTime);\n  var segTime = duration / (values.length - 1);\n\n  for (var i = 1; i < values.length; i++) {\n    this.linearRampToValueAtTime(values[i] * scaling, startTime + i * segTime);\n  }\n\n  return this;\n};\n/**\n *  Cancels all scheduled parameter changes with times greater than or\n *  equal to startTime.\n *\n *  @param  {Time} time\n *  @returns {Tone.Param} this\n */\n\n\nTone.Param.prototype.cancelScheduledValues = function (time) {\n  time = this.toSeconds(time);\n\n  this._events.cancel(time);\n\n  this._param.cancelScheduledValues(time);\n\n  this.log(Tone.Param.AutomationType.Cancel, time);\n  return this;\n};\n/**\n *  This is similar to [cancelScheduledValues](#cancelScheduledValues) except\n *  it holds the automated value at time until the next automated event.\n *  @param  {Time} time\n *  @returns {Tone.Param} this\n */\n\n\nTone.Param.prototype.cancelAndHoldAtTime = function (time) {\n  time = this.toSeconds(time);\n  var valueAtTime = this.getValueAtTime(time);\n  this.log(\"cancelAndHoldAtTime\", time, \"value=\" + valueAtTime); //remove the schedule events\n\n  this._param.cancelScheduledValues(time); //if there is an event at the given time\n  //and that even is not a \"set\"\n\n\n  var before = this._events.get(time);\n\n  var after = this._events.getAfter(time);\n\n  if (before && before.time === time) {\n    //remove everything after\n    if (after) {\n      this._events.cancel(after.time);\n    } else {\n      this._events.cancel(time + this.sampleTime);\n    }\n  } else if (after) {\n    //cancel the next event(s)\n    this._events.cancel(after.time);\n\n    if (after.type === Tone.Param.AutomationType.Linear) {\n      this.linearRampToValueAtTime(valueAtTime, time);\n    } else if (after.type === Tone.Param.AutomationType.Exponential) {\n      this.exponentialRampToValueAtTime(valueAtTime, time);\n    }\n  } //set the value at the given time\n\n\n  this._events.add({\n    \"type\": Tone.Param.AutomationType.SetValue,\n    \"value\": valueAtTime,\n    \"time\": time\n  });\n\n  this._param.setValueAtTime(valueAtTime, time);\n\n  return this;\n};\n/**\n *  Ramps to the given value over the duration of the rampTime.\n *  Automatically selects the best ramp type (exponential or linear)\n *  depending on the `units` of the signal\n *\n *  @param  {number} value\n *  @param  {Time} rampTime \tThe time that it takes the\n *                              value to ramp from it's current value\n *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n *  @returns {Tone.Param} this\n *  @example\n * //ramp to the value either linearly or exponentially\n * //depending on the \"units\" value of the signal\n * signal.rampTo(0, 10);\n *  @example\n * //schedule it to ramp starting at a specific time\n * signal.rampTo(0, 10, 5)\n */\n\n\nTone.Param.prototype.rampTo = function (value, rampTime, startTime) {\n  rampTime = Tone.defaultArg(rampTime, 0.1);\n\n  if (this.units === Tone.Type.Frequency || this.units === Tone.Type.BPM || this.units === Tone.Type.Decibels) {\n    this.exponentialRampTo(value, rampTime, startTime);\n  } else {\n    this.linearRampTo(value, rampTime, startTime);\n  }\n\n  return this;\n}; ///////////////////////////////////////////////////////////////////////////\n//\tAUTOMATION CURVE CALCULATIONS\n//\tMIT License, copyright (c) 2014 Jordan Santell\n///////////////////////////////////////////////////////////////////////////\n// Calculates the the value along the curve produced by setTargetAtTime\n\n\nTone.Param.prototype._exponentialApproach = function (t0, v0, v1, timeConstant, t) {\n  return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n}; // Calculates the the value along the curve produced by linearRampToValueAtTime\n\n\nTone.Param.prototype._linearInterpolate = function (t0, v0, t1, v1, t) {\n  return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n}; // Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\n\nTone.Param.prototype._exponentialInterpolate = function (t0, v0, t1, v1, t) {\n  return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n};\n/**\n *  Clean up\n *  @returns {Tone.Param} this\n */\n\n\nTone.Param.prototype.dispose = function () {\n  Tone.AudioNode.prototype.dispose.call(this);\n  this._param = null;\n  this._events = null;\n  return this;\n};\n\nexport default Tone.Param;","import Tone from \"../core/Tone\";\nimport \"../core/AudioNode\";\n/**\n *  @class  Base class for all Signals. Used Internally.\n *\n *  @constructor\n *  @extends {Tone}\n */\n\nTone.SignalBase = function () {\n  Tone.AudioNode.call(this);\n};\n\nTone.extend(Tone.SignalBase, Tone.AudioNode);\n/**\n *  When signals connect to other signals or AudioParams,\n *  they take over the output value of that signal or AudioParam.\n *  For all other nodes, the behavior is the same as a default <code>connect</code>.\n *\n *  @override\n *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node\n *  @param {number} [outputNumber=0] The output number to connect from.\n *  @param {number} [inputNumber=0] The input number to connect to.\n *  @returns {Tone.SignalBase} this\n */\n\nTone.SignalBase.prototype.connect = function (node, outputNumber, inputNumber) {\n  //zero it out so that the signal can have full control\n  if (Tone.Signal && Tone.Signal === node.constructor || Tone.Param && Tone.Param === node.constructor) {\n    //cancel changes\n    node._param.cancelScheduledValues(0); //reset the value\n\n\n    node._param.setValueAtTime(0, 0); //mark the value as overridden\n\n\n    node.overridden = true;\n  } else if (node instanceof AudioParam) {\n    node.cancelScheduledValues(0);\n    node.setValueAtTime(0, 0);\n  }\n\n  Tone.AudioNode.prototype.connect.call(this, node, outputNumber, inputNumber);\n  return this;\n};\n\nexport default Tone.SignalBase;","import Tone from \"../core/Tone\";\nimport \"../core/Param\";\nimport \"../type/Type\";\nimport \"../core/AudioNode\";\n/**\n *  @class A thin wrapper around the Native Web Audio GainNode.\n *         The GainNode is a basic building block of the Web Audio\n *         API and is useful for routing audio and adjusting gains.\n *  @extends {Tone.AudioNode}\n *  @param  {Number=}  gain  The initial gain of the GainNode\n *  @param {Tone.Type=} units The units of the gain parameter.\n */\n\nTone.Gain = function () {\n  var options = Tone.defaults(arguments, [\"gain\", \"units\"], Tone.Gain);\n  Tone.AudioNode.call(this, options);\n  /**\n   *  The GainNode\n   *  @type  {GainNode}\n   *  @private\n   */\n\n  this.input = this.output = this._gainNode = this.context.createGain();\n  /**\n   *  The gain parameter of the gain node.\n   *  @type {Gain}\n   *  @signal\n   */\n\n  this.gain = new Tone.Param({\n    \"param\": this._gainNode.gain,\n    \"units\": options.units,\n    \"value\": options.gain,\n    \"convert\": options.convert\n  });\n\n  this._readOnly(\"gain\");\n};\n\nTone.extend(Tone.Gain, Tone.AudioNode);\n/**\n *  The defaults\n *  @const\n *  @type  {Object}\n */\n\nTone.Gain.defaults = {\n  \"gain\": 1,\n  \"convert\": true\n};\n/**\n *  Clean up.\n *  @return  {Tone.Gain}  this\n */\n\nTone.Gain.prototype.dispose = function () {\n  Tone.AudioNode.prototype.dispose.call(this);\n\n  this._gainNode.disconnect();\n\n  this._gainNode = null;\n\n  this._writable(\"gain\");\n\n  this.gain.dispose();\n  this.gain = null;\n};\n\nexport default Tone.Gain;","import Tone from \"../core/Tone\";\nimport \"../shim/AudioContext\";\nimport \"../core/Context\";\nimport \"../core/Gain\";\n\nif (Tone.supported && !Tone.global.AudioContext.prototype.createConstantSource) {\n  var ConstantSourceNode = function ConstantSourceNode(context) {\n    this.context = context;\n    var buffer = context.createBuffer(1, 128, context.sampleRate);\n    var arr = buffer.getChannelData(0);\n\n    for (var i = 0; i < arr.length; i++) {\n      arr[i] = 1;\n    }\n\n    this._bufferSource = context.createBufferSource();\n    this._bufferSource.channelCount = 1;\n    this._bufferSource.channelCountMode = \"explicit\";\n    this._bufferSource.buffer = buffer;\n    this._bufferSource.loop = true;\n    var gainNode = this._output = context.createGain();\n    this.offset = gainNode.gain;\n\n    this._bufferSource.connect(gainNode);\n  };\n\n  ConstantSourceNode.prototype.start = function (time) {\n    this._bufferSource.start(time);\n\n    return this;\n  };\n\n  ConstantSourceNode.prototype.stop = function (time) {\n    this._bufferSource.stop(time);\n\n    return this;\n  };\n\n  ConstantSourceNode.prototype.connect = function () {\n    this._output.connect.apply(this._output, arguments);\n\n    return this;\n  };\n\n  ConstantSourceNode.prototype.disconnect = function () {\n    this._output.disconnect.apply(this._output, arguments);\n\n    return this;\n  };\n\n  AudioContext.prototype.createConstantSource = function () {\n    return new ConstantSourceNode(this);\n  };\n\n  Tone.Context.prototype.createConstantSource = function () {\n    return new ConstantSourceNode(this);\n  };\n}","import Tone from \"../core/Tone\";\nimport \"../type/Type\";\nimport \"../core/Param\";\nimport \"../signal/SignalBase\";\nimport \"../shim/ConstantSourceNode\";\n/**\n *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.\n *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n *          has all of the methods available to native Web Audio\n *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n *          as well as additional conveniences. Read more about working with signals\n *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n *  @constructor\n *  @extends {Tone.Param}\n *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam\n *                                     is passed in, that parameter will be wrapped\n *                                     and controlled by the Signal.\n *  @param {string} [units=Number] unit The units the signal is in.\n *  @example\n * var signal = new Tone.Signal(10);\n */\n\nTone.Signal = function () {\n  var options = Tone.defaults(arguments, [\"value\", \"units\"], Tone.Signal);\n  Tone.Param.call(this, options);\n  /**\n   * The constant source node which generates the signal\n   * @type {ConstantSourceNode}\n   * @private\n   */\n\n  this._constantSource = this.context.createConstantSource();\n\n  this._constantSource.start(0);\n\n  this._param = this._constantSource.offset;\n  this.value = options.value;\n  /**\n   * The node where the constant signal value is scaled.\n   * @type {ConstantSourceNode}\n   * @private\n   */\n\n  this.output = this._constantSource;\n  /**\n   * The node where the value is set.\n   * @type {Tone.Param}\n   * @private\n   */\n\n  this.input = this._param = this.output.offset;\n};\n\nTone.extend(Tone.Signal, Tone.Param);\n/**\n *  The default values\n *  @type  {Object}\n *  @static\n *  @const\n */\n\nTone.Signal.defaults = {\n  \"value\": 0,\n  \"units\": Tone.Type.Default,\n  \"convert\": true\n}; //use SignalBase's connect/disconnect methods\n\nTone.Signal.prototype.connect = Tone.SignalBase.prototype.connect;\nTone.Signal.prototype.disconnect = Tone.SignalBase.prototype.disconnect;\n/**\n * Return the current signal value at the given time.\n * @param  {Time} time When to get the signal value\n * @return {Number}\n */\n\nTone.Signal.prototype.getValueAtTime = function (time) {\n  if (this._param.getValueAtTime) {\n    return this._param.getValueAtTime(time);\n  } else {\n    return Tone.Param.prototype.getValueAtTime.call(this, time);\n  }\n};\n/**\n *  dispose and disconnect\n *  @returns {Tone.Signal} this\n */\n\n\nTone.Signal.prototype.dispose = function () {\n  Tone.Param.prototype.dispose.call(this);\n\n  this._constantSource.stop();\n\n  this._constantSource.disconnect();\n\n  this._constantSource = null;\n  return this;\n};\n\nexport default Tone.Signal;","import Tone from \"../core/Tone\";\nimport \"../signal/Signal\";\nimport \"../core/Gain\";\nimport \"../core/AudioNode\";\n/**\n *  @class Tone.Volume is a simple volume node, useful for creating a volume fader.\n *\n *  @extends {Tone.AudioNode}\n *  @constructor\n *  @param {Decibels} [volume=0] the initial volume\n *  @example\n * var vol = new Tone.Volume(-12);\n * instrument.chain(vol, Tone.Master);\n */\n\nTone.Volume = function () {\n  var options = Tone.defaults(arguments, [\"volume\"], Tone.Volume);\n  Tone.AudioNode.call(this, options);\n  /**\n   * the output node\n   * @type {GainNode}\n   * @private\n   */\n\n  this.output = this.input = new Tone.Gain(options.volume, Tone.Type.Decibels);\n  /**\n   * The unmuted volume\n   * @type {Decibels}\n   * @private\n   */\n\n  this._unmutedVolume = options.volume;\n  /**\n   *  The volume control in decibels.\n   *  @type {Decibels}\n   *  @signal\n   */\n\n  this.volume = this.output.gain;\n\n  this._readOnly(\"volume\"); //set the mute initially\n\n\n  this.mute = options.mute;\n};\n\nTone.extend(Tone.Volume, Tone.AudioNode);\n/**\n *  Defaults\n *  @type  {Object}\n *  @const\n *  @static\n */\n\nTone.Volume.defaults = {\n  \"volume\": 0,\n  \"mute\": false\n};\n/**\n * Mute the output.\n * @memberOf Tone.Volume#\n * @type {boolean}\n * @name mute\n * @example\n * //mute the output\n * volume.mute = true;\n */\n\nObject.defineProperty(Tone.Volume.prototype, \"mute\", {\n  get: function get() {\n    return this.volume.value === -Infinity;\n  },\n  set: function set(mute) {\n    if (!this.mute && mute) {\n      this._unmutedVolume = this.volume.value; //maybe it should ramp here?\n\n      this.volume.value = -Infinity;\n    } else if (this.mute && !mute) {\n      this.volume.value = this._unmutedVolume;\n    }\n  }\n});\n/**\n *  clean up\n *  @returns {Tone.Volume} this\n */\n\nTone.Volume.prototype.dispose = function () {\n  this.input.dispose();\n  Tone.AudioNode.prototype.dispose.call(this);\n\n  this._writable(\"volume\");\n\n  this.volume.dispose();\n  this.volume = null;\n  return this;\n};\n\nexport default Tone.Volume;","import Tone from \"../core/Tone\";\nimport \"../component/Volume\";\nimport \"../core/Context\";\nimport \"../core/AudioNode\";\n/**\n *  @class  A single master output which is connected to the\n *          AudioDestinationNode (aka your speakers).\n *          It provides useful conveniences such as the ability\n *          to set the volume and mute the entire application.\n *          It also gives you the ability to apply master effects to your application.\n *          <br><br>\n *          Like Tone.Transport, A single Tone.Master is created\n *          on initialization and you do not need to explicitly construct one.\n *\n *  @constructor\n *  @extends {Tone}\n *  @singleton\n *  @example\n * //the audio will go from the oscillator to the speakers\n * oscillator.connect(Tone.Master);\n * //a convenience for connecting to the master output is also provided:\n * oscillator.toMaster();\n * //the above two examples are equivalent.\n */\n\nTone.Master = function () {\n  Tone.AudioNode.call(this);\n  Tone.getContext(function () {\n    this.createInsOuts(1, 0);\n    /**\n     *  The private volume node\n     *  @type  {Tone.Volume}\n     *  @private\n     */\n\n    this._volume = this.output = new Tone.Volume();\n    /**\n     * The volume of the master output.\n     * @type {Decibels}\n     * @signal\n     */\n\n    this.volume = this._volume.volume;\n\n    this._readOnly(\"volume\"); //connections\n\n\n    Tone.connectSeries(this.input, this.output, this.context.destination); //master is a singleton so it adds itself to the context\n\n    this.context.master = this;\n  }.bind(this));\n};\n\nTone.extend(Tone.Master, Tone.AudioNode);\n/**\n *  @type {Object}\n *  @const\n */\n\nTone.Master.defaults = {\n  \"volume\": 0,\n  \"mute\": false\n};\n/**\n * Is an instanceof Tone.Master\n * @type {Boolean}\n */\n\nTone.Master.prototype.isMaster = true;\n/**\n * Mute the output.\n * @memberOf Tone.Master#\n * @type {boolean}\n * @name mute\n * @example\n * //mute the output\n * Tone.Master.mute = true;\n */\n\nObject.defineProperty(Tone.Master.prototype, \"mute\", {\n  get: function get() {\n    return this._volume.mute;\n  },\n  set: function set(mute) {\n    this._volume.mute = mute;\n  }\n});\n/**\n *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n *  chained in the master effects chain.\n *  @param {...(AudioNode|Tone)} nodes All arguments will be connected in a row\n *                                  and the Master will be routed through it.\n *  @return  {Tone.Master}  this\n *  @example\n * //some overall compression to keep the levels in check\n * var masterCompressor = new Tone.Compressor({\n * \t\"threshold\" : -6,\n * \t\"ratio\" : 3,\n * \t\"attack\" : 0.5,\n * \t\"release\" : 0.1\n * });\n * //give a little boost to the lows\n * var lowBump = new Tone.Filter(200, \"lowshelf\");\n * //route everything through the filter\n * //and compressor before going to the speakers\n * Tone.Master.chain(lowBump, masterCompressor);\n */\n\nTone.Master.prototype.chain = function () {\n  this.input.disconnect();\n  var args = Array.from(arguments);\n  args.unshift(this.input);\n  args.push(this.output);\n  Tone.connectSeries.apply(undefined, args);\n};\n/**\n *  Clean up\n *  @return  {Tone.Master}  this\n */\n\n\nTone.Master.prototype.dispose = function () {\n  Tone.AudioNode.prototype.dispose.call(this);\n\n  this._writable(\"volume\");\n\n  this._volume.dispose();\n\n  this._volume = null;\n  this.volume = null;\n}; ///////////////////////////////////////////////////////////////////////////\n//\tAUGMENT TONE's PROTOTYPE\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)\n *  @returns {Tone.AudioNode} this\n *  @example\n * //connect an oscillator to the master output\n * var osc = new Tone.Oscillator().toMaster();\n */\n\n\nTone.AudioNode.prototype.toMaster = function () {\n  this.connect(this.context.master);\n  return this;\n};\n/**\n *  initialize the module and listen for new audio contexts\n *  @private\n */\n\n\nvar MasterConstructor = Tone.Master;\nTone.Master = new MasterConstructor();\nTone.Context.on(\"init\", function (context) {\n  // if it already exists, just restore it\n  if (context.master && context.master.isMaster) {\n    Tone.Master = context.master;\n  } else {\n    Tone.Master = new MasterConstructor();\n  }\n});\nTone.Context.on(\"close\", function (context) {\n  if (context.master && context.master.isMaster) {\n    context.master.dispose();\n  }\n});\nexport default Tone.Master;","import Tone from \"../core/Tone\";\nimport \"../type/Type\";\nimport \"../core/Master\";\n/**\n *  @class  Base-class for all instruments\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n */\n\nTone.Instrument = function (options) {\n  //get the defaults\n  options = Tone.defaultArg(options, Tone.Instrument.defaults);\n  Tone.AudioNode.call(this);\n  /**\n   *  The output and volume triming node\n   *  @type  {Tone.Volume}\n   *  @private\n   */\n\n  this._volume = this.output = new Tone.Volume(options.volume);\n  /**\n   * The volume of the output in decibels.\n   * @type {Decibels}\n   * @signal\n   * @example\n   * source.volume.value = -6;\n   */\n\n  this.volume = this._volume.volume;\n\n  this._readOnly(\"volume\");\n  /**\n   * Keep track of all events scheduled to the transport\n   * when the instrument is 'synced'\n   * @type {Array<Number>}\n   * @private\n   */\n\n\n  this._scheduledEvents = [];\n};\n\nTone.extend(Tone.Instrument, Tone.AudioNode);\n/**\n *  the default attributes\n *  @type {object}\n */\n\nTone.Instrument.defaults = {\n  /** the volume of the output in decibels */\n  \"volume\": 0\n};\n/**\n *  @abstract\n *  @param {string|number} note the note to trigger\n *  @param {Time} [time=now] the time to trigger the ntoe\n *  @param {number} [velocity=1] the velocity to trigger the note\n */\n\nTone.Instrument.prototype.triggerAttack = Tone.noOp;\n/**\n *  @abstract\n *  @param {Time} [time=now] when to trigger the release\n */\n\nTone.Instrument.prototype.triggerRelease = Tone.noOp;\n/**\n * Sync the instrument to the Transport. All subsequent calls of\n * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n * will be scheduled along the transport.\n * @example\n * instrument.sync()\n * //schedule 3 notes when the transport first starts\n * instrument.triggerAttackRelease('C4', '8n', 0)\n * instrument.triggerAttackRelease('E4', '8n', '8n')\n * instrument.triggerAttackRelease('G4', '8n', '4n')\n * //start the transport to hear the notes\n * Transport.start()\n * @returns {Tone.Instrument} this\n */\n\nTone.Instrument.prototype.sync = function () {\n  this._syncMethod(\"triggerAttack\", 1);\n\n  this._syncMethod(\"triggerRelease\", 0);\n\n  return this;\n};\n/**\n * Wrap the given method so that it can be synchronized\n * @param {String} method Which method to wrap and sync\n * @param  {Number} timePosition What position the time argument appears in\n * @private\n */\n\n\nTone.Instrument.prototype._syncMethod = function (method, timePosition) {\n  var originalMethod = this[\"_original_\" + method] = this[method];\n\n  this[method] = function () {\n    var args = Array.prototype.slice.call(arguments);\n    var time = args[timePosition];\n    var id = Tone.Transport.schedule(function (t) {\n      args[timePosition] = t;\n      originalMethod.apply(this, args);\n    }.bind(this), time);\n\n    this._scheduledEvents.push(id);\n  }.bind(this);\n};\n/**\n * Unsync the instrument from the Transport\n * @returns {Tone.Instrument} this\n */\n\n\nTone.Instrument.prototype.unsync = function () {\n  this._scheduledEvents.forEach(function (id) {\n    Tone.Transport.clear(id);\n  });\n\n  this._scheduledEvents = [];\n\n  if (this._original_triggerAttack) {\n    this.triggerAttack = this._original_triggerAttack;\n    this.triggerRelease = this._original_triggerRelease;\n  }\n\n  return this;\n};\n/**\n *  Trigger the attack and then the release after the duration.\n *  @param  {Frequency} note     The note to trigger.\n *  @param  {Time} duration How long the note should be held for before\n *                          triggering the release. This value must be greater than 0.\n *  @param {Time} [time=now]  When the note should be triggered.\n *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n *  @returns {Tone.Instrument} this\n *  @example\n * //trigger \"C4\" for the duration of an 8th note\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n */\n\n\nTone.Instrument.prototype.triggerAttackRelease = function (note, duration, time, velocity) {\n  time = this.toSeconds(time);\n  duration = this.toSeconds(duration);\n  this.triggerAttack(note, time, velocity);\n  this.triggerRelease(time + duration);\n  return this;\n};\n/**\n *  clean up\n *  @returns {Tone.Instrument} this\n */\n\n\nTone.Instrument.prototype.dispose = function () {\n  Tone.AudioNode.prototype.dispose.call(this);\n\n  this._volume.dispose();\n\n  this._volume = null;\n\n  this._writable([\"volume\"]);\n\n  this.volume = null;\n  this.unsync();\n  this._scheduledEvents = null;\n  return this;\n};\n\nexport default Tone.Instrument;","import Tone from \"../core/Tone\";\n/**\n *  AudioBuffer.copyTo/FromChannel polyfill\n *  @private\n */\n\nif (Tone.supported) {\n  if (!AudioBuffer.prototype.copyToChannel) {\n    AudioBuffer.prototype.copyToChannel = function (src, chanNum, start) {\n      var channel = this.getChannelData(chanNum);\n      start = start || 0;\n\n      for (var i = 0; i < channel.length; i++) {\n        channel[i + start] = src[i];\n      }\n    };\n\n    AudioBuffer.prototype.copyFromChannel = function (dest, chanNum, start) {\n      var channel = this.getChannelData(chanNum);\n      start = start || 0;\n\n      for (var i = 0; i < dest.length; i++) {\n        dest[i] = channel[i + start];\n      }\n    };\n  }\n}","import Tone from \"../core/Tone\";\nimport \"../core/Emitter\";\nimport \"../type/Type\";\nimport \"../shim/AudioBuffer\";\n/**\n *  @class  Buffer loading and storage. Tone.Buffer is used internally by all\n *          classes that make requests for audio files such as Tone.Player,\n *          Tone.Sampler and Tone.Convolver.\n *\n *          Aside from load callbacks from individual buffers, Tone.Buffer\n *  \t\tprovides events which keep track of the loading progress\n *  \t\tof _all_ of the buffers. These are Tone.Buffer.on(\"load\" / \"progress\" / \"error\")\n *\n *  @constructor\n *  @extends {Tone}\n *  @param {AudioBuffer|String} url The url to load, or the audio buffer to set.\n *  @param {Function=} onload A callback which is invoked after the buffer is loaded.\n *                            It's recommended to use `Tone.Buffer.on('load', callback)` instead\n *                            since it will give you a callback when _all_ buffers are loaded.\n *  @param {Function=} onerror The callback to invoke if there is an error\n *  @example\n * var buffer = new Tone.Buffer(\"path/to/sound.mp3\", function(){\n * \t//the buffer is now available.\n * \tvar buff = buffer.get();\n * });\n *  @example\n * //can load provide fallback extension types if the first type is not supported.\n * var buffer = new Tone.Buffer(\"path/to/sound.[mp3|ogg|wav]\");\n */\n\nTone.Buffer = function () {\n  var options = Tone.defaults(arguments, [\"url\", \"onload\", \"onerror\"], Tone.Buffer);\n  Tone.call(this);\n  /**\n   *  stores the loaded AudioBuffer\n   *  @type {AudioBuffer}\n   *  @private\n   */\n\n  this._buffer = null;\n  /**\n   *  indicates if the buffer should be reversed or not\n   *  @type {Boolean}\n   *  @private\n   */\n\n  this._reversed = options.reverse;\n  /**\n   *  The XHR\n   *  @type  {XMLHttpRequest}\n   *  @private\n   */\n\n  this._xhr = null;\n  /**\n   * Private callback when the buffer is loaded.\n   * @type {Function}\n   * @private\n   */\n\n  this.onload = Tone.noOp;\n\n  if (options.url instanceof AudioBuffer || options.url instanceof Tone.Buffer) {\n    this.set(options.url);\n\n    if (!this.loaded) {\n      this.onload = options.onload;\n    }\n  } else if (Tone.isString(options.url)) {\n    this.load(options.url).then(options.onload).catch(options.onerror);\n  }\n};\n\nTone.extend(Tone.Buffer);\n/**\n *  the default parameters\n *  @type {Object}\n */\n\nTone.Buffer.defaults = {\n  \"url\": undefined,\n  \"reverse\": false,\n  \"onload\": Tone.noOp,\n  \"onerror\": Tone.noOp\n};\n/**\n *  Pass in an AudioBuffer or Tone.Buffer to set the value\n *  of this buffer.\n *  @param {AudioBuffer|Tone.Buffer} buffer the buffer\n *  @returns {Tone.Buffer} this\n */\n\nTone.Buffer.prototype.set = function (buffer) {\n  if (buffer instanceof Tone.Buffer) {\n    //if it's loaded, set it\n    if (buffer.loaded) {\n      this._buffer = buffer.get();\n    } else {\n      //otherwise when it's loaded, invoke it's callback\n      buffer.onload = function () {\n        this.set(buffer);\n        this.onload(this);\n      }.bind(this);\n    }\n  } else {\n    this._buffer = buffer;\n  } //reverse it initially\n\n\n  if (this._reversed) {\n    this._reverse();\n  }\n\n  return this;\n};\n/**\n *  @return {AudioBuffer} The audio buffer stored in the object.\n */\n\n\nTone.Buffer.prototype.get = function () {\n  return this._buffer;\n};\n/**\n *  Makes an xhr reqest for the selected url then decodes\n *  the file as an audio buffer. Invokes\n *  the callback once the audio buffer loads.\n *  @param {String} url The url of the buffer to load.\n *                      filetype support depends on the\n *                      browser.\n *  @returns {Promise} returns a Promise which resolves with the Tone.Buffer\n */\n\n\nTone.Buffer.prototype.load = function (url, onload, onerror) {\n  var promise = new Promise(function (load, error) {\n    this._xhr = Tone.Buffer.load(url, //success\n    function (buff) {\n      this._xhr = null;\n      this.set(buff);\n      load(this);\n      this.onload(this);\n\n      if (onload) {\n        onload(this);\n      }\n    }.bind(this), //error\n    function (err) {\n      this._xhr = null;\n      error(err);\n\n      if (onerror) {\n        onerror(err);\n      }\n    }.bind(this));\n  }.bind(this));\n  return promise;\n};\n/**\n *  dispose and disconnect\n *  @returns {Tone.Buffer} this\n */\n\n\nTone.Buffer.prototype.dispose = function () {\n  Tone.prototype.dispose.call(this);\n  this._buffer = null;\n\n  if (this._xhr) {\n    Tone.Buffer._removeFromDownloadQueue(this._xhr);\n\n    this._xhr.abort();\n\n    this._xhr = null;\n  }\n\n  return this;\n};\n/**\n * If the buffer is loaded or not\n * @memberOf Tone.Buffer#\n * @type {Boolean}\n * @name loaded\n * @readOnly\n */\n\n\nObject.defineProperty(Tone.Buffer.prototype, \"loaded\", {\n  \"get\": function get() {\n    return this.length > 0;\n  }\n});\n/**\n * The duration of the buffer.\n * @memberOf Tone.Buffer#\n * @type {Number}\n * @name duration\n * @readOnly\n */\n\nObject.defineProperty(Tone.Buffer.prototype, \"duration\", {\n  \"get\": function get() {\n    if (this._buffer) {\n      return this._buffer.duration;\n    } else {\n      return 0;\n    }\n  }\n});\n/**\n * The length of the buffer in samples\n * @memberOf Tone.Buffer#\n * @type {Number}\n * @name length\n * @readOnly\n */\n\nObject.defineProperty(Tone.Buffer.prototype, \"length\", {\n  \"get\": function get() {\n    if (this._buffer) {\n      return this._buffer.length;\n    } else {\n      return 0;\n    }\n  }\n});\n/**\n * The number of discrete audio channels. Returns 0 if no buffer\n * is loaded.\n * @memberOf Tone.Buffer#\n * @type {Number}\n * @name numberOfChannels\n * @readOnly\n */\n\nObject.defineProperty(Tone.Buffer.prototype, \"numberOfChannels\", {\n  \"get\": function get() {\n    if (this._buffer) {\n      return this._buffer.numberOfChannels;\n    } else {\n      return 0;\n    }\n  }\n});\n/**\n *  Set the audio buffer from the array. To create a multichannel AudioBuffer,\n *  pass in a multidimensional array.\n *  @param {Float32Array} array The array to fill the audio buffer\n *  @return {Tone.Buffer} this\n */\n\nTone.Buffer.prototype.fromArray = function (array) {\n  var isMultidimensional = array[0].length > 0;\n  var channels = isMultidimensional ? array.length : 1;\n  var len = isMultidimensional ? array[0].length : array.length;\n  var buffer = this.context.createBuffer(channels, len, this.context.sampleRate);\n\n  if (!isMultidimensional && channels === 1) {\n    array = [array];\n  }\n\n  for (var c = 0; c < channels; c++) {\n    buffer.copyToChannel(array[c], c);\n  }\n\n  this._buffer = buffer;\n  return this;\n};\n/**\n * \tSums muliple channels into 1 channel\n *  @param {Number=} channel Optionally only copy a single channel from the array.\n *  @return {Array}\n */\n\n\nTone.Buffer.prototype.toMono = function (chanNum) {\n  if (Tone.isNumber(chanNum)) {\n    this.fromArray(this.toArray(chanNum));\n  } else {\n    var outputArray = new Float32Array(this.length);\n    var numChannels = this.numberOfChannels;\n\n    for (var channel = 0; channel < numChannels; channel++) {\n      var channelArray = this.toArray(channel);\n\n      for (var i = 0; i < channelArray.length; i++) {\n        outputArray[i] += channelArray[i];\n      }\n    } //divide by the number of channels\n\n\n    outputArray = outputArray.map(function (sample) {\n      return sample / numChannels;\n    });\n    this.fromArray(outputArray);\n  }\n\n  return this;\n};\n/**\n * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional\n * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n *  @param {Number=} channel Optionally only copy a single channel from the array.\n *  @return {Array}\n */\n\n\nTone.Buffer.prototype.toArray = function (channel) {\n  if (Tone.isNumber(channel)) {\n    return this.getChannelData(channel);\n  } else if (this.numberOfChannels === 1) {\n    return this.toArray(0);\n  } else {\n    var ret = [];\n\n    for (var c = 0; c < this.numberOfChannels; c++) {\n      ret[c] = this.getChannelData(c);\n    }\n\n    return ret;\n  }\n};\n/**\n *  Returns the Float32Array representing the PCM audio data for the specific channel.\n *  @param  {Number}  channel  The channel number to return\n *  @return  {Float32Array}  The audio as a TypedArray\n */\n\n\nTone.Buffer.prototype.getChannelData = function (channel) {\n  return this._buffer.getChannelData(channel);\n};\n/**\n *  Cut a subsection of the array and return a buffer of the\n *  subsection. Does not modify the original buffer\n *  @param {Time} start The time to start the slice\n *  @param {Time=} end The end time to slice. If none is given\n *                     will default to the end of the buffer\n *  @return {Tone.Buffer} this\n */\n\n\nTone.Buffer.prototype.slice = function (start, end) {\n  end = Tone.defaultArg(end, this.duration);\n  var startSamples = Math.floor(this.context.sampleRate * this.toSeconds(start));\n  var endSamples = Math.floor(this.context.sampleRate * this.toSeconds(end));\n  var replacement = [];\n\n  for (var i = 0; i < this.numberOfChannels; i++) {\n    replacement[i] = this.toArray(i).slice(startSamples, endSamples);\n  }\n\n  var retBuffer = new Tone.Buffer().fromArray(replacement);\n  return retBuffer;\n};\n/**\n *  Reverse the buffer.\n *  @private\n *  @return {Tone.Buffer} this\n */\n\n\nTone.Buffer.prototype._reverse = function () {\n  if (this.loaded) {\n    for (var i = 0; i < this.numberOfChannels; i++) {\n      Array.prototype.reverse.call(this.getChannelData(i));\n    }\n  }\n\n  return this;\n};\n/**\n * Reverse the buffer.\n * @memberOf Tone.Buffer#\n * @type {Boolean}\n * @name reverse\n */\n\n\nObject.defineProperty(Tone.Buffer.prototype, \"reverse\", {\n  \"get\": function get() {\n    return this._reversed;\n  },\n  \"set\": function set(rev) {\n    if (this._reversed !== rev) {\n      this._reversed = rev;\n\n      this._reverse();\n    }\n  }\n}); ///////////////////////////////////////////////////////////////////////////\n// STATIC METHODS\n///////////////////////////////////////////////////////////////////////////\n//statically inherits Emitter methods\n\nTone.Emitter.mixin(Tone.Buffer);\n/**\n *  the static queue for all of the xhr requests\n *  @type {Array}\n *  @private\n */\n\nTone.Buffer._downloadQueue = [];\n/**\n *  A path which is prefixed before every url.\n *  @type  {String}\n *  @static\n */\n\nTone.Buffer.baseUrl = \"\";\n/**\n *  Create a Tone.Buffer from the array. To create a multichannel AudioBuffer,\n *  pass in a multidimensional array.\n *  @param {Float32Array} array The array to fill the audio buffer\n *  @return {Tone.Buffer} A Tone.Buffer created from the array\n */\n\nTone.Buffer.fromArray = function (array) {\n  return new Tone.Buffer().fromArray(array);\n};\n/**\n * Creates a Tone.Buffer from a URL, returns a promise\n * which resolves to a Tone.Buffer\n * @param  {String} url The url to load.\n * @return {Promise<Tone.Buffer>}     A promise which resolves to a Tone.Buffer\n */\n\n\nTone.Buffer.fromUrl = function (url) {\n  var buffer = new Tone.Buffer();\n  return buffer.load(url).then(function () {\n    return buffer;\n  });\n};\n/**\n * Remove an xhr request from the download queue\n * @private\n */\n\n\nTone.Buffer._removeFromDownloadQueue = function (request) {\n  var index = Tone.Buffer._downloadQueue.indexOf(request);\n\n  if (index !== -1) {\n    Tone.Buffer._downloadQueue.splice(index, 1);\n  }\n};\n/**\n *  Loads a url using XMLHttpRequest.\n *  @param {String} url\n *  @param {Function} onload\n *  @param {Function} onerror\n *  @param {Function} onprogress\n *  @return {XMLHttpRequest}\n */\n\n\nTone.Buffer.load = function (url, onload, onerror) {\n  //default\n  onload = Tone.defaultArg(onload, Tone.noOp); // test if the url contains multiple extensions\n\n  var matches = url.match(/\\[(.+\\|?)+\\]$/);\n\n  if (matches) {\n    var extensions = matches[1].split(\"|\");\n    var extension = extensions[0];\n\n    for (var i = 0; i < extensions.length; i++) {\n      if (Tone.Buffer.supportsType(extensions[i])) {\n        extension = extensions[i];\n        break;\n      }\n    }\n\n    url = url.replace(matches[0], extension);\n  }\n\n  function onError(e) {\n    Tone.Buffer._removeFromDownloadQueue(request);\n\n    Tone.Buffer.emit(\"error\", e);\n\n    if (onerror) {\n      onerror(e);\n    } else {\n      throw e;\n    }\n  }\n\n  function onProgress() {\n    //calculate the progress\n    var totalProgress = 0;\n\n    for (var i = 0; i < Tone.Buffer._downloadQueue.length; i++) {\n      totalProgress += Tone.Buffer._downloadQueue[i].progress;\n    }\n\n    Tone.Buffer.emit(\"progress\", totalProgress / Tone.Buffer._downloadQueue.length);\n  }\n\n  var request = new XMLHttpRequest();\n  request.open(\"GET\", Tone.Buffer.baseUrl + url, true);\n  request.responseType = \"arraybuffer\"; //start out as 0\n\n  request.progress = 0;\n\n  Tone.Buffer._downloadQueue.push(request);\n\n  request.addEventListener(\"load\", function () {\n    if (request.status === 200) {\n      Tone.context.decodeAudioData(request.response).then(function (buff) {\n        request.progress = 1;\n        onProgress();\n        onload(buff);\n\n        Tone.Buffer._removeFromDownloadQueue(request);\n\n        if (Tone.Buffer._downloadQueue.length === 0) {\n          //emit the event at the end\n          Tone.Buffer.emit(\"load\");\n        }\n      }).catch(function () {\n        Tone.Buffer._removeFromDownloadQueue(request);\n\n        onError(\"Tone.Buffer: could not decode audio data: \" + url);\n      });\n    } else {\n      onError(\"Tone.Buffer: could not locate file: \" + url);\n    }\n  });\n  request.addEventListener(\"error\", onError);\n  request.addEventListener(\"progress\", function (event) {\n    if (event.lengthComputable) {\n      //only go to 95%, the last 5% is when the audio is decoded\n      request.progress = event.loaded / event.total * 0.95;\n      onProgress();\n    }\n  });\n  request.send();\n  return request;\n};\n/**\n *  Stop all of the downloads in progress\n *  @return {Tone.Buffer}\n *  @static\n */\n\n\nTone.Buffer.cancelDownloads = function () {\n  Tone.Buffer._downloadQueue.slice().forEach(function (request) {\n    Tone.Buffer._removeFromDownloadQueue(request);\n\n    request.abort();\n  });\n\n  return Tone.Buffer;\n};\n/**\n *  Checks a url's extension to see if the current browser can play that file type.\n *  @param {String} url The url/extension to test\n *  @return {Boolean} If the file extension can be played\n *  @static\n *  @example\n * Tone.Buffer.supportsType(\"wav\"); //returns true\n * Tone.Buffer.supportsType(\"path/to/file.wav\"); //returns true\n */\n\n\nTone.Buffer.supportsType = function (url) {\n  var extension = url.split(\".\");\n  extension = extension[extension.length - 1];\n  var response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n  return response !== \"\";\n};\n/**\n *  Returns a Promise which resolves when all of the buffers have loaded\n *  @return {Promise}\n */\n\n\nTone.loaded = function () {\n  var onload, onerror;\n\n  function removeEvents() {\n    //remove the events when it's resolved\n    Tone.Buffer.off(\"load\", onload);\n    Tone.Buffer.off(\"error\", onerror);\n  }\n\n  return new Promise(function (success, fail) {\n    onload = function onload() {\n      success();\n    };\n\n    onerror = function onerror() {\n      fail();\n    }; //add the event listeners\n\n\n    Tone.Buffer.on(\"load\", onload);\n    Tone.Buffer.on(\"error\", onerror);\n  }).then(removeEvents).catch(function (e) {\n    removeEvents();\n    throw new Error(e);\n  });\n};\n\nexport default Tone.Buffer;","import Tone from \"../core/Tone\";\nimport \"../core/Buffer\";\n/**\n *  @class A data structure for holding multiple buffers.\n *  \n *  @param  {Object|Array}    urls      An object literal or array\n *                                      of urls to load.\n *  @param  {Function=}  callback  The callback to invoke when\n *                                 the buffers are loaded. \n *  @extends {Tone}\n *  @example\n * //load a whole bank of piano samples\n * var pianoSamples = new Tone.Buffers({\n * \t\"C4\" : \"path/to/C4.mp3\"\n * \t\"C#4\" : \"path/to/C#4.mp3\"\n * \t\"D4\" : \"path/to/D4.mp3\"\n * \t\"D#4\" : \"path/to/D#4.mp3\"\n * \t...\n * }, function(){\n * \t//play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"C4\");\n * \tplayer.start();\n * });\n * \t@example\n * //To pass in additional parameters in the second parameter\n * var buffers = new Tone.Buffers(urls, {\n * \t\"onload\" : callback,\n * \t\"baseUrl\" : \"../path/to/audio/\"\n * })\n */\n\nTone.Buffers = function (urls) {\n  //remove the urls from the options\n  var args = Array.prototype.slice.call(arguments);\n  args.shift();\n  var options = Tone.defaults(args, [\"onload\", \"baseUrl\"], Tone.Buffers);\n  Tone.call(this);\n  /**\n   *  All of the buffers\n   *  @type  {Object}\n   *  @private\n   */\n\n  this._buffers = {};\n  /**\n   *  A path which is prefixed before every url.\n   *  @type  {String}\n   */\n\n  this.baseUrl = options.baseUrl;\n  this._loadingCount = 0; //add each one\n\n  for (var key in urls) {\n    this._loadingCount++;\n    this.add(key, urls[key], this._bufferLoaded.bind(this, options.onload));\n  }\n};\n\nTone.extend(Tone.Buffers);\n/**\n *  Defaults\n *  @type  {Object}\n */\n\nTone.Buffers.defaults = {\n  \"onload\": Tone.noOp,\n  \"baseUrl\": \"\"\n};\n/**\n *  True if the buffers object has a buffer by that name.\n *  @param  {String|Number}  name  The key or index of the \n *                                 buffer.\n *  @return  {Boolean}\n */\n\nTone.Buffers.prototype.has = function (name) {\n  return this._buffers.hasOwnProperty(name);\n};\n/**\n *  Get a buffer by name. If an array was loaded, \n *  then use the array index.\n *  @param  {String|Number}  name  The key or index of the \n *                                 buffer.\n *  @return  {Tone.Buffer}\n */\n\n\nTone.Buffers.prototype.get = function (name) {\n  if (this.has(name)) {\n    return this._buffers[name];\n  } else {\n    throw new Error(\"Tone.Buffers: no buffer named \" + name);\n  }\n};\n/**\n *  A buffer was loaded. decrement the counter.\n *  @param  {Function}  callback \n *  @private\n */\n\n\nTone.Buffers.prototype._bufferLoaded = function (callback) {\n  this._loadingCount--;\n\n  if (this._loadingCount === 0 && callback) {\n    callback(this);\n  }\n};\n/**\n * If the buffers are loaded or not\n * @memberOf Tone.Buffers#\n * @type {Boolean}\n * @name loaded\n * @readOnly\n */\n\n\nObject.defineProperty(Tone.Buffers.prototype, \"loaded\", {\n  get: function get() {\n    var isLoaded = true;\n\n    for (var buffName in this._buffers) {\n      var buff = this.get(buffName);\n      isLoaded = isLoaded && buff.loaded;\n    }\n\n    return isLoaded;\n  }\n});\n/**\n *  Add a buffer by name and url to the Buffers\n *  @param  {String}    name      A unique name to give\n *                                the buffer\n *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, \n *                                                 or a buffer which will be added\n *                                                 with the given name.\n *  @param  {Function=}  callback  The callback to invoke \n *                                 when the url is loaded.\n */\n\nTone.Buffers.prototype.add = function (name, url, callback) {\n  callback = Tone.defaultArg(callback, Tone.noOp);\n\n  if (url instanceof Tone.Buffer) {\n    this._buffers[name] = url;\n    callback(this);\n  } else if (url instanceof AudioBuffer) {\n    this._buffers[name] = new Tone.Buffer(url);\n    callback(this);\n  } else if (Tone.isString(url)) {\n    this._buffers[name] = new Tone.Buffer(this.baseUrl + url, callback);\n  }\n\n  return this;\n};\n/**\n *  Clean up.\n *  @return  {Tone.Buffers} this\n */\n\n\nTone.Buffers.prototype.dispose = function () {\n  Tone.prototype.dispose.call(this);\n\n  for (var name in this._buffers) {\n    this._buffers[name].dispose();\n  }\n\n  this._buffers = null;\n  return this;\n};\n\nexport default Tone.Buffers;","import Tone from \"../core/Tone\";\nimport \"../signal/Signal\";\n/**\n * @class Tone.TickSignal extends Tone.Signal, but adds the capability\n *        to calculate the number of elapsed ticks. exponential and target curves\n *        are approximated with multiple linear ramps.\n *\n *        Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos, for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n *        describing integrating timing functions for tempo calculations.\n *\n * @param {Number} value The initial value of the signal\n * @extends {Tone.Signal}\n */\n\nTone.TickSignal = function (value) {\n  value = Tone.defaultArg(value, 1);\n  Tone.Signal.call(this, {\n    \"units\": Tone.Type.Ticks,\n    \"value\": value\n  }); //extend the memory\n\n  this._events.memory = Infinity; //clear the clock from the beginning\n\n  this.cancelScheduledValues(0); //set an initial event\n\n  this._events.add({\n    \"type\": Tone.Param.AutomationType.SetValue,\n    \"time\": 0,\n    \"value\": value\n  });\n};\n\nTone.extend(Tone.TickSignal, Tone.Signal);\n/**\n * Wraps Tone.Signal methods so that they also\n * record the ticks.\n * @param  {Function} method\n * @return {Function}\n * @private\n */\n\nfunction _wrapScheduleMethods(method) {\n  return function (value, time) {\n    time = this.toSeconds(time);\n    method.apply(this, arguments);\n\n    var event = this._events.get(time);\n\n    var previousEvent = this._events.previousEvent(event);\n\n    var ticksUntilTime = this._getTicksUntilEvent(previousEvent, time);\n\n    event.ticks = Math.max(ticksUntilTime, 0);\n    return this;\n  };\n}\n\nTone.TickSignal.prototype.setValueAtTime = _wrapScheduleMethods(Tone.Signal.prototype.setValueAtTime);\nTone.TickSignal.prototype.linearRampToValueAtTime = _wrapScheduleMethods(Tone.Signal.prototype.linearRampToValueAtTime);\n/**\n *  Start exponentially approaching the target value at the given time with\n *  a rate having the given time constant.\n *  @param {number} value\n *  @param {Time} startTime\n *  @param {number} timeConstant\n *  @returns {Tone.TickSignal} this\n */\n\nTone.TickSignal.prototype.setTargetAtTime = function (value, time, constant) {\n  //aproximate it with multiple linear ramps\n  time = this.toSeconds(time);\n  this.setRampPoint(time);\n  value = this._fromUnits(value); //start from previously scheduled value\n\n  var prevEvent = this._events.get(time);\n\n  var segments = Math.round(Math.max(1 / constant, 1));\n\n  for (var i = 0; i <= segments; i++) {\n    var segTime = constant * i + time;\n\n    var rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, value, constant, segTime);\n\n    this.linearRampToValueAtTime(this._toUnits(rampVal), segTime);\n  }\n\n  return this;\n};\n/**\n *  Schedules an exponential continuous change in parameter value from\n *  the previous scheduled parameter value to the given value.\n *  @param  {number} value\n *  @param  {Time} endTime\n *  @returns {Tone.TickSignal} this\n */\n\n\nTone.TickSignal.prototype.exponentialRampToValueAtTime = function (value, time) {\n  //aproximate it with multiple linear ramps\n  time = this.toSeconds(time);\n  value = this._fromUnits(value); //start from previously scheduled value\n\n  var prevEvent = this._events.get(time); //approx 10 segments per second\n\n\n  var segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n  var segmentDur = (time - prevEvent.time) / segments;\n\n  for (var i = 0; i <= segments; i++) {\n    var segTime = segmentDur * i + prevEvent.time;\n\n    var rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, value, segTime);\n\n    this.linearRampToValueAtTime(this._toUnits(rampVal), segTime);\n  }\n\n  return this;\n};\n/**\n * Returns the tick value at the time. Takes into account\n * any automation curves scheduled on the signal.\n * @private\n * @param  {Time} time The time to get the tick count at\n * @return {Ticks}      The number of ticks which have elapsed at the time\n *                          given any automations.\n */\n\n\nTone.TickSignal.prototype._getTicksUntilEvent = function (event, time) {\n  if (event === null) {\n    event = {\n      \"ticks\": 0,\n      \"time\": 0\n    };\n  } else if (Tone.isUndef(event.ticks)) {\n    var previousEvent = this._events.previousEvent(event);\n\n    event.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n  }\n\n  var val0 = this.getValueAtTime(event.time);\n  var val1 = this.getValueAtTime(time); //if it's right on the line, take the previous value\n\n  if (this._events.get(time).time === time && this._events.get(time).type === Tone.Param.AutomationType.SetValue) {\n    val1 = this.getValueAtTime(time - this.sampleTime);\n  }\n\n  return 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n};\n/**\n * Returns the tick value at the time. Takes into account\n * any automation curves scheduled on the signal.\n * @param  {Time} time The time to get the tick count at\n * @return {Ticks}      The number of ticks which have elapsed at the time\n *                          given any automations.\n */\n\n\nTone.TickSignal.prototype.getTicksAtTime = function (time) {\n  time = this.toSeconds(time);\n\n  var event = this._events.get(time);\n\n  return Math.max(this._getTicksUntilEvent(event, time), 0);\n};\n/**\n * Return the elapsed time of the number of ticks from the given time\n * @param {Ticks} ticks The number of ticks to calculate\n * @param  {Time} time The time to get the next tick from\n * @return {Seconds} The duration of the number of ticks from the given time in seconds\n */\n\n\nTone.TickSignal.prototype.getDurationOfTicks = function (ticks, time) {\n  time = this.toSeconds(time);\n  var currentTick = this.getTicksAtTime(time);\n  return this.getTimeOfTick(currentTick + ticks) - time;\n};\n/**\n * Given a tick, returns the time that tick occurs at.\n * @param  {Ticks} tick\n * @return {Time}      The time that the tick occurs.\n */\n\n\nTone.TickSignal.prototype.getTimeOfTick = function (tick) {\n  var before = this._events.get(tick, \"ticks\");\n\n  var after = this._events.getAfter(tick, \"ticks\");\n\n  if (before && before.ticks === tick) {\n    return before.time;\n  } else if (before && after && after.type === Tone.Param.AutomationType.Linear && before.value !== after.value) {\n    var val0 = this.getValueAtTime(before.time);\n    var val1 = this.getValueAtTime(after.time);\n    var delta = (val1 - val0) / (after.time - before.time);\n    var k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n    var sol1 = (-val0 + k) / delta;\n    var sol2 = (-val0 - k) / delta;\n    return (sol1 > 0 ? sol1 : sol2) + before.time;\n  } else if (before) {\n    if (before.value === 0) {\n      return Infinity;\n    } else {\n      return before.time + (tick - before.ticks) / before.value;\n    }\n  } else {\n    return tick / this._initialValue;\n  }\n};\n/**\n * Convert some number of ticks their the duration in seconds accounting\n * for any automation curves starting at the given time.\n * @param  {Ticks} ticks The number of ticks to convert to seconds.\n * @param  {Time} [when=now]  When along the automation timeline to convert the ticks.\n * @return {Tone.Time}       The duration in seconds of the ticks.\n */\n\n\nTone.TickSignal.prototype.ticksToTime = function (ticks, when) {\n  when = this.toSeconds(when);\n  return new Tone.Time(this.getDurationOfTicks(ticks, when));\n};\n/**\n * The inverse of [ticksToTime](#tickstotime). Convert a duration in\n * seconds to the corresponding number of ticks accounting for any\n * automation curves starting at the given time.\n * @param  {Time} duration The time interval to convert to ticks.\n * @param  {Time} [when=now]     When along the automation timeline to convert the ticks.\n * @return {Tone.Ticks}          The duration in ticks.\n */\n\n\nTone.TickSignal.prototype.timeToTicks = function (duration, when) {\n  when = this.toSeconds(when);\n  duration = this.toSeconds(duration);\n  var startTicks = this.getTicksAtTime(when);\n  var endTicks = this.getTicksAtTime(when + duration);\n  return new Tone.Ticks(endTicks - startTicks);\n};\n\nexport default Tone.TickSignal;","import Tone from \"../core/Tone\";\nimport \"../core/Timeline\";\nimport \"../type/Type\";\n/**\n *  @class  A Timeline State. Provides the methods: <code>setStateAtTime(\"state\", time)</code>\n *          and <code>getValueAtTime(time)</code>.\n *\n *  @extends {Tone.Timeline}\n *  @param {String} initial The initial state of the TimelineState. \n *                          Defaults to <code>undefined</code>\n */\n\nTone.TimelineState = function (initial) {\n  Tone.Timeline.call(this);\n  /**\n   *  The initial state\n   *  @private\n   *  @type {String}\n   */\n\n  this._initial = initial;\n};\n\nTone.extend(Tone.TimelineState, Tone.Timeline);\n/**\n *  Returns the scheduled state scheduled before or at\n *  the given time.\n *  @param  {Number}  time  The time to query.\n *  @return  {String}  The name of the state input in setStateAtTime.\n */\n\nTone.TimelineState.prototype.getValueAtTime = function (time) {\n  var event = this.get(time);\n\n  if (event !== null) {\n    return event.state;\n  } else {\n    return this._initial;\n  }\n};\n/**\n *  Add a state to the timeline.\n *  @param  {String}  state The name of the state to set.\n *  @param  {Number}  time  The time to query.\n *  @returns {Tone.TimelineState} this\n */\n\n\nTone.TimelineState.prototype.setStateAtTime = function (state, time) {\n  //all state changes need to be >= the previous state time\n  //TODO throw error if time < the previous event time\n  this.add({\n    \"state\": state,\n    \"time\": time\n  });\n  return this;\n};\n/**\n *  Return the event before the time with the given state\n *  @param {Tone.State} state The state to look for\n *  @param  {Time}  time  When to check before\t\t\t\n *  @return  {Object}  The event with the given state before the time\n */\n\n\nTone.TimelineState.prototype.getLastState = function (state, time) {\n  time = this.toSeconds(time);\n\n  var index = this._search(time);\n\n  for (var i = index; i >= 0; i--) {\n    var event = this._timeline[i];\n\n    if (event.state === state) {\n      return event;\n    }\n  }\n};\n/**\n *  Return the event after the time with the given state\n *  @param {Tone.State} state The state to look for\n *  @param  {Time}  time  When to check from\n *  @return  {Object}  The event with the given state after the time\n */\n\n\nTone.TimelineState.prototype.getNextState = function (state, time) {\n  time = this.toSeconds(time);\n\n  var index = this._search(time);\n\n  if (index !== -1) {\n    for (var i = index; i < this._timeline.length; i++) {\n      var event = this._timeline[i];\n\n      if (event.state === state) {\n        return event;\n      }\n    }\n  }\n};\n\nexport default Tone.TimelineState;","import Tone from \"../core/Tone\";\nimport \"../signal/TickSignal\";\nimport \"../core/TimelineState\";\nimport \"../core/Timeline\";\nimport \"../core/Param\";\n/**\n *  @class  Uses [Tone.TickSignal](TickSignal) to track elapsed ticks with\n *  \t\tcomplex automation curves.\n *\n * \t@constructor\n *  @extends {Tone}\n *  @param {Frequency} frequency The initial frequency that the signal ticks at\n *  @param {Tone.Param=} param A parameter to control (such as playbackRate)\n */\n\nTone.TickSource = function () {\n  var options = Tone.defaults(arguments, [\"frequency\"], Tone.TickSource);\n  /**\n   *  The frequency the callback function should be invoked.\n   *  @type  {Frequency}\n   *  @signal\n   */\n\n  this.frequency = new Tone.TickSignal(options.frequency);\n\n  this._readOnly(\"frequency\");\n  /**\n   *  The state timeline\n   *  @type {Tone.TimelineState}\n   *  @private\n   */\n\n\n  this._state = new Tone.TimelineState(Tone.State.Stopped);\n\n  this._state.setStateAtTime(Tone.State.Stopped, 0);\n  /**\n   * The offset values of the ticks\n   * @type {Tone.Timeline}\n   * @private\n   */\n\n\n  this._tickOffset = new Tone.Timeline(); //add the first event\n\n  this.setTicksAtTime(0, 0);\n};\n\nTone.extend(Tone.TickSource);\n/**\n *  The defaults\n *  @const\n *  @type  {Object}\n */\n\nTone.TickSource.defaults = {\n  \"frequency\": 1\n};\n/**\n *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n *  @type {Tone.State}\n *  @readOnly\n *  @memberOf Tone.TickSource#\n *  @name state\n */\n\nObject.defineProperty(Tone.TickSource.prototype, \"state\", {\n  get: function get() {\n    return this._state.getValueAtTime(this.now());\n  }\n});\n/**\n *  Start the clock at the given time. Optionally pass in an offset\n *  of where to start the tick counter from.\n *  @param  {Time=}  time    The time the clock should start\n *  @param {Ticks} [offset=0] The number of ticks to start the source at\n *  @return  {Tone.TickSource}  this\n */\n\nTone.TickSource.prototype.start = function (time, offset) {\n  time = this.toSeconds(time);\n\n  if (this._state.getValueAtTime(time) !== Tone.State.Started) {\n    this._state.setStateAtTime(Tone.State.Started, time);\n\n    if (Tone.isDefined(offset)) {\n      this.setTicksAtTime(offset, time);\n    }\n  }\n\n  return this;\n};\n/**\n *  Stop the clock. Stopping the clock resets the tick counter to 0.\n *  @param {Time} [time=now] The time when the clock should stop.\n *  @returns {Tone.TickSource} this\n *  @example\n * clock.stop();\n */\n\n\nTone.TickSource.prototype.stop = function (time) {\n  time = this.toSeconds(time); //cancel the previous stop\n\n  if (this._state.getValueAtTime(time) === Tone.State.Stopped) {\n    var event = this._state.get(time);\n\n    if (event.time > 0) {\n      this._tickOffset.cancel(event.time);\n\n      this._state.cancel(event.time);\n    }\n  }\n\n  this._state.cancel(time);\n\n  this._state.setStateAtTime(Tone.State.Stopped, time);\n\n  this.setTicksAtTime(0, time);\n  return this;\n};\n/**\n *  Pause the clock. Pausing does not reset the tick counter.\n *  @param {Time} [time=now] The time when the clock should stop.\n *  @returns {Tone.TickSource} this\n */\n\n\nTone.TickSource.prototype.pause = function (time) {\n  time = this.toSeconds(time);\n\n  if (this._state.getValueAtTime(time) === Tone.State.Started) {\n    this._state.setStateAtTime(Tone.State.Paused, time);\n  }\n\n  return this;\n};\n/**\n *  Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n *  @param {Time} [time=now] When to clear the events after\n *  @returns {Tone.TickSource} this\n */\n\n\nTone.TickSource.prototype.cancel = function (time) {\n  time = this.toSeconds(time);\n\n  this._state.cancel(time);\n\n  this._tickOffset.cancel(time);\n\n  return this;\n};\n/**\n * Get the elapsed ticks at the given time\n * @param  {Time} time  When to get the tick value\n * @return {Ticks}     The number of ticks\n */\n\n\nTone.TickSource.prototype.getTicksAtTime = function (time) {\n  time = this.toSeconds(time);\n\n  var stopEvent = this._state.getLastState(Tone.State.Stopped, time); //this event allows forEachBetween to iterate until the current time\n\n\n  var tmpEvent = {\n    state: Tone.State.Paused,\n    time: time\n  };\n\n  this._state.add(tmpEvent); //keep track of the previous offset event\n\n\n  var lastState = stopEvent;\n  var elapsedTicks = 0; //iterate through all the events since the last stop\n\n  this._state.forEachBetween(stopEvent.time, time + this.sampleTime, function (e) {\n    var periodStartTime = lastState.time; //if there is an offset event in this period use that\n\n    var offsetEvent = this._tickOffset.get(e.time);\n\n    if (offsetEvent.time >= lastState.time) {\n      elapsedTicks = offsetEvent.ticks;\n      periodStartTime = offsetEvent.time;\n    }\n\n    if (lastState.state === Tone.State.Started && e.state !== Tone.State.Started) {\n      elapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n    }\n\n    lastState = e;\n  }.bind(this)); //remove the temporary event\n\n\n  this._state.remove(tmpEvent); //return the ticks\n\n\n  return elapsedTicks;\n};\n/**\n *  The number of times the callback was invoked. Starts counting at 0\n *  and increments after the callback was invoked. Returns -1 when stopped.\n *  @memberOf Tone.TickSource#\n *  @name ticks\n *  @type {Ticks}\n */\n\n\nObject.defineProperty(Tone.TickSource.prototype, \"ticks\", {\n  get: function get() {\n    return this.getTicksAtTime(this.now());\n  },\n  set: function set(t) {\n    this.setTicksAtTime(t, this.now());\n  }\n});\n/**\n *  The time since ticks=0 that the TickSource has been running. Accounts\n *  for tempo curves\n *  @memberOf Tone.TickSource#\n *  @name seconds\n *  @type {Seconds}\n */\n\nObject.defineProperty(Tone.TickSource.prototype, \"seconds\", {\n  get: function get() {\n    return this.getSecondsAtTime(this.now());\n  },\n  set: function set(s) {\n    var now = this.now();\n    var ticks = this.frequency.timeToTicks(s, now);\n    this.setTicksAtTime(ticks, now);\n  }\n});\n/**\n *  Return the elapsed seconds at the given time.\n *  @param  {Time}  time  When to get the elapsed seconds\n *  @return  {Seconds}  The number of elapsed seconds\n */\n\nTone.TickSource.prototype.getSecondsAtTime = function (time) {\n  time = this.toSeconds(time);\n\n  var stopEvent = this._state.getLastState(Tone.State.Stopped, time); //this event allows forEachBetween to iterate until the current time\n\n\n  var tmpEvent = {\n    state: Tone.State.Paused,\n    time: time\n  };\n\n  this._state.add(tmpEvent); //keep track of the previous offset event\n\n\n  var lastState = stopEvent;\n  var elapsedSeconds = 0; //iterate through all the events since the last stop\n\n  this._state.forEachBetween(stopEvent.time, time + this.sampleTime, function (e) {\n    var periodStartTime = lastState.time; //if there is an offset event in this period use that\n\n    var offsetEvent = this._tickOffset.get(e.time);\n\n    if (offsetEvent.time >= lastState.time) {\n      elapsedSeconds = offsetEvent.seconds;\n      periodStartTime = offsetEvent.time;\n    }\n\n    if (lastState.state === Tone.State.Started && e.state !== Tone.State.Started) {\n      elapsedSeconds += e.time - periodStartTime;\n    }\n\n    lastState = e;\n  }.bind(this)); //remove the temporary event\n\n\n  this._state.remove(tmpEvent); //return the ticks\n\n\n  return elapsedSeconds;\n};\n/**\n * Set the clock's ticks at the given time.\n * @param  {Ticks} ticks The tick value to set\n * @param  {Time} time  When to set the tick value\n * @return {Tone.TickSource}       this\n */\n\n\nTone.TickSource.prototype.setTicksAtTime = function (ticks, time) {\n  time = this.toSeconds(time);\n\n  this._tickOffset.cancel(time);\n\n  this._tickOffset.add({\n    \"time\": time,\n    \"ticks\": ticks,\n    \"seconds\": this.frequency.getDurationOfTicks(ticks, time)\n  });\n\n  return this;\n};\n/**\n *  Returns the scheduled state at the given time.\n *  @param  {Time}  time  The time to query.\n *  @return  {String}  The name of the state input in setStateAtTime.\n *  @example\n * source.start(\"+0.1\");\n * source.getStateAtTime(\"+0.1\"); //returns \"started\"\n */\n\n\nTone.TickSource.prototype.getStateAtTime = function (time) {\n  time = this.toSeconds(time);\n  return this._state.getValueAtTime(time);\n};\n/**\n * Get the time of the given tick. The second argument\n * is when to test before. Since ticks can be set (with setTicksAtTime)\n * there may be multiple times for a given tick value. \n * @param  {Ticks} ticks The tick number.\n * @param  {Time=} before When to measure the tick value from. \n * @return {Time}       The time of the tick\n */\n\n\nTone.TickSource.prototype.getTimeOfTick = function (tick, before) {\n  before = Tone.defaultArg(before, this.now());\n\n  var offset = this._tickOffset.get(before);\n\n  var event = this._state.get(before);\n\n  var startTime = Math.max(offset.time, event.time);\n  var absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n  return this.frequency.getTimeOfTick(absoluteTicks);\n};\n/**\n * @callback forEachTickBetween\n * @param {Time} when\n * @param {Ticks} when\n */\n\n/**\n *  Invoke the callback event at all scheduled ticks between the \n *  start time and the end time\n *  @param  {Time}    startTime  The beginning of the search range\n *  @param  {Time}    endTime    The end of the search range\n *  @param  {ForEachCallback}  callback   The callback to invoke with each tick\n *  @return  {Tone.TickSource}    this\n */\n\n\nTone.TickSource.prototype.forEachTickBetween = function (startTime, endTime, callback) {\n  //only iterate through the sections where it is \"started\"\n  var lastStateEvent = this._state.get(startTime);\n\n  this._state.forEachBetween(startTime, endTime, function (event) {\n    if (lastStateEvent.state === Tone.State.Started && event.state !== Tone.State.Started) {\n      this.forEachTickBetween(Math.max(lastStateEvent.time, startTime), event.time - this.sampleTime, callback);\n    }\n\n    lastStateEvent = event;\n  }.bind(this));\n\n  startTime = Math.max(lastStateEvent.time, startTime);\n\n  if (lastStateEvent.state === Tone.State.Started && this._state) {\n    //figure out the difference between the frequency ticks and the \n    var startTicks = this.frequency.getTicksAtTime(startTime);\n    var ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n    var diff = startTicks - ticksAtStart;\n    var offset = diff % 1;\n\n    if (offset !== 0) {\n      offset = 1 - offset;\n    }\n\n    var nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n    var error = null;\n\n    while (nextTickTime < endTime && this._state) {\n      try {\n        callback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n      } catch (e) {\n        error = e;\n        break;\n      }\n\n      if (this._state) {\n        nextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n      }\n    }\n  }\n\n  if (error) {\n    throw error;\n  }\n\n  return this;\n};\n/**\n *  Clean up\n *  @returns {Tone.TickSource} this\n */\n\n\nTone.TickSource.prototype.dispose = function () {\n  Tone.Param.prototype.dispose.call(this);\n\n  this._state.dispose();\n\n  this._state = null;\n\n  this._tickOffset.dispose();\n\n  this._tickOffset = null;\n\n  this._writable(\"frequency\");\n\n  this.frequency.dispose();\n  this.frequency = null;\n  return this;\n};\n\nexport default Tone.TickSource;","import Tone from \"../core/Tone\";\nimport \"../source/TickSource\";\nimport \"../core/TimelineState\";\nimport \"../core/Emitter\";\nimport \"../core/Context\";\n/**\n *  @class  A sample accurate clock which provides a callback at the given rate.\n *          While the callback is not sample-accurate (it is still susceptible to\n *          loose JS timing), the time passed in as the argument to the callback\n *          is precise. For most applications, it is better to use Tone.Transport\n *          instead of the Clock by itself since you can synchronize multiple callbacks.\n *\n * \t@constructor\n *  @extends {Tone.Emitter}\n * \t@param {function} callback The callback to be invoked with the time of the audio event\n * \t@param {Frequency} frequency The rate of the callback\n * \t@example\n * //the callback will be invoked approximately once a second\n * //and will print the time exactly once a second apart.\n * var clock = new Tone.Clock(function(time){\n * \tconsole.log(time);\n * }, 1);\n */\n\nTone.Clock = function () {\n  var options = Tone.defaults(arguments, [\"callback\", \"frequency\"], Tone.Clock);\n  Tone.Emitter.call(this);\n  /**\n   *  The callback function to invoke at the scheduled tick.\n   *  @type  {Function}\n   */\n\n  this.callback = options.callback;\n  /**\n   *  The next time the callback is scheduled.\n   *  @type {Number}\n   *  @private\n   */\n\n  this._nextTick = 0;\n  /**\n   *  The tick counter\n   *  @type  {Tone.TickSource}\n   *  @private\n   */\n\n  this._tickSource = new Tone.TickSource(options.frequency);\n  /**\n   *  The last time the loop callback was invoked\n   *  @private\n   *  @type {Number}\n   */\n\n  this._lastUpdate = 0;\n  /**\n   *  The rate the callback function should be invoked.\n   *  @type  {BPM}\n   *  @signal\n   */\n\n  this.frequency = this._tickSource.frequency;\n\n  this._readOnly(\"frequency\");\n  /**\n   *  The state timeline\n   *  @type {Tone.TimelineState}\n   *  @private\n   */\n\n\n  this._state = new Tone.TimelineState(Tone.State.Stopped); //add an initial state\n\n  this._state.setStateAtTime(Tone.State.Stopped, 0);\n  /**\n   *  The loop function bound to its context.\n   *  This is necessary to remove the event in the end.\n   *  @type {Function}\n   *  @private\n   */\n\n\n  this._boundLoop = this._loop.bind(this); //bind a callback to the worker thread\n\n  this.context.on(\"tick\", this._boundLoop);\n};\n\nTone.extend(Tone.Clock, Tone.Emitter);\n/**\n *  The defaults\n *  @const\n *  @type  {Object}\n */\n\nTone.Clock.defaults = {\n  \"callback\": Tone.noOp,\n  \"frequency\": 1\n};\n/**\n *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n *  @type {Tone.State}\n *  @readOnly\n *  @memberOf Tone.Clock#\n *  @name state\n */\n\nObject.defineProperty(Tone.Clock.prototype, \"state\", {\n  get: function get() {\n    return this._state.getValueAtTime(this.now());\n  }\n});\n/**\n *  Start the clock at the given time. Optionally pass in an offset\n *  of where to start the tick counter from.\n *  @param  {Time=}  time    The time the clock should start\n *  @param  {Ticks=}  offset  Where the tick counter starts counting from.\n *  @return  {Tone.Clock}  this\n */\n\nTone.Clock.prototype.start = function (time, offset) {\n  //make sure the context is started\n  this.context.resume(); //start the loop\n\n  time = this.toSeconds(time);\n\n  if (this._state.getValueAtTime(time) !== Tone.State.Started) {\n    this._state.setStateAtTime(Tone.State.Started, time);\n\n    this._tickSource.start(time, offset);\n\n    if (time < this._lastUpdate) {\n      this.emit(\"start\", time, offset);\n    }\n  }\n\n  return this;\n};\n/**\n *  Stop the clock. Stopping the clock resets the tick counter to 0.\n *  @param {Time} [time=now] The time when the clock should stop.\n *  @returns {Tone.Clock} this\n *  @example\n * clock.stop();\n */\n\n\nTone.Clock.prototype.stop = function (time) {\n  time = this.toSeconds(time);\n\n  this._state.cancel(time);\n\n  this._state.setStateAtTime(Tone.State.Stopped, time);\n\n  this._tickSource.stop(time);\n\n  if (time < this._lastUpdate) {\n    this.emit(\"stop\", time);\n  }\n\n  return this;\n};\n/**\n *  Pause the clock. Pausing does not reset the tick counter.\n *  @param {Time} [time=now] The time when the clock should stop.\n *  @returns {Tone.Clock} this\n */\n\n\nTone.Clock.prototype.pause = function (time) {\n  time = this.toSeconds(time);\n\n  if (this._state.getValueAtTime(time) === Tone.State.Started) {\n    this._state.setStateAtTime(Tone.State.Paused, time);\n\n    this._tickSource.pause(time);\n\n    if (time < this._lastUpdate) {\n      this.emit(\"pause\", time);\n    }\n  }\n\n  return this;\n};\n/**\n *  The number of times the callback was invoked. Starts counting at 0\n *  and increments after the callback was invoked.\n *  @type {Ticks}\n */\n\n\nObject.defineProperty(Tone.Clock.prototype, \"ticks\", {\n  get: function get() {\n    return Math.ceil(this.getTicksAtTime(this.now()));\n  },\n  set: function set(t) {\n    this._tickSource.ticks = t;\n  }\n});\n/**\n *  The time since ticks=0 that the Clock has been running. Accounts\n *  for tempo curves\n *  @type {Seconds}\n */\n\nObject.defineProperty(Tone.Clock.prototype, \"seconds\", {\n  get: function get() {\n    return this._tickSource.seconds;\n  },\n  set: function set(s) {\n    this._tickSource.seconds = s;\n  }\n});\n/**\n *  Return the elapsed seconds at the given time.\n *  @param  {Time}  time  When to get the elapsed seconds\n *  @return  {Seconds}  The number of elapsed seconds\n */\n\nTone.Clock.prototype.getSecondsAtTime = function (time) {\n  return this._tickSource.getSecondsAtTime(time);\n};\n/**\n * Set the clock's ticks at the given time.\n * @param  {Ticks} ticks The tick value to set\n * @param  {Time} time  When to set the tick value\n * @return {Tone.Clock}       this\n */\n\n\nTone.Clock.prototype.setTicksAtTime = function (ticks, time) {\n  this._tickSource.setTicksAtTime(ticks, time);\n\n  return this;\n};\n/**\n * Get the clock's ticks at the given time.\n * @param  {Time} time  When to get the tick value\n * @return {Ticks}       The tick value at the given time.\n */\n\n\nTone.Clock.prototype.getTicksAtTime = function (time) {\n  return this._tickSource.getTicksAtTime(time);\n};\n/**\n * Get the time of the next tick\n * @param  {Ticks} ticks The tick number.\n * @param  {Time} before \n * @return {Tone.Clock}       this\n */\n\n\nTone.Clock.prototype.nextTickTime = function (offset, when) {\n  when = this.toSeconds(when);\n  var currentTick = this.getTicksAtTime(when);\n  return this._tickSource.getTimeOfTick(currentTick + offset, when);\n};\n/**\n *  The scheduling loop.\n *  @private\n */\n\n\nTone.Clock.prototype._loop = function () {\n  var startTime = this._lastUpdate;\n  var endTime = this.now();\n  this._lastUpdate = endTime;\n\n  if (startTime !== endTime) {\n    //the state change events\n    this._state.forEachBetween(startTime, endTime, function (e) {\n      switch (e.state) {\n        case Tone.State.Started:\n          var offset = this._tickSource.getTicksAtTime(e.time);\n\n          this.emit(\"start\", e.time, offset);\n          break;\n\n        case Tone.State.Stopped:\n          if (e.time !== 0) {\n            this.emit(\"stop\", e.time);\n          }\n\n          break;\n\n        case Tone.State.Paused:\n          this.emit(\"pause\", e.time);\n          break;\n      }\n    }.bind(this)); //the tick callbacks\n\n\n    this._tickSource.forEachTickBetween(startTime, endTime, function (time, ticks) {\n      this.callback(time, ticks);\n    }.bind(this));\n  }\n};\n/**\n *  Returns the scheduled state at the given time.\n *  @param  {Time}  time  The time to query.\n *  @return  {String}  The name of the state input in setStateAtTime.\n *  @example\n * clock.start(\"+0.1\");\n * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n */\n\n\nTone.Clock.prototype.getStateAtTime = function (time) {\n  time = this.toSeconds(time);\n  return this._state.getValueAtTime(time);\n};\n/**\n *  Clean up\n *  @returns {Tone.Clock} this\n */\n\n\nTone.Clock.prototype.dispose = function () {\n  Tone.Emitter.prototype.dispose.call(this);\n  this.context.off(\"tick\", this._boundLoop);\n\n  this._writable(\"frequency\");\n\n  this._tickSource.dispose();\n\n  this._tickSource = null;\n  this.frequency = null;\n  this._boundLoop = null;\n  this._nextTick = Infinity;\n  this.callback = null;\n\n  this._state.dispose();\n\n  this._state = null;\n};\n\nexport default Tone.Clock;","import Tone from \"../core/Tone\";\nimport \"../type/Type\";\n/**\n *  @class Similar to Tone.Timeline, but all events represent\n *         intervals with both \"time\" and \"duration\" times. The\n *         events are placed in a tree structure optimized\n *         for querying an intersection point with the timeline\n *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n *         to represent the data.\n *  @extends {Tone}\n */\n\nTone.IntervalTimeline = function () {\n  Tone.call(this);\n  /**\n   *  The root node of the inteval tree\n   *  @type  {IntervalNode}\n   *  @private\n   */\n\n  this._root = null;\n  /**\n   *  Keep track of the length of the timeline.\n   *  @type  {Number}\n   *  @private\n   */\n\n  this._length = 0;\n};\n\nTone.extend(Tone.IntervalTimeline);\n/**\n *  The event to add to the timeline. All events must\n *  have a time and duration value\n *  @param  {Object}  event  The event to add to the timeline\n *  @return  {Tone.IntervalTimeline}  this\n */\n\nTone.IntervalTimeline.prototype.add = function (event) {\n  if (Tone.isUndef(event.time) || Tone.isUndef(event.duration)) {\n    throw new Error(\"Tone.IntervalTimeline: events must have time and duration parameters\");\n  }\n\n  event.time = event.time.valueOf();\n  var node = new IntervalNode(event.time, event.time + event.duration, event);\n\n  if (this._root === null) {\n    this._root = node;\n  } else {\n    this._root.insert(node);\n  }\n\n  this._length++; // Restructure tree to be balanced\n\n  while (node !== null) {\n    node.updateHeight();\n    node.updateMax();\n\n    this._rebalance(node);\n\n    node = node.parent;\n  }\n\n  return this;\n};\n/**\n *  Remove an event from the timeline.\n *  @param  {Object}  event  The event to remove from the timeline\n *  @return  {Tone.IntervalTimeline}  this\n */\n\n\nTone.IntervalTimeline.prototype.remove = function (event) {\n  if (this._root !== null) {\n    var results = [];\n\n    this._root.search(event.time, results);\n\n    for (var i = 0; i < results.length; i++) {\n      var node = results[i];\n\n      if (node.event === event) {\n        this._removeNode(node);\n\n        this._length--;\n        break;\n      }\n    }\n  }\n\n  return this;\n};\n/**\n *  The number of items in the timeline.\n *  @type {Number}\n *  @memberOf Tone.IntervalTimeline#\n *  @name length\n *  @readOnly\n */\n\n\nObject.defineProperty(Tone.IntervalTimeline.prototype, \"length\", {\n  get: function get() {\n    return this._length;\n  }\n});\n/**\n *  Remove events whose time time is after the given time\n *  @param  {Number}  time  The time to query.\n *  @returns {Tone.IntervalTimeline} this\n */\n\nTone.IntervalTimeline.prototype.cancel = function (after) {\n  this.forEachFrom(after, function (event) {\n    this.remove(event);\n  }.bind(this));\n  return this;\n};\n/**\n *  Set the root node as the given node\n *  @param {IntervalNode} node\n *  @private\n */\n\n\nTone.IntervalTimeline.prototype._setRoot = function (node) {\n  this._root = node;\n\n  if (this._root !== null) {\n    this._root.parent = null;\n  }\n};\n/**\n *  Replace the references to the node in the node's parent\n *  with the replacement node.\n *  @param  {IntervalNode}  node\n *  @param  {IntervalNode}  replacement\n *  @private\n */\n\n\nTone.IntervalTimeline.prototype._replaceNodeInParent = function (node, replacement) {\n  if (node.parent !== null) {\n    if (node.isLeftChild()) {\n      node.parent.left = replacement;\n    } else {\n      node.parent.right = replacement;\n    }\n\n    this._rebalance(node.parent);\n  } else {\n    this._setRoot(replacement);\n  }\n};\n/**\n *  Remove the node from the tree and replace it with\n *  a successor which follows the schema.\n *  @param  {IntervalNode}  node\n *  @private\n */\n\n\nTone.IntervalTimeline.prototype._removeNode = function (node) {\n  if (node.left === null && node.right === null) {\n    this._replaceNodeInParent(node, null);\n  } else if (node.right === null) {\n    this._replaceNodeInParent(node, node.left);\n  } else if (node.left === null) {\n    this._replaceNodeInParent(node, node.right);\n  } else {\n    var balance = node.getBalance();\n    var replacement, temp;\n\n    if (balance > 0) {\n      if (node.left.right === null) {\n        replacement = node.left;\n        replacement.right = node.right;\n        temp = replacement;\n      } else {\n        replacement = node.left.right;\n\n        while (replacement.right !== null) {\n          replacement = replacement.right;\n        }\n\n        replacement.parent.right = replacement.left;\n        temp = replacement.parent;\n        replacement.left = node.left;\n        replacement.right = node.right;\n      }\n    } else if (node.right.left === null) {\n      replacement = node.right;\n      replacement.left = node.left;\n      temp = replacement;\n    } else {\n      replacement = node.right.left;\n\n      while (replacement.left !== null) {\n        replacement = replacement.left;\n      }\n\n      replacement.parent.left = replacement.right;\n      temp = replacement.parent;\n      replacement.left = node.left;\n      replacement.right = node.right;\n    }\n\n    if (node.parent !== null) {\n      if (node.isLeftChild()) {\n        node.parent.left = replacement;\n      } else {\n        node.parent.right = replacement;\n      }\n    } else {\n      this._setRoot(replacement);\n    } // this._replaceNodeInParent(node, replacement);\n\n\n    this._rebalance(temp);\n  }\n\n  node.dispose();\n};\n/**\n *  Rotate the tree to the left\n *  @param  {IntervalNode}  node\n *  @private\n */\n\n\nTone.IntervalTimeline.prototype._rotateLeft = function (node) {\n  var parent = node.parent;\n  var isLeftChild = node.isLeftChild(); // Make node.right the new root of this sub tree (instead of node)\n\n  var pivotNode = node.right;\n  node.right = pivotNode.left;\n  pivotNode.left = node;\n\n  if (parent !== null) {\n    if (isLeftChild) {\n      parent.left = pivotNode;\n    } else {\n      parent.right = pivotNode;\n    }\n  } else {\n    this._setRoot(pivotNode);\n  }\n};\n/**\n *  Rotate the tree to the right\n *  @param  {IntervalNode}  node\n *  @private\n */\n\n\nTone.IntervalTimeline.prototype._rotateRight = function (node) {\n  var parent = node.parent;\n  var isLeftChild = node.isLeftChild(); // Make node.left the new root of this sub tree (instead of node)\n\n  var pivotNode = node.left;\n  node.left = pivotNode.right;\n  pivotNode.right = node;\n\n  if (parent !== null) {\n    if (isLeftChild) {\n      parent.left = pivotNode;\n    } else {\n      parent.right = pivotNode;\n    }\n  } else {\n    this._setRoot(pivotNode);\n  }\n};\n/**\n *  Balance the BST\n *  @param  {IntervalNode}  node\n *  @private\n */\n\n\nTone.IntervalTimeline.prototype._rebalance = function (node) {\n  var balance = node.getBalance();\n\n  if (balance > 1) {\n    if (node.left.getBalance() < 0) {\n      this._rotateLeft(node.left);\n    } else {\n      this._rotateRight(node);\n    }\n  } else if (balance < -1) {\n    if (node.right.getBalance() > 0) {\n      this._rotateRight(node.right);\n    } else {\n      this._rotateLeft(node);\n    }\n  }\n};\n/**\n *  Get an event whose time and duration span the give time. Will\n *  return the match whose \"time\" value is closest to the given time.\n *  @param  {Object}  event  The event to add to the timeline\n *  @return  {Object}  The event which spans the desired time\n */\n\n\nTone.IntervalTimeline.prototype.get = function (time) {\n  if (this._root !== null) {\n    var results = [];\n\n    this._root.search(time, results);\n\n    if (results.length > 0) {\n      var max = results[0];\n\n      for (var i = 1; i < results.length; i++) {\n        if (results[i].low > max.low) {\n          max = results[i];\n        }\n      }\n\n      return max.event;\n    }\n  }\n\n  return null;\n};\n/**\n *  Iterate over everything in the timeline.\n *  @param  {Function}  callback The callback to invoke with every item\n *  @returns {Tone.IntervalTimeline} this\n */\n\n\nTone.IntervalTimeline.prototype.forEach = function (callback) {\n  if (this._root !== null) {\n    var allNodes = [];\n\n    this._root.traverse(function (node) {\n      allNodes.push(node);\n    });\n\n    for (var i = 0; i < allNodes.length; i++) {\n      var ev = allNodes[i].event;\n\n      if (ev) {\n        callback(ev);\n      }\n    }\n  }\n\n  return this;\n};\n/**\n *  Iterate over everything in the array in which the given time\n *  overlaps with the time and duration time of the event.\n *  @param  {Number}  time The time to check if items are overlapping\n *  @param  {Function}  callback The callback to invoke with every item\n *  @returns {Tone.IntervalTimeline} this\n */\n\n\nTone.IntervalTimeline.prototype.forEachAtTime = function (time, callback) {\n  if (this._root !== null) {\n    var results = [];\n\n    this._root.search(time, results);\n\n    for (var i = results.length - 1; i >= 0; i--) {\n      var ev = results[i].event;\n\n      if (ev) {\n        callback(ev);\n      }\n    }\n  }\n\n  return this;\n};\n/**\n *  Iterate over everything in the array in which the time is greater\n *  than or equal to the given time.\n *  @param  {Number}  time The time to check if items are before\n *  @param  {Function}  callback The callback to invoke with every item\n *  @returns {Tone.IntervalTimeline} this\n */\n\n\nTone.IntervalTimeline.prototype.forEachFrom = function (time, callback) {\n  if (this._root !== null) {\n    var results = [];\n\n    this._root.searchAfter(time, results);\n\n    for (var i = results.length - 1; i >= 0; i--) {\n      var ev = results[i].event;\n      callback(ev);\n    }\n  }\n\n  return this;\n};\n/**\n *  Clean up\n *  @return  {Tone.IntervalTimeline}  this\n */\n\n\nTone.IntervalTimeline.prototype.dispose = function () {\n  var allNodes = [];\n\n  if (this._root !== null) {\n    this._root.traverse(function (node) {\n      allNodes.push(node);\n    });\n  }\n\n  for (var i = 0; i < allNodes.length; i++) {\n    allNodes[i].dispose();\n  }\n\n  allNodes = null;\n  this._root = null;\n  return this;\n}; ///////////////////////////////////////////////////////////////////////////\n//\tINTERVAL NODE HELPER\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Represents a node in the binary search tree, with the addition\n *  of a \"high\" value which keeps track of the highest value of\n *  its children.\n *  References:\n *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n *  @param {Number} low\n *  @param {Number} high\n *  @private\n */\n\n\nvar IntervalNode = function IntervalNode(low, high, event) {\n  //the event container\n  this.event = event; //the low value\n\n  this.low = low; //the high value\n\n  this.high = high; //the high value for this and all child nodes\n\n  this.max = this.high; //the nodes to the left\n\n  this._left = null; //the nodes to the right\n\n  this._right = null; //the parent node\n\n  this.parent = null; //the number of child nodes\n\n  this.height = 0;\n};\n/**\n *  Insert a node into the correct spot in the tree\n *  @param  {IntervalNode}  node\n */\n\n\nIntervalNode.prototype.insert = function (node) {\n  if (node.low <= this.low) {\n    if (this.left === null) {\n      this.left = node;\n    } else {\n      this.left.insert(node);\n    }\n  } else if (this.right === null) {\n    this.right = node;\n  } else {\n    this.right.insert(node);\n  }\n};\n/**\n *  Search the tree for nodes which overlap\n *  with the given point\n *  @param  {Number}  point  The point to query\n *  @param  {Array}  results  The array to put the results\n */\n\n\nIntervalNode.prototype.search = function (point, results) {\n  // If p is to the right of the rightmost point of any interval\n  // in this node and all children, there won't be any matches.\n  if (point > this.max) {\n    return;\n  } // Search left children\n\n\n  if (this.left !== null) {\n    this.left.search(point, results);\n  } // Check this node\n\n\n  if (this.low <= point && this.high > point) {\n    results.push(this);\n  } // If p is to the left of the time of this interval,\n  // then it can't be in any child to the right.\n\n\n  if (this.low > point) {\n    return;\n  } // Search right children\n\n\n  if (this.right !== null) {\n    this.right.search(point, results);\n  }\n};\n/**\n *  Search the tree for nodes which are less\n *  than the given point\n *  @param  {Number}  point  The point to query\n *  @param  {Array}  results  The array to put the results\n */\n\n\nIntervalNode.prototype.searchAfter = function (point, results) {\n  // Check this node\n  if (this.low >= point) {\n    results.push(this);\n\n    if (this.left !== null) {\n      this.left.searchAfter(point, results);\n    }\n  } // search the right side\n\n\n  if (this.right !== null) {\n    this.right.searchAfter(point, results);\n  }\n};\n/**\n *  Invoke the callback on this element and both it's branches\n *  @param  {Function}  callback\n */\n\n\nIntervalNode.prototype.traverse = function (callback) {\n  callback(this);\n\n  if (this.left !== null) {\n    this.left.traverse(callback);\n  }\n\n  if (this.right !== null) {\n    this.right.traverse(callback);\n  }\n};\n/**\n *  Update the height of the node\n */\n\n\nIntervalNode.prototype.updateHeight = function () {\n  if (this.left !== null && this.right !== null) {\n    this.height = Math.max(this.left.height, this.right.height) + 1;\n  } else if (this.right !== null) {\n    this.height = this.right.height + 1;\n  } else if (this.left !== null) {\n    this.height = this.left.height + 1;\n  } else {\n    this.height = 0;\n  }\n};\n/**\n *  Update the height of the node\n */\n\n\nIntervalNode.prototype.updateMax = function () {\n  this.max = this.high;\n\n  if (this.left !== null) {\n    this.max = Math.max(this.max, this.left.max);\n  }\n\n  if (this.right !== null) {\n    this.max = Math.max(this.max, this.right.max);\n  }\n};\n/**\n *  The balance is how the leafs are distributed on the node\n *  @return  {Number}  Negative numbers are balanced to the right\n */\n\n\nIntervalNode.prototype.getBalance = function () {\n  var balance = 0;\n\n  if (this.left !== null && this.right !== null) {\n    balance = this.left.height - this.right.height;\n  } else if (this.left !== null) {\n    balance = this.left.height + 1;\n  } else if (this.right !== null) {\n    balance = -(this.right.height + 1);\n  }\n\n  return balance;\n};\n/**\n *  @returns {Boolean} true if this node is the left child\n *  of its parent\n */\n\n\nIntervalNode.prototype.isLeftChild = function () {\n  return this.parent !== null && this.parent.left === this;\n};\n/**\n *  get/set the left node\n *  @type {IntervalNode}\n */\n\n\nObject.defineProperty(IntervalNode.prototype, \"left\", {\n  get: function get() {\n    return this._left;\n  },\n  set: function set(node) {\n    this._left = node;\n\n    if (node !== null) {\n      node.parent = this;\n    }\n\n    this.updateHeight();\n    this.updateMax();\n  }\n});\n/**\n *  get/set the right node\n *  @type {IntervalNode}\n */\n\nObject.defineProperty(IntervalNode.prototype, \"right\", {\n  get: function get() {\n    return this._right;\n  },\n  set: function set(node) {\n    this._right = node;\n\n    if (node !== null) {\n      node.parent = this;\n    }\n\n    this.updateHeight();\n    this.updateMax();\n  }\n});\n/**\n *  null out references.\n */\n\nIntervalNode.prototype.dispose = function () {\n  this.parent = null;\n  this._left = null;\n  this._right = null;\n  this.event = null;\n}; ///////////////////////////////////////////////////////////////////////////\n//\tEND INTERVAL NODE HELPER\n///////////////////////////////////////////////////////////////////////////\n\n\nexport default Tone.IntervalTimeline;","import Tone from \"../core/Tone\";\nimport \"../type/TransportTime\";\n/**\n *  @class Tone.Ticks is a primitive type for encoding Time values.\n *         Tone.Ticks can be constructed with or without the `new` keyword. Tone.Ticks can be passed\n *         into the parameter of any method which takes time as an argument.\n *  @constructor\n *  @extends {Tone.TransportTime}\n *  @param  {String|Number}  val    The time value.\n *  @param  {String=}  units  The units of the value.\n *  @example\n * var t = Tone.Ticks(\"4n\");//a quarter note\n */\n\nTone.Ticks = function (val, units) {\n  if (this instanceof Tone.Ticks) {\n    Tone.TransportTime.call(this, val, units);\n  } else {\n    return new Tone.Ticks(val, units);\n  }\n};\n\nTone.extend(Tone.Ticks, Tone.TransportTime);\n/**\n *  The default units if none are given.\n *  @type {String}\n *  @private\n */\n\nTone.Ticks.prototype._defaultUnits = \"i\";\n/**\n * Get the current time in the given units\n * @return {Ticks}\n * @private\n */\n\nTone.Ticks.prototype._now = function () {\n  return Tone.Transport.ticks;\n};\n/**\n *  Return the value of the beats in the current units\n *  @param {Number} beats\n *  @return  {Number}\n *  @private\n */\n\n\nTone.Ticks.prototype._beatsToUnits = function (beats) {\n  return this._getPPQ() * beats;\n};\n/**\n *  Returns the value of a second in the current units\n *  @param {Seconds} seconds\n *  @return  {Number}\n *  @private\n */\n\n\nTone.Ticks.prototype._secondsToUnits = function (seconds) {\n  return Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n};\n/**\n *  Returns the value of a tick in the current time units\n *  @param {Ticks} ticks\n *  @return  {Number}\n *  @private\n */\n\n\nTone.Ticks.prototype._ticksToUnits = function (ticks) {\n  return ticks;\n};\n/**\n *  Return the time in ticks\n *  @return  {Ticks}\n */\n\n\nTone.Ticks.prototype.toTicks = function () {\n  return this.valueOf();\n};\n/**\n *  Return the time in ticks\n *  @return  {Ticks}\n */\n\n\nTone.Ticks.prototype.toSeconds = function () {\n  return this.valueOf() / this._getPPQ() * (60 / this._getBpm());\n};\n\nexport default Tone.Ticks;","import Tone from \"../core/Tone\";\nimport \"../type/Ticks\";\n/**\n *  @class Tone.TransportEvent is an internal class used by (Tone.Transport)[Transport]\n *         to schedule events. Do no invoke this class directly, it is\n *         handled from within Tone.Transport.\n *  @extends {Tone}\n *  @param {Object} options\n */\n\nTone.TransportEvent = function (Transport, options) {\n  options = Tone.defaultArg(options, Tone.TransportEvent.defaults);\n  Tone.call(this);\n  /**\n   * Reference to the Transport that created it\n   * @type {Tone.Transport}\n   */\n\n  this.Transport = Transport;\n  /**\n   * The unique id of the event\n   * @type {Number}\n   */\n\n  this.id = Tone.TransportEvent._eventId++;\n  /**\n   * The time the event starts\n   * @type {Ticks}\n   */\n\n  this.time = Tone.Ticks(options.time);\n  /**\n   * The callback to invoke\n   * @type {Function}\n   */\n\n  this.callback = options.callback;\n  /**\n   * If the event should be removed after being created.\n   * @type {Boolean}\n   * @private\n   */\n\n  this._once = options.once;\n};\n\nTone.extend(Tone.TransportEvent);\n/**\n * The defaults\n * @static\n * @type {Object}\n */\n\nTone.TransportEvent.defaults = {\n  \"once\": false,\n  \"callback\": Tone.noOp\n};\n/**\n * Current ID counter\n * @private\n * @static\n * @type {Number}\n */\n\nTone.TransportEvent._eventId = 0;\n/**\n * Invoke the event callback.\n * @param  {Time} time  The AudioContext time in seconds of the event\n */\n\nTone.TransportEvent.prototype.invoke = function (time) {\n  if (this.callback) {\n    this.callback(time);\n\n    if (this._once && this.Transport) {\n      this.Transport.clear(this.id);\n    }\n  }\n};\n/**\n * Clean up\n * @return {Tone.TransportEvent} this\n */\n\n\nTone.TransportEvent.prototype.dispose = function () {\n  Tone.prototype.dispose.call(this);\n  this.Transport = null;\n  this.callback = null;\n  this.time = null;\n  return this;\n};\n\nexport default Tone.TransportEvent;","import Tone from \"../core/Tone\";\nimport \"../core/TransportEvent\";\nimport \"../type/Ticks\";\n/**\n *  @class Tone.TransportRepeatEvent is an internal class used by Tone.Transport\n *         to schedule repeat events. This class should not be instantiated directly.\n *  @extends {Tone.TransportEvent}\n *  @param {Object} options\n */\n\nTone.TransportRepeatEvent = function (Transport, options) {\n  Tone.TransportEvent.call(this, Transport, options);\n  options = Tone.defaultArg(options, Tone.TransportRepeatEvent.defaults);\n  /**\n   * When the event should stop repeating\n   * @type {Ticks}\n   * @private\n   */\n\n  this.duration = Tone.Ticks(options.duration);\n  /**\n   * The interval of the repeated event\n   * @type {Ticks}\n   * @private\n   */\n\n  this._interval = Tone.Ticks(options.interval);\n  /**\n   * The ID of the current timeline event\n   * @type {Number}\n   * @private\n   */\n\n  this._currentId = -1;\n  /**\n   * The ID of the next timeline event\n   * @type {Number}\n   * @private\n   */\n\n  this._nextId = -1;\n  /**\n    * The time of the next event\n    * @type {Ticks}\n    * @private\n    */\n\n  this._nextTick = this.time;\n  /**\n   * a reference to the bound start method\n   * @type {Function}\n   * @private\n   */\n\n  this._boundRestart = this._restart.bind(this);\n  this.Transport.on(\"start loopStart\", this._boundRestart);\n\n  this._restart();\n};\n\nTone.extend(Tone.TransportRepeatEvent, Tone.TransportEvent);\n/**\n * The defaults\n * @static\n * @type {Object}\n */\n\nTone.TransportRepeatEvent.defaults = {\n  \"duration\": Infinity,\n  \"interval\": 1\n};\n/**\n * Invoke the callback. Returns the tick time which\n * the next event should be scheduled at.\n * @param  {Number} time  The AudioContext time in seconds of the event\n */\n\nTone.TransportRepeatEvent.prototype.invoke = function (time) {\n  //create more events if necessary\n  this._createEvents(time); //call the super class\n\n\n  Tone.TransportEvent.prototype.invoke.call(this, time);\n};\n/**\n * Push more events onto the timeline to keep up with the position of the timeline\n * @private\n */\n\n\nTone.TransportRepeatEvent.prototype._createEvents = function (time) {\n  // schedule the next event\n  var ticks = this.Transport.getTicksAtTime(time);\n\n  if (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n    this._nextTick += this._interval;\n    this._currentId = this._nextId;\n    this._nextId = this.Transport.scheduleOnce(this.invoke.bind(this), Tone.Ticks(this._nextTick));\n  }\n};\n/**\n * Push more events onto the timeline to keep up with the position of the timeline\n * @private\n */\n\n\nTone.TransportRepeatEvent.prototype._restart = function (time) {\n  this.Transport.clear(this._currentId);\n  this.Transport.clear(this._nextId);\n  this._nextTick = this.time;\n  var ticks = this.Transport.getTicksAtTime(time);\n\n  if (ticks > this.time) {\n    this._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n  }\n\n  this._currentId = this.Transport.scheduleOnce(this.invoke.bind(this), Tone.Ticks(this._nextTick));\n  this._nextTick += this._interval;\n  this._nextId = this.Transport.scheduleOnce(this.invoke.bind(this), Tone.Ticks(this._nextTick));\n};\n/**\n * Clean up\n * @return {Tone.TransportRepeatEvent} this\n */\n\n\nTone.TransportRepeatEvent.prototype.dispose = function () {\n  this.Transport.clear(this._currentId);\n  this.Transport.clear(this._nextId);\n  this.Transport.off(\"start loopStart\", this._boundRestart);\n  this._boundCreateEvents = null;\n  Tone.TransportEvent.prototype.dispose.call(this);\n  this.duration = null;\n  this._interval = null;\n  return this;\n};\n\nexport default Tone.TransportRepeatEvent;","import Tone from \"../core/Tone\";\nimport \"../core/Clock\";\nimport \"../type/Type\";\nimport \"../core/Timeline\";\nimport \"../core/Emitter\";\nimport \"../core/Gain\";\nimport \"../core/IntervalTimeline\";\nimport \"../core/TransportRepeatEvent\";\nimport \"../core/TransportEvent\";\n/**\n *  @class  Transport for timing musical events.\n *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n *          Tone.Transport timing events pass in the exact time of the scheduled event\n *          in the argument of the callback function. Pass that time value to the object\n *          you're scheduling. <br><br>\n *          A single transport is created for you when the library is initialized.\n *          <br><br>\n *          The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n *          called with the time of that event as the argument.\n *\n *  @extends {Tone.Emitter}\n *  @singleton\n *  @example\n * //repeated event every 8th note\n * Tone.Transport.scheduleRepeat(function(time){\n * \t//do something with the time\n * }, \"8n\");\n *  @example\n * //schedule an event on the 16th measure\n * Tone.Transport.schedule(function(time){\n * \t//do something with the time\n * }, \"16:0:0\");\n */\n\nTone.Transport = function () {\n  Tone.Emitter.call(this);\n  Tone.getContext(function () {\n    ///////////////////////////////////////////////////////////////////////\n    //\tLOOPING\n    //////////////////////////////////////////////////////////////////////\n\n    /**\n     * \tIf the transport loops or not.\n     *  @type {boolean}\n     */\n    this.loop = false;\n    /**\n     * \tThe loop start position in ticks\n     *  @type {Ticks}\n     *  @private\n     */\n\n    this._loopStart = 0;\n    /**\n     * \tThe loop end position in ticks\n     *  @type {Ticks}\n     *  @private\n     */\n\n    this._loopEnd = 0; ///////////////////////////////////////////////////////////////////////\n    //\tCLOCK/TEMPO\n    //////////////////////////////////////////////////////////////////////\n\n    /**\n     *  Pulses per quarter is the number of ticks per quarter note.\n     *  @private\n     *  @type  {Number}\n     */\n\n    this._ppq = TransportConstructor.defaults.PPQ;\n    /**\n     *  watches the main oscillator for timing ticks\n     *  initially starts at 120bpm\n     *  @private\n     *  @type {Tone.Clock}\n     */\n\n    this._clock = new Tone.Clock({\n      \"callback\": this._processTick.bind(this),\n      \"frequency\": 0\n    });\n\n    this._bindClockEvents();\n    /**\n     *  The Beats Per Minute of the Transport.\n     *  @type {BPM}\n     *  @signal\n     *  @example\n     * Tone.Transport.bpm.value = 80;\n     * //ramp the bpm to 120 over 10 seconds\n     * Tone.Transport.bpm.rampTo(120, 10);\n     */\n\n\n    this.bpm = this._clock.frequency;\n    this.bpm._toUnits = this._toUnits.bind(this);\n    this.bpm._fromUnits = this._fromUnits.bind(this);\n    this.bpm.units = Tone.Type.BPM;\n    this.bpm.value = TransportConstructor.defaults.bpm;\n\n    this._readOnly(\"bpm\");\n    /**\n     *  The time signature, or more accurately the numerator\n     *  of the time signature over a denominator of 4.\n     *  @type {Number}\n     *  @private\n     */\n\n\n    this._timeSignature = TransportConstructor.defaults.timeSignature; ///////////////////////////////////////////////////////////////////////\n    //\tTIMELINE EVENTS\n    //////////////////////////////////////////////////////////////////////\n\n    /**\n     *  All the events in an object to keep track by ID\n     *  @type {Object}\n     *  @private\n     */\n\n    this._scheduledEvents = {};\n    /**\n     * \tThe scheduled events.\n     *  @type {Tone.Timeline}\n     *  @private\n     */\n\n    this._timeline = new Tone.Timeline();\n    /**\n     *  Repeated events\n     *  @type {Array}\n     *  @private\n     */\n\n    this._repeatedEvents = new Tone.IntervalTimeline();\n    /**\n     *  All of the synced Signals\n     *  @private\n     *  @type {Array}\n     */\n\n    this._syncedSignals = []; ///////////////////////////////////////////////////////////////////////\n    //\tSWING\n    //////////////////////////////////////////////////////////////////////\n\n    /**\n     *  The subdivision of the swing\n     *  @type  {Ticks}\n     *  @private\n     */\n\n    this._swingTicks = TransportConstructor.defaults.PPQ / 2; //8n\n\n    /**\n     *  The swing amount\n     *  @type {NormalRange}\n     *  @private\n     */\n\n    this._swingAmount = 0; //transport is a singleton so it adds itself to the context\n\n    this.context.transport = this;\n  }.bind(this));\n};\n\nTone.extend(Tone.Transport, Tone.Emitter);\n/**\n *  the defaults\n *  @type {Object}\n *  @const\n *  @static\n */\n\nTone.Transport.defaults = {\n  \"bpm\": 120,\n  \"swing\": 0,\n  \"swingSubdivision\": \"8n\",\n  \"timeSignature\": 4,\n  \"loopStart\": 0,\n  \"loopEnd\": \"4m\",\n  \"PPQ\": 192\n};\n/**\n * Is an instanceof Tone.Transport\n * @type {Boolean}\n */\n\nTone.Transport.prototype.isTransport = true; ///////////////////////////////////////////////////////////////////////////////\n//\tTICKS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n *  called on every tick\n *  @param   {number} tickTime clock relative tick time\n *  @private\n */\n\nTone.Transport.prototype._processTick = function (tickTime, ticks) {\n  //handle swing\n  if (this._swingAmount > 0 && ticks % this._ppq !== 0 && //not on a downbeat\n  ticks % (this._swingTicks * 2) !== 0) {\n    //add some swing\n    var progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);\n\n    var amount = Math.sin(progress * Math.PI) * this._swingAmount;\n\n    tickTime += Tone.Ticks(this._swingTicks * 2 / 3).toSeconds() * amount;\n  } //do the loop test\n\n\n  if (this.loop) {\n    if (ticks >= this._loopEnd) {\n      this.emit(\"loopEnd\", tickTime);\n\n      this._clock.setTicksAtTime(this._loopStart, tickTime);\n\n      ticks = this._loopStart;\n      this.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n      this.emit(\"loop\", tickTime);\n    }\n  } //invoke the timeline events scheduled on this tick\n\n\n  this._timeline.forEachAtTime(ticks, function (event) {\n    event.invoke(tickTime);\n  });\n}; ///////////////////////////////////////////////////////////////////////////////\n//\tSCHEDULABLE EVENTS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n *  Schedule an event along the timeline.\n *  @param {Function} callback The callback to be invoked at the time.\n *  @param {TransportTime}  time The time to invoke the callback at.\n *  @return {Number} The id of the event which can be used for canceling the event.\n *  @example\n * //trigger the callback when the Transport reaches the desired time\n * Tone.Transport.schedule(function(time){\n * \tenvelope.triggerAttack(time);\n * }, \"128i\");\n */\n\n\nTone.Transport.prototype.schedule = function (callback, time) {\n  var event = new Tone.TransportEvent(this, {\n    \"time\": Tone.TransportTime(time),\n    \"callback\": callback\n  });\n  return this._addEvent(event, this._timeline);\n};\n/**\n *  Schedule a repeated event along the timeline. The event will fire\n *  at the `interval` starting at the `startTime` and for the specified\n *  `duration`.\n *  @param  {Function}  callback   The callback to invoke.\n *  @param  {Time}    interval   The duration between successive\n *                               callbacks. Must be a positive number.\n *  @param  {TransportTime=}    startTime  When along the timeline the events should\n *                               start being invoked.\n *  @param {Time} [duration=Infinity] How long the event should repeat.\n *  @return  {Number}    The ID of the scheduled event. Use this to cancel\n *                           the event.\n *  @example\n * //a callback invoked every eighth note after the first measure\n * Tone.Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n */\n\n\nTone.Transport.prototype.scheduleRepeat = function (callback, interval, startTime, duration) {\n  var event = new Tone.TransportRepeatEvent(this, {\n    \"callback\": callback,\n    \"interval\": Tone.Time(interval),\n    \"time\": Tone.TransportTime(startTime),\n    \"duration\": Tone.Time(Tone.defaultArg(duration, Infinity))\n  }); //kick it off if the Transport is started\n\n  return this._addEvent(event, this._repeatedEvents);\n};\n/**\n *  Schedule an event that will be removed after it is invoked. \n *  @param {Function} callback The callback to invoke once.\n *  @param {TransportTime} time The time the callback should be invoked.\n *  @returns {Number} The ID of the scheduled event.\n */\n\n\nTone.Transport.prototype.scheduleOnce = function (callback, time) {\n  var event = new Tone.TransportEvent(this, {\n    \"time\": Tone.TransportTime(time),\n    \"callback\": callback,\n    \"once\": true\n  });\n  return this._addEvent(event, this._timeline);\n};\n/**\n *  Clear the passed in event id from the timeline\n *  @param {Number} eventId The id of the event.\n *  @returns {Tone.Transport} this\n */\n\n\nTone.Transport.prototype.clear = function (eventId) {\n  if (this._scheduledEvents.hasOwnProperty(eventId)) {\n    var item = this._scheduledEvents[eventId.toString()];\n\n    item.timeline.remove(item.event);\n    item.event.dispose();\n    delete this._scheduledEvents[eventId.toString()];\n  }\n\n  return this;\n};\n/**\n * Add an event to the correct timeline. Keep track of the\n * timeline it was added to.\n * @param {Tone.TransportEvent}\tevent\n * @param {Tone.Timeline} timeline\n * @returns {Number} the event id which was just added\n * @private\n */\n\n\nTone.Transport.prototype._addEvent = function (event, timeline) {\n  this._scheduledEvents[event.id.toString()] = {\n    \"event\": event,\n    \"timeline\": timeline\n  };\n  timeline.add(event);\n  return event.id;\n};\n/**\n *  Remove scheduled events from the timeline after\n *  the given time. Repeated events will be removed\n *  if their startTime is after the given time\n *  @param {TransportTime} [after=0] Clear all events after\n *                          this time.\n *  @returns {Tone.Transport} this\n */\n\n\nTone.Transport.prototype.cancel = function (after) {\n  after = Tone.defaultArg(after, 0);\n  after = this.toTicks(after);\n\n  this._timeline.forEachFrom(after, function (event) {\n    this.clear(event.id);\n  }.bind(this));\n\n  this._repeatedEvents.forEachFrom(after, function (event) {\n    this.clear(event.id);\n  }.bind(this));\n\n  return this;\n}; ///////////////////////////////////////////////////////////////////////////////\n//\tSTART/STOP/PAUSE\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n *  Bind start/stop/pause events from the clock and emit them.\n *  @private\n */\n\n\nTone.Transport.prototype._bindClockEvents = function () {\n  this._clock.on(\"start\", function (time, offset) {\n    offset = Tone.Ticks(offset).toSeconds();\n    this.emit(\"start\", time, offset);\n  }.bind(this));\n\n  this._clock.on(\"stop\", function (time) {\n    this.emit(\"stop\", time);\n  }.bind(this));\n\n  this._clock.on(\"pause\", function (time) {\n    this.emit(\"pause\", time);\n  }.bind(this));\n};\n/**\n *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n *  @type {Tone.State}\n *  @readOnly\n *  @memberOf Tone.Transport#\n *  @name state\n */\n\n\nObject.defineProperty(Tone.Transport.prototype, \"state\", {\n  get: function get() {\n    return this._clock.getStateAtTime(this.now());\n  }\n});\n/**\n *  Start the transport and all sources synced to the transport.\n *  @param  {Time} [time=now] The time when the transport should start.\n *  @param  {TransportTime=} offset The timeline offset to start the transport.\n *  @returns {Tone.Transport} this\n *  @example\n * //start the transport in one second starting at beginning of the 5th measure.\n * Tone.Transport.start(\"+1\", \"4:0:0\");\n */\n\nTone.Transport.prototype.start = function (time, offset) {\n  //start the clock\n  if (Tone.isDefined(offset)) {\n    offset = this.toTicks(offset);\n  }\n\n  this._clock.start(time, offset);\n\n  return this;\n};\n/**\n *  Stop the transport and all sources synced to the transport.\n *  @param  {Time} [time=now] The time when the transport should stop.\n *  @returns {Tone.Transport} this\n *  @example\n * Tone.Transport.stop();\n */\n\n\nTone.Transport.prototype.stop = function (time) {\n  this._clock.stop(time);\n\n  return this;\n};\n/**\n *  Pause the transport and all sources synced to the transport.\n *  @param  {Time} [time=now]\n *  @returns {Tone.Transport} this\n */\n\n\nTone.Transport.prototype.pause = function (time) {\n  this._clock.pause(time);\n\n  return this;\n};\n/**\n * Toggle the current state of the transport. If it is\n * started, it will stop it, otherwise it will start the Transport.\n * @param  {Time=} time The time of the event\n * @return {Tone.Transport}      this\n */\n\n\nTone.Transport.prototype.toggle = function (time) {\n  time = this.toSeconds(time);\n\n  if (this._clock.getStateAtTime(time) !== Tone.State.Started) {\n    this.start(time);\n  } else {\n    this.stop(time);\n  }\n\n  return this;\n}; ///////////////////////////////////////////////////////////////////////////////\n//\tSETTERS/GETTERS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n *  The time signature as just the numerator over 4.\n *  For example 4/4 would be just 4 and 6/8 would be 3.\n *  @memberOf Tone.Transport#\n *  @type {Number|Array}\n *  @name timeSignature\n *  @example\n * //common time\n * Tone.Transport.timeSignature = 4;\n * // 7/8\n * Tone.Transport.timeSignature = [7, 8];\n * //this will be reduced to a single number\n * Tone.Transport.timeSignature; //returns 3.5\n */\n\n\nObject.defineProperty(Tone.Transport.prototype, \"timeSignature\", {\n  get: function get() {\n    return this._timeSignature;\n  },\n  set: function set(timeSig) {\n    if (Tone.isArray(timeSig)) {\n      timeSig = timeSig[0] / timeSig[1] * 4;\n    }\n\n    this._timeSignature = timeSig;\n  }\n});\n/**\n * When the Tone.Transport.loop = true, this is the starting position of the loop.\n * @memberOf Tone.Transport#\n * @type {Time}\n * @name loopStart\n */\n\nObject.defineProperty(Tone.Transport.prototype, \"loopStart\", {\n  get: function get() {\n    return Tone.Ticks(this._loopStart).toSeconds();\n  },\n  set: function set(startPosition) {\n    this._loopStart = this.toTicks(startPosition);\n  }\n});\n/**\n * When the Tone.Transport.loop = true, this is the ending position of the loop.\n * @memberOf Tone.Transport#\n * @type {Time}\n * @name loopEnd\n */\n\nObject.defineProperty(Tone.Transport.prototype, \"loopEnd\", {\n  get: function get() {\n    return Tone.Ticks(this._loopEnd).toSeconds();\n  },\n  set: function set(endPosition) {\n    this._loopEnd = this.toTicks(endPosition);\n  }\n});\n/**\n *  Set the loop start and stop at the same time.\n *  @param {TransportTime} startPosition\n *  @param {TransportTime} endPosition\n *  @returns {Tone.Transport} this\n *  @example\n * //loop over the first measure\n * Tone.Transport.setLoopPoints(0, \"1m\");\n * Tone.Transport.loop = true;\n */\n\nTone.Transport.prototype.setLoopPoints = function (startPosition, endPosition) {\n  this.loopStart = startPosition;\n  this.loopEnd = endPosition;\n  return this;\n};\n/**\n *  The swing value. Between 0-1 where 1 equal to\n *  the note + half the subdivision.\n *  @memberOf Tone.Transport#\n *  @type {NormalRange}\n *  @name swing\n */\n\n\nObject.defineProperty(Tone.Transport.prototype, \"swing\", {\n  get: function get() {\n    return this._swingAmount;\n  },\n  set: function set(amount) {\n    //scale the values to a normal range\n    this._swingAmount = amount;\n  }\n});\n/**\n *  Set the subdivision which the swing will be applied to.\n *  The default value is an 8th note. Value must be less\n *  than a quarter note.\n *\n *  @memberOf Tone.Transport#\n *  @type {Time}\n *  @name swingSubdivision\n */\n\nObject.defineProperty(Tone.Transport.prototype, \"swingSubdivision\", {\n  get: function get() {\n    return Tone.Ticks(this._swingTicks).toNotation();\n  },\n  set: function set(subdivision) {\n    this._swingTicks = this.toTicks(subdivision);\n  }\n});\n/**\n *  The Transport's position in Bars:Beats:Sixteenths.\n *  Setting the value will jump to that position right away.\n *  @memberOf Tone.Transport#\n *  @type {BarsBeatsSixteenths}\n *  @name position\n */\n\nObject.defineProperty(Tone.Transport.prototype, \"position\", {\n  get: function get() {\n    var now = this.now();\n\n    var ticks = this._clock.getTicksAtTime(now);\n\n    return Tone.Ticks(ticks).toBarsBeatsSixteenths();\n  },\n  set: function set(progress) {\n    var ticks = this.toTicks(progress);\n    this.ticks = ticks;\n  }\n});\n/**\n *  The Transport's position in seconds\n *  Setting the value will jump to that position right away.\n *  @memberOf Tone.Transport#\n *  @type {Seconds}\n *  @name seconds\n */\n\nObject.defineProperty(Tone.Transport.prototype, \"seconds\", {\n  get: function get() {\n    return this._clock.seconds;\n  },\n  set: function set(s) {\n    var now = this.now();\n    var ticks = this.bpm.timeToTicks(s, now);\n    this.ticks = ticks;\n  }\n});\n/**\n *  The Transport's loop position as a normalized value. Always\n *  returns 0 if the transport if loop is not true.\n *  @memberOf Tone.Transport#\n *  @name progress\n *  @type {NormalRange}\n */\n\nObject.defineProperty(Tone.Transport.prototype, \"progress\", {\n  get: function get() {\n    if (this.loop) {\n      var now = this.now();\n\n      var ticks = this._clock.getTicksAtTime(now);\n\n      return (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n    } else {\n      return 0;\n    }\n  }\n});\n/**\n *  The transports current tick position.\n *\n *  @memberOf Tone.Transport#\n *  @type {Ticks}\n *  @name ticks\n */\n\nObject.defineProperty(Tone.Transport.prototype, \"ticks\", {\n  get: function get() {\n    return this._clock.ticks;\n  },\n  set: function set(t) {\n    if (this._clock.ticks !== t) {\n      var now = this.now(); //stop everything synced to the transport\n\n      if (this.state === Tone.State.Started) {\n        this.emit(\"stop\", now);\n\n        this._clock.setTicksAtTime(t, now); //restart it with the new time\n\n\n        this.emit(\"start\", now, this.seconds);\n      } else {\n        this._clock.setTicksAtTime(t, now);\n      }\n    }\n  }\n});\n/**\n * Get the clock's ticks at the given time.\n * @param  {Time} time  When to get the tick value\n * @return {Ticks}       The tick value at the given time.\n */\n\nTone.Transport.prototype.getTicksAtTime = function (time) {\n  return Math.round(this._clock.getTicksAtTime(time));\n};\n/**\n *  Return the elapsed seconds at the given time.\n *  @param  {Time}  time  When to get the elapsed seconds\n *  @return  {Seconds}  The number of elapsed seconds\n */\n\n\nTone.Transport.prototype.getSecondsAtTime = function (time) {\n  return this._clock.getSecondsAtTime(time);\n};\n/**\n *  Pulses Per Quarter note. This is the smallest resolution\n *  the Transport timing supports. This should be set once\n *  on initialization and not set again. Changing this value\n *  after other objects have been created can cause problems.\n *\n *  @memberOf Tone.Transport#\n *  @type {Number}\n *  @name PPQ\n */\n\n\nObject.defineProperty(Tone.Transport.prototype, \"PPQ\", {\n  get: function get() {\n    return this._ppq;\n  },\n  set: function set(ppq) {\n    var bpm = this.bpm.value;\n    this._ppq = ppq;\n    this.bpm.value = bpm;\n  }\n});\n/**\n *  Convert from BPM to frequency (factoring in PPQ)\n *  @param  {BPM}  bpm The BPM value to convert to frequency\n *  @return  {Frequency}  The BPM as a frequency with PPQ factored in.\n *  @private\n */\n\nTone.Transport.prototype._fromUnits = function (bpm) {\n  return 1 / (60 / bpm / this.PPQ);\n};\n/**\n *  Convert from frequency (with PPQ) into BPM\n *  @param  {Frequency}  freq The clocks frequency to convert to BPM\n *  @return  {BPM}  The frequency value as BPM.\n *  @private\n */\n\n\nTone.Transport.prototype._toUnits = function (freq) {\n  return freq / this.PPQ * 60;\n}; ///////////////////////////////////////////////////////////////////////////////\n//\tSYNCING\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n *  Returns the time aligned to the next subdivision\n *  of the Transport. If the Transport is not started,\n *  it will return 0.\n *  Note: this will not work precisely during tempo ramps.\n *  @param  {Time}  subdivision  The subdivision to quantize to\n *  @return  {Number}  The context time of the next subdivision.\n *  @example\n * Tone.Transport.start(); //the transport must be started\n * Tone.Transport.nextSubdivision(\"4n\");\n */\n\n\nTone.Transport.prototype.nextSubdivision = function (subdivision) {\n  subdivision = this.toTicks(subdivision);\n\n  if (this.state !== Tone.State.Started) {\n    //if the transport's not started, return 0\n    return 0;\n  } else {\n    var now = this.now(); //the remainder of the current ticks and the subdivision\n\n    var transportPos = this.getTicksAtTime(now);\n    var remainingTicks = subdivision - transportPos % subdivision;\n    return this._clock.nextTickTime(remainingTicks, now);\n  }\n};\n/**\n *  Attaches the signal to the tempo control signal so that\n *  any changes in the tempo will change the signal in the same\n *  ratio.\n *\n *  @param  {Tone.Signal} signal\n *  @param {number=} ratio Optionally pass in the ratio between\n *                         the two signals. Otherwise it will be computed\n *                         based on their current values.\n *  @returns {Tone.Transport} this\n */\n\n\nTone.Transport.prototype.syncSignal = function (signal, ratio) {\n  if (!ratio) {\n    //get the sync ratio\n    var now = this.now();\n\n    if (signal.getValueAtTime(now) !== 0) {\n      ratio = signal.getValueAtTime(now) / this.bpm.getValueAtTime(now);\n    } else {\n      ratio = 0;\n    }\n  }\n\n  var ratioSignal = new Tone.Gain(ratio);\n  this.bpm.chain(ratioSignal, signal._param);\n\n  this._syncedSignals.push({\n    \"ratio\": ratioSignal,\n    \"signal\": signal,\n    \"initial\": signal.value\n  });\n\n  signal.value = 0;\n  return this;\n};\n/**\n *  Unsyncs a previously synced signal from the transport's control.\n *  See Tone.Transport.syncSignal.\n *  @param  {Tone.Signal} signal\n *  @returns {Tone.Transport} this\n */\n\n\nTone.Transport.prototype.unsyncSignal = function (signal) {\n  for (var i = this._syncedSignals.length - 1; i >= 0; i--) {\n    var syncedSignal = this._syncedSignals[i];\n\n    if (syncedSignal.signal === signal) {\n      syncedSignal.ratio.dispose();\n      syncedSignal.signal.value = syncedSignal.initial;\n\n      this._syncedSignals.splice(i, 1);\n    }\n  }\n\n  return this;\n};\n/**\n *  Clean up.\n *  @returns {Tone.Transport} this\n *  @private\n */\n\n\nTone.Transport.prototype.dispose = function () {\n  Tone.Emitter.prototype.dispose.call(this);\n\n  this._clock.dispose();\n\n  this._clock = null;\n\n  this._writable(\"bpm\");\n\n  this.bpm = null;\n\n  this._timeline.dispose();\n\n  this._timeline = null;\n\n  this._repeatedEvents.dispose();\n\n  this._repeatedEvents = null;\n  return this;\n}; ///////////////////////////////////////////////////////////////////////////////\n//\tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////////\n\n\nvar TransportConstructor = Tone.Transport;\nTone.Transport = new TransportConstructor();\nTone.Context.on(\"init\", function (context) {\n  if (context.transport && context.transport.isTransport) {\n    Tone.Transport = context.transport;\n  } else {\n    Tone.Transport = new TransportConstructor();\n  }\n});\nTone.Context.on(\"close\", function (context) {\n  if (context.transport && context.transport.isTransport) {\n    context.transport.dispose();\n  }\n});\nexport default Tone.Transport;","import Tone from \"../core/Tone\";\nimport \"../core/Transport\";\nimport \"../component/Volume\";\nimport \"../core/Master\";\nimport \"../type/Type\";\nimport \"../core/TimelineState\";\nimport \"../signal/Signal\";\nimport \"../core/AudioNode\";\n/**\n *  @class  Base class for sources. Sources have start/stop methods\n *          and the ability to be synced to the\n *          start/stop of Tone.Transport.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @example\n * //Multiple state change events can be chained together,\n * //but must be set in the correct order and with ascending times\n *\n * // OK\n * state.start().stop(\"+0.2\");\n * // AND\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n *\n * // BAD\n * state.stop(\"+0.2\").start();\n * // OR\n * state.start(\"+0.3\").stop(\"+0.2\");\n *\n */\n\nTone.Source = function (options) {\n  options = Tone.defaultArg(options, Tone.Source.defaults);\n  Tone.AudioNode.call(this);\n  /**\n   *  The output volume node\n   *  @type  {Tone.Volume}\n   *  @private\n   */\n\n  this._volume = this.output = new Tone.Volume(options.volume);\n  /**\n   * The volume of the output in decibels.\n   * @type {Decibels}\n   * @signal\n   * @example\n   * source.volume.value = -6;\n   */\n\n  this.volume = this._volume.volume;\n\n  this._readOnly(\"volume\");\n  /**\n   * \tKeep track of the scheduled state.\n   *  @type {Tone.TimelineState}\n   *  @private\n   */\n\n\n  this._state = new Tone.TimelineState(Tone.State.Stopped);\n  this._state.memory = 100;\n  /**\n   *  The synced `start` callback function from the transport\n   *  @type {Function}\n   *  @private\n   */\n\n  this._synced = false;\n  /**\n   *  Keep track of all of the scheduled event ids\n   *  @type  {Array}\n   *  @private\n   */\n\n  this._scheduled = []; //make the output explicitly stereo\n\n  this._volume.output.output.channelCount = 2;\n  this._volume.output.output.channelCountMode = \"explicit\"; //mute initially\n\n  this.mute = options.mute;\n};\n\nTone.extend(Tone.Source, Tone.AudioNode);\n/**\n *  The default parameters\n *  @static\n *  @const\n *  @type {Object}\n */\n\nTone.Source.defaults = {\n  \"volume\": 0,\n  \"mute\": false\n};\n/**\n *  Returns the playback state of the source, either \"started\" or \"stopped\".\n *  @type {Tone.State}\n *  @readOnly\n *  @memberOf Tone.Source#\n *  @name state\n */\n\nObject.defineProperty(Tone.Source.prototype, \"state\", {\n  get: function get() {\n    if (this._synced) {\n      if (Tone.Transport.state === Tone.State.Started) {\n        return this._state.getValueAtTime(Tone.Transport.seconds);\n      } else {\n        return Tone.State.Stopped;\n      }\n    } else {\n      return this._state.getValueAtTime(this.now());\n    }\n  }\n});\n/**\n * Mute the output.\n * @memberOf Tone.Source#\n * @type {boolean}\n * @name mute\n * @example\n * //mute the output\n * source.mute = true;\n */\n\nObject.defineProperty(Tone.Source.prototype, \"mute\", {\n  get: function get() {\n    return this._volume.mute;\n  },\n  set: function set(mute) {\n    this._volume.mute = mute;\n  }\n}); //overwrite these functions\n\nTone.Source.prototype._start = Tone.noOp;\nTone.Source.prototype.restart = Tone.noOp;\nTone.Source.prototype._stop = Tone.noOp;\n/**\n *  Start the source at the specified time. If no time is given,\n *  start the source now.\n *  @param  {Time} [time=now] When the source should be started.\n *  @returns {Tone.Source} this\n *  @example\n * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n */\n\nTone.Source.prototype.start = function (time, offset, duration) {\n  if (Tone.isUndef(time) && this._synced) {\n    time = Tone.Transport.seconds;\n  } else {\n    time = this.toSeconds(time);\n    time = Math.max(time, this.context.currentTime);\n  } //if it's started, stop it and restart it\n\n\n  if (this._state.getValueAtTime(time) === Tone.State.Started) {\n    this._state.cancel(time);\n\n    this._state.setStateAtTime(Tone.State.Started, time);\n\n    this.restart(time, offset, duration);\n  } else {\n    this._state.setStateAtTime(Tone.State.Started, time);\n\n    if (this._synced) {\n      // add the offset time to the event\n      var event = this._state.get(time);\n\n      event.offset = Tone.defaultArg(offset, 0);\n      event.duration = duration;\n      var sched = Tone.Transport.schedule(function (t) {\n        this._start(t, offset, duration);\n      }.bind(this), time);\n\n      this._scheduled.push(sched); //if it's already started\n\n\n      if (Tone.Transport.state === Tone.State.Started) {\n        this._syncedStart(this.now(), Tone.Transport.seconds);\n      }\n    } else {\n      this._start.apply(this, arguments);\n    }\n  }\n\n  return this;\n};\n/**\n *  Stop the source at the specified time. If no time is given,\n *  stop the source now.\n *  @param  {Time} [time=now] When the source should be stopped.\n *  @returns {Tone.Source} this\n *  @example\n * source.stop(); // stops the source immediately\n */\n\n\nTone.Source.prototype.stop = function (time) {\n  if (Tone.isUndef(time) && this._synced) {\n    time = Tone.Transport.seconds;\n  } else {\n    time = this.toSeconds(time);\n    time = Math.max(time, this.context.currentTime);\n  }\n\n  if (!this._synced) {\n    this._stop.apply(this, arguments);\n  } else {\n    var sched = Tone.Transport.schedule(this._stop.bind(this), time);\n\n    this._scheduled.push(sched);\n  }\n\n  this._state.cancel(time);\n\n  this._state.setStateAtTime(Tone.State.Stopped, time);\n\n  return this;\n};\n/**\n *  Sync the source to the Transport so that all subsequent\n *  calls to `start` and `stop` are synced to the TransportTime\n *  instead of the AudioContext time.\n *\n *  @returns {Tone.Source} this\n *  @example\n * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n * source.sync().start(0).stop(0.3);\n * //start the transport.\n * Tone.Transport.start();\n *\n *  @example\n * //start the transport with an offset and the sync'ed sources\n * //will start in the correct position\n * source.sync().start(0.1);\n * //the source will be invoked with an offset of 0.4\n * Tone.Transport.start(\"+0.5\", 0.5);\n */\n\n\nTone.Source.prototype.sync = function () {\n  this._synced = true;\n\n  this._syncedStart = function (time, offset) {\n    if (offset > 0) {\n      // get the playback state at that time\n      var stateEvent = this._state.get(offset); // listen for start events which may occur in the middle of the sync'ed time\n\n\n      if (stateEvent && stateEvent.state === Tone.State.Started && stateEvent.time !== offset) {\n        // get the offset\n        var startOffset = offset - this.toSeconds(stateEvent.time);\n        var duration;\n\n        if (stateEvent.duration) {\n          duration = this.toSeconds(stateEvent.duration) - startOffset;\n        }\n\n        this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n      }\n    }\n  }.bind(this);\n\n  this._syncedStop = function (time) {\n    var seconds = Tone.Transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\n    if (this._state.getValueAtTime(seconds) === Tone.State.Started) {\n      this._stop(time);\n    }\n  }.bind(this);\n\n  Tone.Transport.on(\"start loopStart\", this._syncedStart);\n  Tone.Transport.on(\"stop pause loopEnd\", this._syncedStop);\n  return this;\n};\n/**\n *  Unsync the source to the Transport. See Tone.Source.sync\n *  @returns {Tone.Source} this\n */\n\n\nTone.Source.prototype.unsync = function () {\n  if (this._synced) {\n    Tone.Transport.off(\"stop pause loopEnd\", this._syncedStop);\n    Tone.Transport.off(\"start loopStart\", this._syncedStart);\n  }\n\n  this._synced = false; // clear all of the scheduled ids\n\n  for (var i = 0; i < this._scheduled.length; i++) {\n    var id = this._scheduled[i];\n    Tone.Transport.clear(id);\n  }\n\n  this._scheduled = [];\n\n  this._state.cancel(0);\n\n  return this;\n};\n/**\n *\tClean up.\n *  @return {Tone.Source} this\n */\n\n\nTone.Source.prototype.dispose = function () {\n  Tone.AudioNode.prototype.dispose.call(this);\n  this.unsync();\n  this._scheduled = null;\n\n  this._writable(\"volume\");\n\n  this._volume.dispose();\n\n  this._volume = null;\n  this.volume = null;\n\n  this._state.dispose();\n\n  this._state = null;\n};\n\nexport default Tone.Source;","import Tone from \"../core/Tone\";\nimport \"../core/Buffer\";\nimport \"../source/Source\";\nimport \"../core/Gain\";\nimport \"../core/AudioNode\";\n/**\n *  @class Wrapper around the native BufferSourceNode.\n *  @extends {Tone.AudioNode}\n *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n *  @param  {Function}  onload  The callback to invoke when the\n *                               buffer is done playing.\n */\n\nTone.BufferSource = function () {\n  var options = Tone.defaults(arguments, [\"buffer\", \"onload\"], Tone.BufferSource);\n  Tone.AudioNode.call(this, options);\n  /**\n   *  The callback to invoke after the\n   *  buffer source is done playing.\n   *  @type  {Function}\n   */\n\n  this.onended = options.onended;\n  /**\n   *  The time that the buffer was started.\n   *  @type  {Number}\n   *  @private\n   */\n\n  this._startTime = -1;\n  /**\n   *  An additional flag if the actual BufferSourceNode\n   *  has been started. b/c stopping an unstarted buffer\n   *  will throw it into an invalid state\n   *  @type  {Boolean}\n   *  @private\n   */\n\n  this._sourceStarted = false;\n  /**\n   *  Flag if the source has already been stopped\n   *  @type  {Boolean}\n   *  @private\n   */\n\n  this._sourceStopped = false;\n  /**\n   *  The time that the buffer is scheduled to stop.\n   *  @type  {Number}\n   *  @private\n   */\n\n  this._stopTime = -1;\n  /**\n   *  The gain node which envelopes the BufferSource\n   *  @type  {Tone.Gain}\n   *  @private\n   */\n\n  this._gainNode = this.output = new Tone.Gain(0);\n  /**\n   *  The buffer source\n   *  @type  {AudioBufferSourceNode}\n   *  @private\n   */\n\n  this._source = this.context.createBufferSource();\n  Tone.connect(this._source, this._gainNode);\n  this._source.onended = this._onended.bind(this);\n  /**\n   * The private buffer instance\n   * @type {Tone.Buffer}\n   * @private\n   */\n\n  this._buffer = new Tone.Buffer(options.buffer, options.onload);\n  /**\n   *  The playbackRate of the buffer\n   *  @type {Positive}\n   *  @signal\n   */\n\n  this.playbackRate = new Tone.Param({\n    param: this._source.playbackRate,\n    units: Tone.Type.Positive,\n    value: options.playbackRate\n  });\n  /**\n   *  The fadeIn time of the amplitude envelope.\n   *  @type {Time}\n   */\n\n  this.fadeIn = options.fadeIn;\n  /**\n   *  The fadeOut time of the amplitude envelope.\n   *  @type {Time}\n   */\n\n  this.fadeOut = options.fadeOut;\n  /**\n   * The curve applied to the fades, either \"linear\" or \"exponential\"\n   * @type {String}\n   */\n\n  this.curve = options.curve;\n  /**\n   * The onended timeout\n   * @type {Number}\n   * @private\n   */\n\n  this._onendedTimeout = -1; //set some values initially\n\n  this.loop = options.loop;\n  this.loopStart = options.loopStart;\n  this.loopEnd = options.loopEnd;\n};\n\nTone.extend(Tone.BufferSource, Tone.AudioNode);\n/**\n *  The defaults\n *  @const\n *  @type  {Object}\n */\n\nTone.BufferSource.defaults = {\n  \"onended\": Tone.noOp,\n  \"onload\": Tone.noOp,\n  \"loop\": false,\n  \"loopStart\": 0,\n  \"loopEnd\": 0,\n  \"fadeIn\": 0,\n  \"fadeOut\": 0,\n  \"curve\": \"linear\",\n  \"playbackRate\": 1\n};\n/**\n *  Returns the playback state of the source, either \"started\" or \"stopped\".\n *  @type {Tone.State}\n *  @readOnly\n *  @memberOf Tone.BufferSource#\n *  @name state\n */\n\nObject.defineProperty(Tone.BufferSource.prototype, \"state\", {\n  get: function get() {\n    return this.getStateAtTime(this.now());\n  }\n});\n/**\n *  Get the playback state at the given time\n *  @param  {Time}  time  The time to test the state at\n *  @return  {Tone.State}  The playback state. \n */\n\nTone.BufferSource.prototype.getStateAtTime = function (time) {\n  time = this.toSeconds(time);\n\n  if (this._startTime !== -1 && this._startTime <= time && (this._stopTime === -1 || time < this._stopTime) && !this._sourceStopped) {\n    return Tone.State.Started;\n  } else {\n    return Tone.State.Stopped;\n  }\n};\n/**\n *  Start the buffer\n *  @param  {Time} [startTime=now] When the player should start.\n *  @param  {Time} [offset=0] The offset from the beginning of the sample\n *                                 to start at.\n *  @param  {Time=} duration How long the sample should play. If no duration\n *                                is given, it will default to the full length\n *                                of the sample (minus any offset)\n *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.\n *  @return  {Tone.BufferSource}  this\n */\n\n\nTone.BufferSource.prototype.start = function (time, offset, duration, gain) {\n  this.log(\"start\", time, offset, duration, gain);\n  this.assert(this._startTime === -1, \"can only be started once\");\n  this.assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n  this.assert(!this._sourceStopped, \"source is already stopped\");\n  time = this.toSeconds(time); //if it's a loop the default offset is the loopstart point\n\n  if (this.loop) {\n    offset = Tone.defaultArg(offset, this.loopStart);\n  } else {\n    //otherwise the default offset is 0\n    offset = Tone.defaultArg(offset, 0);\n  }\n\n  offset = this.toSeconds(offset); //make sure the offset is not less than 0\n\n  offset = Math.max(offset, 0);\n  gain = Tone.defaultArg(gain, 1); //apply a fade in envelope\n\n  var fadeInTime = this.toSeconds(this.fadeIn);\n\n  if (fadeInTime > 0) {\n    this._gainNode.gain.setValueAtTime(0, time);\n\n    if (this.curve === \"linear\") {\n      this._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n    } else {\n      this._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n    }\n  } else {\n    this._gainNode.gain.setValueAtTime(gain, time);\n  }\n\n  this._startTime = time; //if a duration is given, schedule a stop\n\n  if (Tone.isDefined(duration)) {\n    var computedDur = this.toSeconds(duration); //make sure it's never negative\n\n    computedDur = Math.max(computedDur, 0);\n    this.stop(time + computedDur);\n  } //start the buffer source\n\n\n  if (this.loop) {\n    //modify the offset if it's greater than the loop time\n    var loopEnd = this.loopEnd || this.buffer.duration;\n    var loopStart = this.loopStart;\n    var loopDuration = loopEnd - loopStart; //move the offset back\n\n    if (offset >= loopEnd) {\n      offset = (offset - loopStart) % loopDuration + loopStart;\n    }\n  }\n\n  this._source.buffer = this.buffer.get();\n  this._source.loopEnd = this.loopEnd || this.buffer.duration;\n\n  if (offset < this.buffer.duration) {\n    this._sourceStarted = true;\n\n    this._source.start(time, offset);\n  }\n\n  return this;\n};\n/**\n *  Stop the buffer. \n *  @param  {Time=}  time         The time the buffer should stop.\n *  @return  {Tone.BufferSource}  this\n */\n\n\nTone.BufferSource.prototype.stop = function (time) {\n  this.log(\"stop\", time);\n  this.assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n  this.assert(!this._sourceStopped, \"source is already stopped\");\n  time = this.toSeconds(time); //if the event has already been scheduled, clear it\n\n  if (this._stopTime !== -1) {\n    this.cancelStop();\n  } //the fadeOut time\n\n\n  var fadeOutTime = this.toSeconds(this.fadeOut); //cancel the previous curve\n\n  this._stopTime = time + fadeOutTime;\n\n  if (fadeOutTime > 0) {\n    //start the fade out curve at the given time\n    if (this.curve === \"linear\") {\n      this._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n    } else {\n      this._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n    }\n  } else {\n    //stop any ongoing ramps, and set the value to 0\n    this._gainNode.gain.cancelAndHoldAtTime(time);\n\n    this._gainNode.gain.setValueAtTime(0, time);\n  }\n\n  Tone.context.clearTimeout(this._onendedTimeout);\n  this._onendedTimeout = Tone.context.setTimeout(this._onended.bind(this), this._stopTime - this.now());\n  return this;\n};\n/**\n *  Cancel a scheduled stop event\n *  @return  {Tone.BufferSource}  this\n */\n\n\nTone.BufferSource.prototype.cancelStop = function () {\n  if (this._startTime !== -1 && !this._sourceStopped) {\n    //cancel the stop envelope\n    var fadeInTime = this.toSeconds(this.fadeIn);\n\n    this._gainNode.gain.cancelScheduledValues(this._startTime + fadeInTime + this.sampleTime);\n\n    this.context.clearTimeout(this._onendedTimeout);\n    this._stopTime = -1;\n  }\n\n  return this;\n};\n/**\n *  Internal callback when the buffer is ended.\n *  Invokes `onended` and disposes the node.\n *  @private\n */\n\n\nTone.BufferSource.prototype._onended = function () {\n  if (!this._sourceStopped) {\n    this._sourceStopped = true; //allow additional time for the exponential curve to fully decay\n\n    var additionalTail = this.curve === \"exponential\" ? this.fadeOut * 2 : 0;\n\n    if (this._sourceStarted && this._stopTime !== -1) {\n      this._source.stop(this._stopTime + additionalTail);\n    }\n\n    this.onended(this); //dispose the source after it's come to a stop\n\n    setTimeout(function () {\n      //if it hasn't already been disposed\n      if (this._source) {\n        this._source.disconnect();\n\n        this._gainNode.disconnect();\n      }\n    }.bind(this), additionalTail * 1000 + 100);\n  }\n};\n/**\n * If loop is true, the loop will start at this position.\n * @memberOf Tone.BufferSource#\n * @type {Time}\n * @name loopStart\n */\n\n\nObject.defineProperty(Tone.BufferSource.prototype, \"loopStart\", {\n  get: function get() {\n    return this._source.loopStart;\n  },\n  set: function set(loopStart) {\n    this._source.loopStart = this.toSeconds(loopStart);\n  }\n});\n/**\n * If loop is true, the loop will end at this position.\n * @memberOf Tone.BufferSource#\n * @type {Time}\n * @name loopEnd\n */\n\nObject.defineProperty(Tone.BufferSource.prototype, \"loopEnd\", {\n  get: function get() {\n    return this._source.loopEnd;\n  },\n  set: function set(loopEnd) {\n    this._source.loopEnd = this.toSeconds(loopEnd);\n  }\n});\n/**\n * The audio buffer belonging to the player.\n * @memberOf Tone.BufferSource#\n * @type {Tone.Buffer}\n * @name buffer\n */\n\nObject.defineProperty(Tone.BufferSource.prototype, \"buffer\", {\n  get: function get() {\n    return this._buffer;\n  },\n  set: function set(buffer) {\n    this._buffer.set(buffer);\n  }\n});\n/**\n * If the buffer should loop once it's over.\n * @memberOf Tone.BufferSource#\n * @type {Boolean}\n * @name loop\n */\n\nObject.defineProperty(Tone.BufferSource.prototype, \"loop\", {\n  get: function get() {\n    return this._source.loop;\n  },\n  set: function set(loop) {\n    this._source.loop = loop;\n    this.cancelStop();\n  }\n});\n/**\n *  Clean up.\n *  @return  {Tone.BufferSource}  this\n */\n\nTone.BufferSource.prototype.dispose = function () {\n  if (!this._wasDisposed) {\n    this._wasDisposed = true;\n    Tone.AudioNode.prototype.dispose.call(this);\n    this.onended = null;\n    this._source.onended = null;\n\n    this._source.disconnect();\n\n    this._source = null;\n\n    this._gainNode.dispose();\n\n    this._gainNode = null;\n\n    this._buffer.dispose();\n\n    this._buffer = null;\n    this._startTime = -1;\n    this.playbackRate = null;\n    Tone.context.clearTimeout(this._onendedTimeout);\n  }\n\n  return this;\n};\n\nexport default Tone.BufferSource;","import Tone from \"../core/Tone\";\nimport \"../instrument/Instrument\";\nimport \"../core/Buffers\";\nimport \"../source/BufferSource\";\n/**\n * @class Automatically interpolates between a set of pitched samples. Pass in an object which maps the note's pitch or midi value to the url, then you can trigger the attack and release of that note like other instruments. By automatically repitching the samples, it is possible to play pitches which were not explicitly included which can save loading time.\n *        For sample or buffer playback where repitching is not necessary, use [Tone.Player](https://tonejs.github.io/docs/Player).\n * @param {Object} samples An object of samples mapping either Midi\n *                         Note Numbers or Scientific Pitch Notation\n *                         to the url of that sample.\n * @param {Function=} onload The callback to invoke when all of the samples are loaded.\n * @param {String=} baseUrl The root URL of all of the samples, which is prepended to all the URLs.\n * @example\n * var sampler = new Tone.Sampler({\n * \t\"C3\" : \"path/to/C3.mp3\",\n * \t\"D#3\" : \"path/to/Dsharp3.mp3\",\n * \t\"F#3\" : \"path/to/Fsharp3.mp3\",\n * \t\"A3\" : \"path/to/A3.mp3\",\n * }, function(){\n * \t//sampler will repitch the closest sample\n * \tsampler.triggerAttack(\"D3\")\n * })\n * @extends {Tone.Instrument}\n */\n\nTone.Sampler = function (urls) {\n  // shift arguments over one. Those are the remainder of the options\n  var args = Array.prototype.slice.call(arguments);\n  args.shift();\n  var options = Tone.defaults(args, [\"onload\", \"baseUrl\"], Tone.Sampler);\n  Tone.Instrument.call(this, options);\n  var urlMap = {};\n\n  for (var note in urls) {\n    if (Tone.isNote(note)) {\n      //convert the note name to MIDI\n      var mid = Tone.Frequency(note).toMidi();\n      urlMap[mid] = urls[note];\n    } else if (!isNaN(parseFloat(note))) {\n      //otherwise if it's numbers assume it's midi\n      urlMap[note] = urls[note];\n    } else {\n      throw new Error(\"Tone.Sampler: url keys must be the note's pitch\");\n    }\n  }\n  /**\n   * The stored and loaded buffers\n   * @type {Tone.Buffers}\n   * @private\n   */\n\n\n  this._buffers = new Tone.Buffers(urlMap, options.onload, options.baseUrl);\n  /**\n   * The object of all currently playing BufferSources\n   * @type {Object}\n   * @private\n   */\n\n  this._activeSources = {};\n  /**\n   * The envelope applied to the beginning of the sample.\n   * @type {Time}\n   */\n\n  this.attack = options.attack;\n  /**\n   * The envelope applied to the end of the envelope.\n   * @type {Time}\n   */\n\n  this.release = options.release;\n  /**\n   *  The shape of the attack/release curve.\n   *  Either \"linear\" or \"exponential\"\n   *  @type {String}\n   */\n\n  this.curve = options.curve;\n};\n\nTone.extend(Tone.Sampler, Tone.Instrument);\n/**\n * The defaults\n * @const\n * @type {Object}\n */\n\nTone.Sampler.defaults = {\n  \"attack\": 0,\n  \"release\": 0.1,\n  \"onload\": Tone.noOp,\n  \"baseUrl\": \"\",\n  \"curve\": \"exponential\"\n};\n/**\n * Returns the difference in steps between the given midi note at the closets sample.\n * @param  {Midi} midi\n * @return {Interval}\n * @private\n */\n\nTone.Sampler.prototype._findClosest = function (midi) {\n  //searches within 8 octaves of the given midi note\n  var MAX_INTERVAL = 96;\n  var interval = 0;\n\n  while (interval < MAX_INTERVAL) {\n    // check above and below\n    if (this._buffers.has(midi + interval)) {\n      return -interval;\n    } else if (this._buffers.has(midi - interval)) {\n      return interval;\n    }\n\n    interval++;\n  }\n\n  throw new Error(\"No available buffers for note: \" + midi);\n};\n/**\n * @param  {(Frequency|Frequency[])} notes\tThe note to play, or an array of notes.\n * @param  {Time=} time     When to play the note\n * @param  {NormalRange=} velocity The velocity to play the sample back.\n * @return {Tone.Sampler}          this\n */\n\n\nTone.Sampler.prototype.triggerAttack = function (notes, time, velocity) {\n  this.log(\"triggerAttack\", notes, time, velocity);\n\n  if (!Array.isArray(notes)) {\n    notes = [notes];\n  }\n\n  for (var i = 0; i < notes.length; i++) {\n    var midi = Tone.Frequency(notes[i]).toMidi(); // find the closest note pitch\n\n    var difference = this._findClosest(midi);\n\n    var closestNote = midi - difference;\n\n    var buffer = this._buffers.get(closestNote);\n\n    var playbackRate = Tone.intervalToFrequencyRatio(difference); // play that note\n\n    var source = new Tone.BufferSource({\n      \"buffer\": buffer,\n      \"playbackRate\": playbackRate,\n      \"fadeIn\": this.attack,\n      \"fadeOut\": this.release,\n      \"curve\": this.curve\n    }).connect(this.output);\n    source.start(time, 0, buffer.duration / playbackRate, velocity); // add it to the active sources\n\n    if (!Tone.isArray(this._activeSources[midi])) {\n      this._activeSources[midi] = [];\n    }\n\n    this._activeSources[midi].push(source); //remove it when it's done\n\n\n    source.onended = function () {\n      if (this._activeSources && this._activeSources[midi]) {\n        var index = this._activeSources[midi].indexOf(source);\n\n        if (index !== -1) {\n          this._activeSources[midi].splice(index, 1);\n        }\n      }\n    }.bind(this);\n  }\n\n  return this;\n};\n/**\n * @param  {(Frequency|Frequency[])} notes\tThe note to release, or an array of notes.\n * @param  {Time=} time     \tWhen to release the note.\n * @return {Tone.Sampler}\tthis\n */\n\n\nTone.Sampler.prototype.triggerRelease = function (notes, time) {\n  this.log(\"triggerRelease\", notes, time);\n\n  if (!Array.isArray(notes)) {\n    notes = [notes];\n  }\n\n  for (var i = 0; i < notes.length; i++) {\n    var midi = Tone.Frequency(notes[i]).toMidi(); // find the note\n\n    if (this._activeSources[midi] && this._activeSources[midi].length) {\n      time = this.toSeconds(time); //stop all the sources on that midi note\n\n      this._activeSources[midi].forEach(function (source) {\n        source.stop(time);\n      });\n\n      this._activeSources[midi] = [];\n    }\n  }\n\n  return this;\n};\n/**\n * Release all currently active notes.\n * @param  {Time=} time     \tWhen to release the notes.\n * @return {Tone.Sampler}\tthis\n */\n\n\nTone.Sampler.prototype.releaseAll = function (time) {\n  time = this.toSeconds(time);\n\n  for (var note in this._activeSources) {\n    var sources = this._activeSources[note];\n\n    while (sources.length) {\n      var source = sources.shift();\n      source.stop(time);\n    }\n  }\n\n  return this;\n};\n/**\n * Sync the instrument to the Transport. All subsequent calls of\n * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n * will be scheduled along the transport.\n * @example\n * synth.sync()\n * //schedule 3 notes when the transport first starts\n * synth.triggerAttackRelease('8n', 0)\n * synth.triggerAttackRelease('8n', '8n')\n * synth.triggerAttackRelease('8n', '4n')\n * //start the transport to hear the notes\n * Transport.start()\n * @returns {Tone.Instrument} this\n */\n\n\nTone.Sampler.prototype.sync = function () {\n  this._syncMethod(\"triggerAttack\", 1);\n\n  this._syncMethod(\"triggerRelease\", 1);\n\n  return this;\n};\n/**\n * Invoke the attack phase, then after the duration, invoke the release.\n * @param  {(Frequency|Frequency[])} notes\tThe note to play and release, or an array of notes.\n * @param  {(Time|Time[])} duration The time the note should be held\n * @param  {Time=} time     When to start the attack\n * @param  {NormalRange} [velocity=1] The velocity of the attack\n * @return {Tone.Sampler}          this\n */\n\n\nTone.Sampler.prototype.triggerAttackRelease = function (notes, duration, time, velocity) {\n  time = this.toSeconds(time);\n  this.triggerAttack(notes, time, velocity);\n\n  if (Tone.isArray(duration) && Tone.isArray(notes)) {\n    for (var i = 0; i < notes.length; i++) {\n      var d = duration[Math.min(i, duration.length - 1)];\n      this.triggerRelease(notes[i], time + this.toSeconds(d));\n    }\n  } else {\n    this.triggerRelease(notes, time + this.toSeconds(duration));\n  }\n\n  return this;\n};\n/**\n *  Add a note to the sampler.\n *  @param  {Note|Midi}   note      The buffer's pitch.\n *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer,\n *                                                 or a buffer which will be added\n *                                                 with the given name.\n *  @param  {Function=}  callback  The callback to invoke\n *                                 when the url is loaded.\n */\n\n\nTone.Sampler.prototype.add = function (note, url, callback) {\n  if (Tone.isNote(note)) {\n    //convert the note name to MIDI\n    var mid = Tone.Frequency(note).toMidi();\n\n    this._buffers.add(mid, url, callback);\n  } else if (!isNaN(parseFloat(note))) {\n    //otherwise if it's numbers assume it's midi\n    this._buffers.add(note, url, callback);\n  } else {\n    throw new Error(\"Tone.Sampler: note must be the note's pitch. Instead got \" + note);\n  }\n};\n/**\n * If the buffers are loaded or not\n * @memberOf Tone.Sampler#\n * @type {Boolean}\n * @name loaded\n * @readOnly\n */\n\n\nObject.defineProperty(Tone.Sampler.prototype, \"loaded\", {\n  \"get\": function get() {\n    return this._buffers.loaded;\n  }\n});\n/**\n * Clean up\n * @return {Tone.Sampler} this\n */\n\nTone.Sampler.prototype.dispose = function () {\n  Tone.Instrument.prototype.dispose.call(this);\n\n  this._buffers.dispose();\n\n  this._buffers = null;\n\n  for (var midi in this._activeSources) {\n    this._activeSources[midi].forEach(function (source) {\n      source.dispose();\n    });\n  }\n\n  this._activeSources = null;\n  return this;\n};\n\nexport default Tone.Sampler;"],"sourceRoot":""}