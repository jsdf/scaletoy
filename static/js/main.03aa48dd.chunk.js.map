{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","majorScaleChordTypes","scalePosName","getMajorScaleChords","key","Scale","notes","map","pc","pos","chords","chordType","Chord","concat","sort","a","b","intervals","length","chord","tonic","aliases","makeScaleDependentData","arguments","undefined","scalePitchClasses","scalePosChords","Map","chordNames","chordName","size","quality","filter","chordData","sizes","Set","forEach","chordDatas","add","scaleType","Array","from","buttonStyle","border","display","width","cursor","beatDurationSeconds","NOTE_ON","NOTE_OFF","velocityMidi","TEST_PLAY_SCALE","playNote","events","noteName","start","end","noteMidi","Tonal","midi","updatedEvents","ev","message","time","newEvents","addEvents","makeOctaveScaleNoteSequence","note","shift","scaleNotes","push","oct","App","dx7Ref","React","useRef","resumeAudio","useCallback","current","actx","resume","suspendAudio","suspend","_React$useState","useState","_React$useState2","Object","slicedToArray","scaleData","setScaleData","_React$useState3","_React$useState4","setEvents","playScale","currentTime","lastStartTimeOffset","playChord","chordNotes","octave","i","_React$useState5","_React$useState6","lastChord","setLastChord","_React$useState7","_React$useState8","setOctave","useEffect","window","onDX7Init","dx7","dx7api","setInterval","nextEvent","onMidi","slice","onTick","currentNoteIndex","prevNoteIndex","initDX7","react_default","createElement","className","onClick","value","onChange","event","currentTarget","parseInt","keys","k","join","sizeIndex","style","_ref","_ref2","flex","objectSpread","background","console","log","Fragment","height","overflow","JSON","stringify","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6LCoBxC,IAAMC,EAAuB,CAC3B,QACA,QACA,QACA,QACA,QACA,QACA,cAGIC,EAAe,CAAC,IAAK,KAAM,MAAO,KAAM,IAAK,KAAM,QAEzD,SAASC,EAAoBC,GAC3B,OAAOC,IAAYD,EAAM,UAAUE,MAAMC,IAAI,SAACC,EAAIC,GAAL,OApBtBC,EAqBLL,IAAkBJ,EAAqBQ,IArB1BL,EAqBiCI,EApBzDE,EACJH,IAAI,SAAAI,GAAS,OAAIC,IAAA,GAAAC,OAAeT,GAAfS,OAAqBF,MACtCG,KAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,UAAUC,OAASF,EAAEC,UAAUC,SAChDX,IAAI,SAAAY,GAAK,SAAAN,OAAOM,EAAMC,OAAbP,OAAqBM,EAAME,QAAQ,MAJjD,IAAyBX,EAAQN,IAyBjC,SAASkB,IAAkC,IAAXlB,EAAWmB,UAAAL,OAAA,QAAAM,IAAAD,UAAA,GAAAA,UAAA,GAAL,IAE9BE,EAAoBpB,IAAA,GAAAQ,OAAeT,EAAf,KAAAS,OADR,UAC2CP,MACvDoB,EAAiB,IAAIC,IACzBxB,EAAoBC,GAAKG,IAAI,SAACqB,EAAYnB,GACxC,MAAO,CACLA,EAEAmB,EACGrB,IAAI,SAAAsB,GACH,IAAMV,EAAQP,IAAYiB,GAC1B,MAAO,CACLV,QACAU,YACAC,KACEX,EAAMF,UAAUC,QAA4B,YAAlBC,EAAMY,SAAyB,EAAI,MAGlEC,OAAO,SAAAC,GAAS,MAAgC,YAA5BA,EAAUd,MAAMY,cAKvCG,EAAQ,IAAIC,IAQlB,OANAT,EAAeU,QAAQ,SAACC,EAAY5B,GAClC4B,EAAWD,QAAQ,SAAAH,GACjBC,EAAMI,IAAIL,EAAUH,UAIjB,CACLS,UA/BgB,QAgChBnC,MACAqB,oBACAC,iBACAQ,MAAOM,MAAMC,KAAKP,GAAOpB,KAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAIhD,IAAM0B,EAAc,CAClBC,OAAQ,iBAERC,QAAS,QACTC,MAAO,OACPC,OAAQ,WAIJC,EAAuB,EADjB,GAC4B,GAElCC,EAAU,IACVC,EAAW,IACXC,EAAe,GAEfC,GAAkB,EAgBxB,SAASC,EAASC,EAAQC,EAAUC,EAAOC,GACzC,IAAMC,EAAWC,IAAWJ,GAAUK,KAElCC,EAAgBP,EAQpB,OANAA,EAAOjB,QAAQ,SAAAyB,GACTA,EAAGC,QAAQ,IAAML,IACnBI,EAAGE,KAAOR,EAAQ,IAClBM,EAAGC,QAAQ,GAAKb,KAetB,SAAmBI,EAAQW,GACzB,IAAMJ,EAAgBP,EAAOxC,OAAOmD,GAEpC,OADAJ,EAAc9C,KAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEgD,KAAO/C,EAAE+C,OACjCH,EAfAK,CAAUL,EAAe,CAC9B,CACEE,QAAS,CAACd,EAASS,EAAUP,GAC7Ba,KAAMR,GAER,CACEO,QAAS,CAACb,EAAUQ,EAAUP,GAC9Ba,KAAMP,KAWZ,SAASU,IACP,IAlI0BC,EAAMC,EAkI1BC,EAAahE,IAAY,YAAYC,MAI3C,OAFA+D,EAAWC,MApIeH,EAoIST,IAAWW,EAAW,IApIzBD,EAoI8B,EAnI9D,GAAAvD,OAAUsD,EAAK3D,IAAfK,OAAoBsD,EAAKI,IAAMH,KAqIxBC,EA+MMG,MA5Mf,WACE,IAAMC,EAASC,IAAMC,OAAO,MACtBC,EAAcF,IAAMG,YACxB,kBAAMJ,EAAOK,SAAWL,EAAOK,QAAQC,KAAKC,UAC5C,CAACP,EAAOK,UAEJG,EAAeP,IAAMG,YACzB,kBAAMJ,EAAOK,SAAWL,EAAOK,QAAQC,KAAKG,WAC5C,CAACT,EAAOK,UARGK,EAWqBT,IAAMU,SAAS9D,EAAuB,MAX3D+D,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAWNK,EAXMH,EAAA,GAWKI,EAXLJ,EAAA,GAAAK,EAaehB,IAAMU,SAAS,IAb9BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAaNrC,EAbMsC,EAAA,GAaEC,EAbFD,EAAA,GAePE,EAAYnB,IAAMG,YAAY,WAClCe,EAAU,SAAAvC,GACR,IAAM0B,EAAON,EAAOK,QAAUL,EAAOK,QAAQC,KAAO,KACpD,GAAY,MAARA,EAAJ,CAGA,IAAInB,EAAgBP,EACdgB,EAAaH,IACb4B,EAAcf,EAAKe,YAErBC,EAAsB,EAY1B,OAXA1B,EAAWjC,QAAQ,SAAAkB,GAGjBM,EAAgBR,EACdQ,EACAN,EACAwC,GALFC,GAAuBhD,GAMrB+C,EAAcC,EAAsBhD,KAIjCa,OAILoC,EAAYtB,IAAMG,YAAY,SAACoB,EAAYC,GAC/CN,EAAU,SAAAvC,GACR,IAAM0B,EAAON,EAAOK,QAAUL,EAAOK,QAAQC,KAAO,KACpD,GAAY,MAARA,EAAJ,CAGA,IAAInB,EAAgBP,EAEdyC,EAAcf,EAAKe,YAWzB,OATAG,EAAW7D,QAAQ,SAACkB,EAAU6C,GAC5BvC,EAAgBR,EACdQ,EACAN,EAAW4C,EACXJ,EAAe,IAADK,EACdL,EAAc/C,KAIXa,OA5DEwC,EAgEqB1B,IAAMU,SAAS,MAhEpCiB,EAAAf,OAAAC,EAAA,EAAAD,CAAAc,EAAA,GAgENE,EAhEMD,EAAA,GAgEKE,EAhELF,EAAA,GAAAG,EAiEe9B,IAAMU,SAAS,GAjE9BqB,EAAAnB,OAAAC,EAAA,EAAAD,CAAAkB,EAAA,GAiENN,EAjEMO,EAAA,GAiEEC,EAjEFD,EAAA,GA6Gb,OA1CA/B,IAAMiC,UAAU,WACdC,OAAOC,UAAY,SAACC,EAAK/B,GACvB,IAAMgC,EAAS,CACbD,MACA/B,QAQF,GANAN,EAAOK,QAAUiC,EAEjBC,YAAY,WACVpB,EAAU,SAAAvC,GAAM,OA/HxB,SAAgBA,EAAQ0D,GAEtB,IADA,IAAIZ,EAAI,EACDA,EAAI9C,EAAOnC,OAAQiF,IAAK,CAC7B,IAAMc,EAAY5D,EAAO8C,GACzB,GAAIc,EAAUlD,KAAOgD,EAAOhC,KAAKe,YAC/B,MAGFiB,EAAOD,IAAII,OAAOD,EAAUnD,SAG9B,OAAa,IAANqC,EAAU9C,EAASA,EAAO8D,MAAMhB,GAoHbiB,CAAO/D,EAAQ0D,MAClC,GAEC5D,EAAiB,CACnB,IAAMkB,EAAaH,IAEfmD,EAAmB,EACnBC,EAAgB,KAEpBN,YAAY,WACW,MAAjBM,GACFR,EAAII,OAAO,CACTjE,EACAS,IAAWW,EAAWiD,IAAgB3D,KACtCT,IAIJ4D,EAAII,OAAO,CACTlE,EACAU,IAAWW,EAAWgD,IAAmB1D,KACzCT,IAEFoE,EAAgBD,EAEhBA,GAAoBA,EAAmB,GAAKhD,EAAWnD,QAEhC,IAAtB6B,KAGPwE,WACC,IAGDC,EAAAzG,EAAA0G,cAAA,OAAKC,UAAU,OACbF,EAAAzG,EAAA0G,cAAA,UAAQE,QAAS/C,GAAjB,eACA4C,EAAAzG,EAAA0G,cAAA,UAAQE,QAAS1C,GAAjB,eACAuC,EAAAzG,EAAA0G,cAAA,WACED,EAAAzG,EAAA0G,cAAA,UAAQE,QAAS9B,GAAjB,cACA2B,EAAAzG,EAAA0G,cAAA,WAFF,OAGO,IACLD,EAAAzG,EAAA0G,cAAA,UACEG,MAAOpC,EAAUpF,IACjByH,SAAU,SAAAC,GAAK,OACbrC,EAAanE,EAAuBwG,EAAMC,cAAcH,UAGzD,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKrH,IAAI,SAAAH,GAAG,OAC1CoH,EAAAzG,EAAA0G,cAAA,UAAQrH,IAAKA,EAAKwH,MAAOxH,GACtBA,MAGG,IAfZ,UAgBU,IACRoH,EAAAzG,EAAA0G,cAAA,UACEG,MAAO1B,EACP2B,SAAU,SAAAC,GAAK,OAAIpB,EAAUsB,SAASF,EAAMC,cAAcH,UAEzD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGrH,IAAI,SAAAH,GAAG,OAC5BoH,EAAAzG,EAAA0G,cAAA,UAAQrH,IAAKA,EAAKwH,MAAOxH,GACtBA,MAGG,IA1BZ,eA2Be,IACZoC,MAAMC,KAAK+C,EAAU9D,eAAeuG,QAClC1H,IAAI,SAAA2H,GAAC,OAAI1C,EAAU/D,kBAAkByG,KACrCC,QAGJ3C,EAAUtD,MAAM3B,IAAI,SAACuB,EAAMsG,GAAP,OACnBZ,EAAAzG,EAAA0G,cAAA,YACG,EACDD,EAAAzG,EAAA0G,cAAA,WACAD,EAAAzG,EAAA0G,cAAA,OAAKrH,IAAK0B,EAAMuG,MAAO,CAACzF,QAAS,SAC9BJ,MAAMC,KAAK+C,EAAU9D,gBAAgBnB,IAAI,SAAA+H,GAAuB,IAAAC,EAAAjD,OAAAC,EAAA,EAAAD,CAAAgD,EAAA,GAArB7H,EAAqB8H,EAAA,GAAhBlG,EAAgBkG,EAAA,GAC/D,OACEf,EAAAzG,EAAA0G,cAAA,OAAKrH,IAAKK,EAAK4H,MAAO,CAACG,KAAM,IACZ,IAAdJ,GAAmBZ,EAAAzG,EAAA0G,cAAA,WAAMvH,EAAaO,IAEtC4B,EACEL,OAAO,SAAAC,GAAS,OAAIA,EAAUH,OAASA,IACvCvB,IAAI,SAAC0B,EAAWkE,GAAZ,OACHqB,EAAAzG,EAAA0G,cAAA,OAAKrH,IAAK+F,GACRqB,EAAAzG,EAAA0G,cAAA,OACEY,MAAK/C,OAAAmD,EAAA,EAAAnD,CAAA,GACA5C,EADA,CAEHgG,WACEzG,EAAUJ,YAAcyE,EACpB,YACA,OAERqB,QAAS,WACP3B,EAAU/D,EAAUd,MAAMb,MAAO4F,GACjCK,EAAatE,EAAUJ,WACvB8G,QAAQC,IAAI3G,KAGbA,EAAUJ,UAET2F,EAAAzG,EAAA0G,cAAAD,EAAAzG,EAAA8H,SAAA,KACErB,EAAAzG,EAAA0G,cAAA,WACAD,EAAAzG,EAAA0G,cAAA,aAAQxF,EAAUd,MAAMb,MAAM6H,UAGjC,aAgBrBX,EAAAzG,EAAA0G,cAAA,OAAKY,MAAO,CAACS,OAAQ,IAAKC,SAAU,WACjC1F,EAAO9C,IAAI,SAAAsD,GAAE,OAAImF,KAAKC,UAAUpF,KAAKsE,KAAK,SC5U/Be,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAzG,EAAA0G,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.03aa48dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport * as Tonal from '@tonaljs/tonal';\nimport * as Scale from '@tonaljs/scale';\nimport * as Chord from '@tonaljs/chord';\n\n/* global initDX7 */\n\nfunction transposeByOctaves(note, shift) {\n  return `${note.pc}${note.oct + shift}`;\n}\n\nfunction getChordsBySize(chords, key) {\n  return chords\n    .map(chordType => Chord.chord(`${key}${chordType}`))\n    .sort((a, b) => a.intervals.length - b.intervals.length)\n    .map(chord => `${chord.tonic}${chord.aliases[0]}`);\n}\n\nconst majorScaleChordTypes = [\n  'major',\n  'minor',\n  'minor',\n  'major',\n  'major',\n  'minor',\n  'diminished',\n];\n\nconst scalePosName = ['I', 'ii', 'iii', 'VI', 'V', 'vi', 'vii*'];\n\nfunction getMajorScaleChords(key) {\n  return Scale.scale(key + ' major').notes.map((pc, pos) =>\n    getChordsBySize(Scale.scaleChords(majorScaleChordTypes[pos]), pc)\n  );\n}\n\nfunction makeScaleDependentData(key = 'c') {\n  const scaleType = 'major';\n  const scalePitchClasses = Scale.scale(`${key} ${scaleType}`).notes;\n  const scalePosChords = new Map(\n    getMajorScaleChords(key).map((chordNames, pos) => {\n      return [\n        pos,\n\n        chordNames\n          .map(chordName => {\n            const chord = Chord.chord(chordName);\n            return {\n              chord,\n              chordName,\n              size:\n                chord.intervals.length * (chord.quality === 'Unknown' ? -1 : 1),\n            };\n          })\n          .filter(chordData => chordData.chord.quality !== 'Unknown'),\n      ];\n    })\n  );\n\n  const sizes = new Set();\n\n  scalePosChords.forEach((chordDatas, pos) => {\n    chordDatas.forEach(chordData => {\n      sizes.add(chordData.size);\n    });\n  });\n\n  return {\n    scaleType,\n    key,\n    scalePitchClasses,\n    scalePosChords,\n    sizes: Array.from(sizes).sort((a, b) => a - b),\n  };\n}\n\nconst buttonStyle = {\n  border: 'solid 1px #ccc',\n  // height: 40,\n  display: 'block',\n  width: '100%',\n  cursor: 'pointer',\n};\n\nconst bpm = 90;\nconst beatDurationSeconds = (1 / bpm) * 60;\n\nconst NOTE_ON = 0x90;\nconst NOTE_OFF = 0x80;\nconst velocityMidi = 80;\n\nconst TEST_PLAY_SCALE = false;\n\nfunction onTick(events, dx7api) {\n  let i = 0;\n  for (; i < events.length; i++) {\n    const nextEvent = events[i];\n    if (nextEvent.time > dx7api.actx.currentTime) {\n      break;\n    }\n\n    dx7api.dx7.onMidi(nextEvent.message);\n  }\n\n  return i === 0 ? events : events.slice(i);\n}\n\nfunction playNote(events, noteName, start, end) {\n  const noteMidi = Tonal.note(noteName).midi;\n\n  let updatedEvents = events;\n  // end any upcoming events for this key\n  events.forEach(ev => {\n    if (ev.message[1] == noteMidi) {\n      ev.time = start - 0.01;\n      ev.message[0] = NOTE_OFF;\n    }\n  });\n  return addEvents(updatedEvents, [\n    {\n      message: [NOTE_ON, noteMidi, velocityMidi],\n      time: start,\n    },\n    {\n      message: [NOTE_OFF, noteMidi, velocityMidi],\n      time: end,\n    },\n  ]);\n}\n\nfunction addEvents(events, newEvents) {\n  const updatedEvents = events.concat(newEvents);\n  updatedEvents.sort((a, b) => a.time - b.time);\n  return updatedEvents;\n}\n\nfunction makeOctaveScaleNoteSequence() {\n  const scaleNotes = Scale.scale('c4 major').notes;\n\n  scaleNotes.push(transposeByOctaves(Tonal.note(scaleNotes[0]), 1));\n\n  return scaleNotes;\n}\n\nfunction App() {\n  const dx7Ref = React.useRef(null);\n  const resumeAudio = React.useCallback(\n    () => dx7Ref.current && dx7Ref.current.actx.resume(),\n    [dx7Ref.current]\n  );\n  const suspendAudio = React.useCallback(\n    () => dx7Ref.current && dx7Ref.current.actx.suspend(),\n    [dx7Ref.current]\n  );\n\n  const [scaleData, setScaleData] = React.useState(makeScaleDependentData('c'));\n\n  const [events, setEvents] = React.useState([]);\n\n  const playScale = React.useCallback(() => {\n    setEvents(events => {\n      const actx = dx7Ref.current ? dx7Ref.current.actx : null;\n      if (actx == null) {\n        return;\n      }\n      let updatedEvents = events;\n      const scaleNotes = makeOctaveScaleNoteSequence();\n      const currentTime = actx.currentTime;\n\n      let lastStartTimeOffset = 0;\n      scaleNotes.forEach(noteName => {\n        lastStartTimeOffset += beatDurationSeconds;\n\n        updatedEvents = playNote(\n          updatedEvents,\n          noteName,\n          currentTime + lastStartTimeOffset,\n          currentTime + lastStartTimeOffset + beatDurationSeconds\n        );\n      });\n\n      return updatedEvents;\n    });\n  });\n\n  const playChord = React.useCallback((chordNotes, octave) => {\n    setEvents(events => {\n      const actx = dx7Ref.current ? dx7Ref.current.actx : null;\n      if (actx == null) {\n        return;\n      }\n      let updatedEvents = events;\n\n      const currentTime = actx.currentTime;\n\n      chordNotes.forEach((noteName, i) => {\n        updatedEvents = playNote(\n          updatedEvents,\n          noteName + octave,\n          currentTime + i * (20 / 1000),\n          currentTime + beatDurationSeconds\n        );\n      });\n\n      return updatedEvents;\n    });\n  });\n\n  const [lastChord, setLastChord] = React.useState(null);\n  const [octave, setOctave] = React.useState(4);\n\n  React.useEffect(() => {\n    window.onDX7Init = (dx7, actx) => {\n      const dx7api = {\n        dx7,\n        actx,\n      };\n      dx7Ref.current = dx7api;\n\n      setInterval(() => {\n        setEvents(events => onTick(events, dx7api));\n      }, 1);\n\n      if (TEST_PLAY_SCALE) {\n        const scaleNotes = makeOctaveScaleNoteSequence();\n\n        let currentNoteIndex = 0;\n        let prevNoteIndex = null;\n\n        setInterval(() => {\n          if (prevNoteIndex != null) {\n            dx7.onMidi([\n              NOTE_OFF,\n              Tonal.note(scaleNotes[prevNoteIndex]).midi,\n              velocityMidi,\n            ]);\n          }\n\n          dx7.onMidi([\n            NOTE_ON,\n            Tonal.note(scaleNotes[currentNoteIndex]).midi,\n            velocityMidi,\n          ]);\n          prevNoteIndex = currentNoteIndex;\n\n          currentNoteIndex = (currentNoteIndex + 1) % scaleNotes.length;\n          // currentNoteIndex = Math.floor(Math.random() * scaleNotes.length);\n        }, beatDurationSeconds * 1000);\n      }\n    };\n    initDX7();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <button onClick={resumeAudio}>start audio</button>\n      <button onClick={suspendAudio}>pause audio</button>\n      <div>\n        <button onClick={playScale}>play scale</button>\n        <br />\n        key:{' '}\n        <select\n          value={scaleData.key}\n          onChange={event =>\n            setScaleData(makeScaleDependentData(event.currentTarget.value))\n          }\n        >\n          {['a', 'b', 'c', 'd', 'e', 'f', 'g'].map(key => (\n            <option key={key} value={key}>\n              {key}\n            </option>\n          ))}\n        </select>{' '}\n        octave:{' '}\n        <select\n          value={octave}\n          onChange={event => setOctave(parseInt(event.currentTarget.value))}\n        >\n          {[1, 2, 3, 4, 5, 6, 7].map(key => (\n            <option key={key} value={key}>\n              {key}\n            </option>\n          ))}\n        </select>{' '}\n        scale notes:{' '}\n        {Array.from(scaleData.scalePosChords.keys())\n          .map(k => scaleData.scalePitchClasses[k])\n          .join()}\n      </div>\n\n      {scaleData.sizes.map((size, sizeIndex) => (\n        <div>\n          {false && <div style={{flex: 1}}>{size}</div>}\n          <br />\n          <div key={size} style={{display: 'flex'}}>\n            {Array.from(scaleData.scalePosChords).map(([pos, chordDatas]) => {\n              return (\n                <div key={pos} style={{flex: 1}}>\n                  {sizeIndex === 0 && <div>{scalePosName[pos]}</div>}\n\n                  {chordDatas\n                    .filter(chordData => chordData.size === size)\n                    .map((chordData, i) => (\n                      <div key={i}>\n                        <div\n                          style={{\n                            ...buttonStyle,\n                            background:\n                              chordData.chordName === lastChord\n                                ? 'lightgrey'\n                                : null,\n                          }}\n                          onClick={() => {\n                            playChord(chordData.chord.notes, octave);\n                            setLastChord(chordData.chordName);\n                            console.log(chordData);\n                          }}\n                        >\n                          {chordData.chordName}\n                          {true && (\n                            <>\n                              <br />\n                              <small>{chordData.chord.notes.join()}</small>\n                            </>\n                          )}\n                          {false && (\n                            <>\n                              <br />\n                              <small>{chordData.chord.name}</small>\n                            </>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      ))}\n\n      <pre style={{height: 300, overflow: 'scroll'}}>\n        {events.map(ev => JSON.stringify(ev)).join('\\n')}\n      </pre>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}