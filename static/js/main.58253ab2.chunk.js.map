{"version":3,"sources":["logo.svg","Recorder.js","useLocalStorage.js","MidiOutput.js","Keyboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","makeNewRecorder","actx","inputNode","chunks","dest","createMediaStreamDestination","mediaRecorder","MediaRecorder","stream","connect","ondataavailable","evt","push","data","onstop","blob","Blob","type","document","createElement","fileName","a","body","appendChild","style","url","URL","createObjectURL","href","download","click","revokeObjectURL","remove","saveData","React","memo","props","recorderRef","useRef","_React$useState","useState","_React$useState2","Object","slicedToArray","recording","setRecording","toggleRecording","useCallback","s","useEffect","current","start","state","stop","react_default","onClick","useLocalStorage","baseKey","initialValue","key","concat","_useState","item","window","localStorage","getItem","JSON","parse","error","console","log","_useState2","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","MidiOutput","_ref","onChangeOutput","selectedOutput","outputs","setOutputs","navigator","requestMIDIAccess","then","access","Array","from","values","onstatechange","e","onChange","parseInt","currentTarget","indexOf","map","output","i","name","Keyboard","SIZE_ASC","SHOW_HISTORY","strummingTimes","strummingTimesIndex","forEach","v","keys","scaleTypesChordPatterns","major","minor","dorian","lydian","phrygian","ionian","mixolydian","locrian","allScales","romanNumerals","scaleTypesPosNames","reduce","acc","scaleName","pattern","scaleType","pos","toUpperCase","Error","getScaleChords","Scale","notes","pc","chords","chordType","Chord","sort","b","intervals","length","chord","tonic","aliases","beatDurationSeconds","NOTE_ON","NOTE_OFF","velocityMidi","TEST_PLAY_SCALE","testPlayScale","audioApi","scaleNotes","octave","note","Tonal","shift","oct","makeOctaveScaleNoteSequence","currentNoteIndex","prevNoteIndex","setInterval","dx7","onMidi","midi","playNote","events","noteName","end","noteMidi","updatedEvents","ev","message","time","newEvents","addEvents","getReifiedNotesForChordForScale","chordName","scalePitchClassesNotesMap","chordData","tonicReified","interval","makeScaleData","scale","scalePitchClasses","reifyScaleNotesWithOctave","scalePosChords","Map","chordNames","chordNotesForOctave","size","quality","chordDatasByName","sizes","Set","chordDatas","add","chordTypeColors","diminished","buttonStyle","display","width","cursor","color","padding","paddingBottom","height","overflow","flexColContainer","flexCol","flex","ChordButton","playChord","setLastChord","strumming","selected","objectSpread","background","border","borderColor","join","App","_ref2","resumeAudio","resume","suspendAudio","suspend","_useLocalStorage","_useLocalStorage2","setKey","_useLocalStorage3","_useLocalStorage4","setStrumming","_useLocalStorage5","_useLocalStorage6","includeExtra","setIncludeExtra","lastChord","_useLocalStorage7","_useLocalStorage8","setOctave","_useLocalStorage9","_useLocalStorage10","setScaleType","_React$useState3","_React$useState4","history","setHistory","scaleData","useMemo","toggleExtra","_React$useState5","_React$useState6","setEvents","_React$useState7","_React$useState8","midiOut","setMidiOut","playScale","slice","currentTime","lastStartTimeOffset","chordNotes","id","nextEvent","send","onTick","clearInterval","className","src_Recorder","event","min","max","hidden","readOnly","checked","filter","sizeIndex","_ref3","_ref4","assign","reverse","Theme","_React$useState9","_React$useState10","darkMode","setDarkMode","documentElement","classList","position","top","right","AudioContext","Startup","_React$useState11","_React$useState12","startedAudio","setStartedAudio","_React$useState13","_React$useState14","setAudioApi","onStart","querySelector","visibility","onDX7Init","newAudioApi","initDX7","process","App_App","fontSize","borderRadius","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58253ab2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nfunction saveData(blob, fileName) {\n  var a = document.createElement('a');\n  document.body.appendChild(a);\n  a.style = 'display: none';\n\n  const url = URL.createObjectURL(blob);\n  a.href = url;\n  a.download = fileName;\n  a.click();\n  URL.revokeObjectURL(url);\n  a.remove();\n}\n\nfunction makeNewRecorder(actx, inputNode) {\n  const chunks = [];\n  const dest = actx.createMediaStreamDestination();\n  const mediaRecorder = new MediaRecorder(dest.stream);\n  inputNode.connect(dest);\n\n  mediaRecorder.ondataavailable = function(evt) {\n    // push each chunk (blobs) in an array\n    chunks.push(evt.data);\n  };\n\n  mediaRecorder.onstop = function(evt) {\n    // Make blob out of our blobs, and open it.\n    var blob = new Blob(chunks, {type: 'audio/ogg; codecs=opus'});\n    const audioEl = document.createElement('audio');\n\n    const fileName = 'audio.ogg';\n\n    saveData(blob, fileName);\n  };\n\n  return mediaRecorder;\n}\n\nexport default React.memo(function Recorder(props) {\n  const recorderRef = React.useRef(\n    makeNewRecorder(props.actx, props.inputNode)\n  );\n\n  const [recording, setRecording] = React.useState(false);\n\n  const toggleRecording = React.useCallback(() => setRecording(s => !s), [\n    setRecording,\n  ]);\n\n  React.useEffect(() => {\n    if (recording) {\n      recorderRef.current.start();\n    } else {\n      if (recorderRef.current.state !== 'inactive') {\n        recorderRef.current.stop();\n        recorderRef.current = makeNewRecorder(props.actx, props.inputNode);\n      }\n    }\n  }, [recording]);\n\n  return (\n    <button onClick={toggleRecording}>\n      {recording ? 'stop recording' : 'record audio'}\n    </button>\n  );\n});\n","import {useState} from 'react';\n\nexport default function useLocalStorage(baseKey, initialValue) {\n  const key = `scaletoy-${baseKey}`;\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import React from 'react';\n\nexport default function MidiOutput({onChangeOutput, selectedOutput}) {\n  const [outputs, setOutputs] = React.useState([]);\n\n  React.useEffect(() => {\n    navigator.requestMIDIAccess().then(access => {\n      setOutputs(Array.from(access.outputs.values()));\n\n      access.onstatechange = function(e) {\n        setOutputs(Array.from(access.outputs.values()));\n      };\n    });\n  }, []);\n\n  return (\n    <label>\n      midi out:{' '}\n      <select\n        onChange={e => {\n          onChangeOutput(outputs[parseInt(e.currentTarget.value)]);\n        }}\n        value={outputs.indexOf(selectedOutput)}\n      >\n        <option key={-1} value={-1}>\n          (none)\n        </option>\n        {outputs.map((output, i) => (\n          <option key={i} value={i}>\n            {output.name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n}\n","import React from 'react';\n\nexport default function Keyboard() {\n  return null;\n  // return <div>[keyboard]</div>;\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport * as Tonal from '@tonaljs/tonal';\nimport * as Scale from '@tonaljs/scale';\nimport * as Chord from '@tonaljs/chord';\nimport Recorder from './Recorder';\nimport useLocalStorage from './useLocalStorage';\nimport MidiOutput from './MidiOutput';\nimport Keyboard from './Keyboard';\n\n/* global initDX7 */\n\nconst SHOW_NOTE_NAMES = true;\nconst SHOW_NOTE_OCTS = true;\nconst SHOW_FULL_CHORD_NAMES = false;\nconst SIZE_ASC = true;\nconst SHOW_HISTORY = false;\n\nconst strummingTimes = [0, 10, 30, 50, 75, 100, 150, 200];\nconst strummingTimesIndex = {};\nstrummingTimes.forEach((v, i) => {\n  strummingTimesIndex[v] = i;\n});\n\nfunction transposeByOctaves(note, shift) {\n  return `${note.pc}${note.oct + shift}`;\n}\n\nfunction getChordsBySize(chords, key) {\n  return chords\n    .map(chordType => Chord.chord(`${key}${chordType}`))\n    .sort((a, b) => a.intervals.length - b.intervals.length)\n    .map(chord => `${chord.tonic}${chord.aliases[0]}`);\n}\n\nconst keys = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'Bb', 'B'];\n\nconst scaleTypesChordPatterns = {\n  major: ['major', 'minor', 'minor', 'major', 'major', 'minor', 'diminished'],\n  minor: ['minor', 'diminished', 'major', 'minor', 'minor', 'major', 'major'],\n  dorian: ['minor', 'minor', 'major', 'major', 'minor', 'diminished', 'major'],\n  lydian: ['major', 'major', 'minor', 'diminished', 'major', 'minor', 'minor'],\n  phrygian: [\n    'minor',\n    'major',\n    'major',\n    'minor',\n    'diminished',\n    'major',\n    'minor',\n  ],\n  ionian: ['major', 'minor', 'minor', 'major', 'major', 'minor', 'diminished'],\n  mixolydian: [\n    'major',\n    'minor',\n    'diminished',\n    'major',\n    'minor',\n    'minor',\n    'major',\n  ],\n  locrian: ['diminished', 'major', 'minor', 'minor', 'major', 'major', 'minor'],\n};\n\nconst allScales = Object.keys(scaleTypesChordPatterns);\n\nconst romanNumerals = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii'];\n// const scaleTypesPosNames = {\n//   major: ['I', 'ii', 'iii', 'VI', 'V', 'vi', 'vii*'],\n//   minor: ['i', 'ii*', 'III', 'iv', 'v', 'VI', 'VII'],\n// };\nconst scaleTypesPosNames = Object.keys(scaleTypesChordPatterns).reduce(\n  (acc, scaleName) => {\n    const pattern = scaleTypesChordPatterns[scaleName];\n\n    acc[scaleName] = pattern.map((scaleType, i) => {\n      const pos = romanNumerals[i];\n\n      switch (scaleType) {\n        case 'major':\n          return pos.toUpperCase();\n        case 'minor':\n          return pos;\n        case 'diminished':\n          return pos + '\\xB0';\n        default:\n          throw new Error(`unknown scaleType '${scaleType}'`);\n      }\n    });\n\n    return acc;\n  },\n  {}\n);\n\nfunction getScaleChords(key, scaleType) {\n  return Scale.scale(key + ' ' + scaleType).notes.map((pc, pos) =>\n    getChordsBySize(\n      Scale.scaleChords(scaleTypesChordPatterns[scaleType][pos]),\n      pc\n    )\n  );\n}\n\nconst bpm = 140;\nconst beatDurationSeconds = (1 / bpm) * 60;\n\nconst NOTE_ON = 0x90;\nconst NOTE_OFF = 0x80;\nconst velocityMidi = 80;\n\nconst TEST_PLAY_SCALE = false;\n\nfunction testPlayScale(audioApi) {\n  const scaleNotes = makeOctaveScaleNoteSequence('c', 4, 'major');\n\n  let currentNoteIndex = 0;\n  let prevNoteIndex = null;\n\n  setInterval(() => {\n    if (prevNoteIndex != null) {\n      audioApi.dx7.onMidi([\n        NOTE_OFF,\n        Tonal.note(scaleNotes[prevNoteIndex]).midi,\n        velocityMidi,\n      ]);\n    }\n\n    audioApi.dx7.onMidi([\n      NOTE_ON,\n      Tonal.note(scaleNotes[currentNoteIndex]).midi,\n      velocityMidi,\n    ]);\n    prevNoteIndex = currentNoteIndex;\n\n    currentNoteIndex = (currentNoteIndex + 1) % scaleNotes.length;\n    // currentNoteIndex = Math.floor(Math.random() * scaleNotes.length);\n  }, beatDurationSeconds * 1000);\n}\n\nfunction onTick(events, audioApi, midiOut) {\n  let i = 0;\n  for (; i < events.length; i++) {\n    const nextEvent = events[i];\n    if (nextEvent.time > audioApi.actx.currentTime) {\n      break;\n    }\n\n    if (midiOut) {\n      if (!midiOut.send) {\n        debugger;\n      }\n      midiOut.send(nextEvent.message);\n    } else {\n      audioApi.dx7.onMidi(nextEvent.message);\n    }\n  }\n\n  return i === 0 ? events : events.slice(i);\n}\n\nfunction playNote(events, noteName, start, end) {\n  const noteMidi = Tonal.note(noteName).midi;\n\n  let updatedEvents = events;\n  // end any upcoming events for this key\n  events.forEach(ev => {\n    if (ev.message[1] == noteMidi) {\n      ev.time = start - 0.01;\n      ev.message[0] = NOTE_OFF;\n    }\n  });\n\n  return addEvents(updatedEvents, [\n    {\n      message: [NOTE_ON, noteMidi, velocityMidi],\n      time: start,\n    },\n    {\n      message: [NOTE_OFF, noteMidi, velocityMidi],\n      time: end,\n    },\n  ]);\n}\n\nfunction addEvents(events, newEvents) {\n  const updatedEvents = events.concat(newEvents);\n  updatedEvents.sort((a, b) => a.time - b.time);\n  return updatedEvents;\n}\n\nfunction makeOctaveScaleNoteSequence(key, octave, scaleType) {\n  const scaleNotes = Scale.scale(`${key}${octave} ${scaleType}`).notes;\n\n  scaleNotes.push(transposeByOctaves(Tonal.note(scaleNotes[0]), 1));\n\n  return scaleNotes;\n}\n\n// get the notes for a chord, for an octave\nfunction getReifiedNotesForChord(chordName, octave) {\n  const chordData = Chord.chord(chordName);\n  const tonicReified = chordData.tonic + octave;\n  const notes = chordData.intervals.map(interval =>\n    Tonal.transpose(tonicReified, interval)\n  );\n  return notes;\n}\n\n// we need to make sure that the tonic is from the correct octave when the\n// scale spans multiple octaves\nfunction getReifiedNotesForChordForScale(chordName, scalePitchClassesNotesMap) {\n  const chordData = Chord.chord(chordName);\n  const tonicReified = scalePitchClassesNotesMap[chordData.tonic];\n  const notes = chordData.intervals.map(interval =>\n    Tonal.transpose(tonicReified, interval)\n  );\n  return notes;\n}\n\nfunction reifyScaleNotesWithOctave(scale, octave) {\n  return scale.intervals.map(interval =>\n    Tonal.transpose(`${scale.tonic}${octave}`, interval)\n  );\n}\n\nfunction makeScaleData(key, scaleType, octave) {\n  const scale = Scale.scale(`${key} ${scaleType}`);\n  const scalePitchClasses = scale.notes;\n\n  const scaleNotes = reifyScaleNotesWithOctave(scale, octave);\n  const scalePitchClassesNotesMap = {};\n  scaleNotes.forEach(noteName => {\n    scalePitchClassesNotesMap[Tonal.note(noteName).pc] = noteName;\n  });\n\n  const scalePosChords = new Map(\n    getScaleChords(key, scaleType).map((chordNames, pos) => {\n      return [\n        pos,\n\n        chordNames.map(chordName => {\n          const chord = Chord.chord(chordName);\n          return {\n            pos,\n            chord,\n            chordType: scaleTypesChordPatterns[scaleType][pos],\n            chordNotesForOctave: getReifiedNotesForChordForScale(\n              chordName,\n              scalePitchClassesNotesMap\n            ),\n            chordName,\n            size:\n              chord.intervals.length * (chord.quality === 'Unknown' ? -1 : 1),\n          };\n        }),\n      ];\n    })\n  );\n\n  const chordDatasByName = new Map(\n    Array.from(scalePosChords.values).map(chordData => [\n      chordData.chordName,\n      chordData,\n    ])\n  );\n\n  const sizes = new Set();\n\n  scalePosChords.forEach((chordDatas, pos) => {\n    chordDatas.forEach(chordData => {\n      sizes.add(chordData.size);\n    });\n  });\n\n  return {\n    scaleType,\n    key,\n    scalePitchClasses,\n    scalePosChords,\n    scaleNotes,\n    chordDatasByName,\n    sizes: Array.from(sizes).sort((a, b) => a - b),\n  };\n}\n\nconst chordTypeColors = {\n  major: 'rgb(127,199,175)',\n  minor: 'rgb(255,158,157)',\n  diminished: 'rgb(218,216,167)',\n};\n\nconst buttonStyle = {\n  display: 'block',\n  width: '100%',\n  cursor: 'pointer',\n  color: 'black',\n  padding: 4,\n  paddingBottom: 8,\n  height: 46,\n  overflow: 'hidden',\n};\n\nconst flexColContainer = {\n  display: 'flex',\n};\nconst flexCol = {\n  flex: 1,\n};\n\nconst ChordButton = React.memo(\n  ({chordData, playChord, setLastChord, octave, strumming, selected}) => {\n    return (\n      <div\n        style={{\n          ...buttonStyle,\n          background: chordTypeColors[chordData.chordType],\n          border: '1px solid',\n          borderColor: selected ? 'rgba(0,0,0,0.2)' : 'transparent',\n        }}\n        onClick={() => {\n          playChord(chordData, octave, strumming);\n          setLastChord(chordData.chordName);\n          console.log(chordData);\n        }}\n      >\n        <div>\n          {chordData.chordName}\n          {SHOW_FULL_CHORD_NAMES && (\n            <div>\n              <small>\n                {chordData.chord.name.length > 3 ? (\n                  chordData.chord.name\n                ) : (\n                  // bad data, don't show\n                  <span>&nbsp;</span>\n                )}\n              </small>\n            </div>\n          )}\n          {true && (\n            <div>\n              {SHOW_NOTE_NAMES && SHOW_NOTE_OCTS && (\n                <small>{chordData.chordNotesForOctave.join()}</small>\n              )}\n\n              {SHOW_NOTE_NAMES && !SHOW_NOTE_OCTS && (\n                <small>{chordData.chord.notes.join()}</small>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\nfunction App({audioApi}) {\n  const resumeAudio = React.useCallback(() => audioApi.actx.resume(), [\n    audioApi,\n  ]);\n  const suspendAudio = React.useCallback(() => audioApi.actx.suspend(), [\n    audioApi,\n  ]);\n\n  const [key, setKey] = useLocalStorage('key', 'C');\n  const [strumming, setStrumming] = useLocalStorage(\n    'strumming',\n    strummingTimes[2]\n  );\n\n  const [includeExtra, setIncludeExtra] = useLocalStorage(\n    'includeExtra',\n    false\n  );\n  const [lastChord, setLastChord] = React.useState(null);\n  const [octave, setOctave] = useLocalStorage('octave', 4);\n  const [scaleType, setScaleType] = useLocalStorage('scaleType', 'major');\n\n  const [history, setHistory] = React.useState([]);\n\n  const scaleData = React.useMemo(() => makeScaleData(key, scaleType, octave), [\n    key,\n    scaleType,\n    octave,\n  ]);\n\n  const toggleExtra = React.useCallback(() => setIncludeExtra(s => !s));\n\n  const [events, setEvents] = React.useState([]);\n  const [midiOut, setMidiOut] = React.useState(null);\n\n  const playScale = React.useCallback(() => {\n    setEvents(events => {\n      let updatedEvents = events;\n      const scaleNotes = scaleData.scaleNotes.slice();\n      scaleNotes.push(Tonal.transpose(scaleNotes[0], '8P'));\n      const currentTime = audioApi.actx.currentTime;\n      let lastStartTimeOffset = 0;\n      scaleNotes.forEach(noteName => {\n        lastStartTimeOffset += beatDurationSeconds;\n\n        updatedEvents = playNote(\n          updatedEvents,\n          noteName,\n          currentTime + lastStartTimeOffset,\n          currentTime + lastStartTimeOffset + beatDurationSeconds\n        );\n      });\n\n      return updatedEvents;\n    });\n  }, [setEvents, audioApi, scaleData]);\n\n  const playChord = React.useCallback(\n    (chordData, octave, strumming) => {\n      const chordNotes = chordData.chordNotesForOctave;\n\n      setEvents(events => {\n        let updatedEvents = events;\n\n        const currentTime = audioApi.actx.currentTime;\n\n        chordNotes.forEach((noteName, i) => {\n          const strumDelay = i * (strumming / 1000);\n          updatedEvents = playNote(\n            updatedEvents,\n            noteName,\n            currentTime + strumDelay,\n            currentTime + beatDurationSeconds + i * (strumming / 1000)\n          );\n        });\n\n        return updatedEvents;\n      });\n\n      setHistory(s => s.concat(chordData));\n    },\n    [setEvents, audioApi]\n  );\n\n  // startup\n  React.useEffect(() => {\n    // start event-consuming interval\n    const id = setInterval(() => {\n      setEvents(events => onTick(events, audioApi, midiOut));\n    }, 1);\n    return () => {\n      clearInterval(id);\n    };\n  }, [midiOut]);\n\n  return (\n    <div className=\"App\">\n      <button onClick={suspendAudio}>pause audio</button>\n      <button onClick={resumeAudio}>resume audio</button>\n      <Recorder actx={audioApi.actx} inputNode={audioApi.dx7} />\n      <MidiOutput selectedOutput={midiOut} onChangeOutput={setMidiOut} />\n      <div>\n        <label>\n          key:{' '}\n          <select\n            value={scaleData.key}\n            onChange={event => setKey(event.currentTarget.value)}\n          >\n            {keys.map(key => (\n              <option key={key} value={key}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </label>{' '}\n        <label>\n          octave:{' '}\n          <select\n            value={octave}\n            onChange={event => setOctave(parseInt(event.currentTarget.value))}\n          >\n            {[1, 2, 3, 4, 5, 6, 7].map(key => (\n              <option key={key} value={key}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </label>{' '}\n        <label>\n          scale type:{' '}\n          <select\n            value={scaleType}\n            onChange={event => setScaleType(event.currentTarget.value)}\n          >\n            {allScales.map(key => (\n              <option key={key} value={key}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </label>{' '}\n        <label>scale notes: </label>\n        {scaleData.scaleNotes.join()}{' '}\n        <button onClick={playScale}>play scale</button>{' '}\n        <label>\n          strumming:\n          <input\n            type=\"range\"\n            min={0}\n            max={9}\n            value={strummingTimesIndex[strumming]}\n            onChange={e => {\n              setStrumming(strummingTimes[parseInt(e.currentTarget.value)]);\n            }}\n          />{' '}\n          <input hidden type=\"number\" value={strumming} readOnly />\n        </label>\n        <label>\n          <input\n            type=\"checkbox\"\n            onChange={toggleExtra}\n            checked={includeExtra}\n          />\n          include extra chords\n        </label>\n      </div>\n\n      <Keyboard />\n\n      <div style={flexColContainer}>\n        <div style={flexCol}>\n          {scaleData.sizes\n            .filter(size => (includeExtra ? true : size > 0))\n            .sort((a, b) => (SIZE_ASC ? a - b : b - a))\n            .map((size, sizeIndex) => (\n              <div key={sizeIndex}>\n                {false && <div style={{flex: 1}}>{size}</div>}\n                <br />\n                <div key={size} style={{display: 'flex'}}>\n                  {Array.from(scaleData.scalePosChords).map(\n                    ([pos, chordDatas]) => {\n                      return (\n                        <div key={pos} style={{flex: 1}}>\n                          {sizeIndex === 0 && (\n                            <div>{scaleTypesPosNames[scaleType][pos]}</div>\n                          )}\n\n                          {chordDatas\n                            .filter(chordData => chordData.size === size)\n                            // silly heuristic for simpler chords\n                            .sort(\n                              (a, b) => a.chordName.length - b.chordName.length\n                            )\n                            .map((chordData, i) => (\n                              <ChordButton\n                                key={i}\n                                {...{\n                                  chordData,\n                                  playChord,\n                                  setLastChord,\n                                  octave,\n                                  strumming,\n                                  selected: chordData.chordName === lastChord,\n                                }}\n                              />\n                            ))}\n                        </div>\n                      );\n                    }\n                  )}\n                </div>\n              </div>\n            ))}\n        </div>\n\n        {SHOW_HISTORY && (\n          <div style={{width: '10vw'}}>\n            <details>\n              <summary>\n                <div>history</div>\n              </summary>\n              <div style={{height: '90vh', overflow: 'auto'}}>\n                {history\n                  .slice()\n                  .reverse()\n                  .map((chordData, i) => (\n                    <ChordButton\n                      key={i}\n                      {...{\n                        chordData,\n                        playChord,\n                        setLastChord: () => {},\n                        octave,\n                        strumming,\n                        selected: false,\n                      }}\n                    />\n                  ))}\n                {history.length === 0 && (\n                  <div>\n                    <br />\n                    played chords will appear here\n                  </div>\n                )}\n              </div>\n            </details>\n          </div>\n        )}\n      </div>\n      <pre style={{height: 300, overflow: 'auto'}}>\n        {events.map(ev => JSON.stringify(ev)).join('\\n')}\n      </pre>\n    </div>\n  );\n}\n\nfunction Theme() {\n  const [darkMode, setDarkMode] = React.useState(false);\n\n  React.useEffect(() => {\n    if (darkMode) {\n      document.documentElement.classList.add('dark-mode');\n    } else {\n      document.documentElement.classList.remove('dark-mode');\n    }\n  }, [darkMode]);\n\n  return (\n    <div style={{position: 'absolute', top: 0, right: 0}}>\n      <label>\n        dark mode:{' '}\n        <input\n          type=\"checkbox\"\n          checked={darkMode}\n          onChange={() => setDarkMode(s => !s)}\n        />\n      </label>\n    </div>\n  );\n}\n\nconst CAN_AUTOPLAY_AUDIO = new AudioContext().state == 'running';\n\nfunction Startup() {\n  const [startedAudio, setStartedAudio] = React.useState(false);\n  const [audioApi, setAudioApi] = React.useState(null);\n\n  const onStart = React.useCallback(() => {\n    document.querySelector('.dx7').style.visibility = 'visible';\n    setStartedAudio(true);\n  }, [setStartedAudio]);\n\n  React.useEffect(() => {\n    window.onDX7Init = (dx7, actx) => {\n      const newAudioApi = {\n        dx7,\n        actx,\n      };\n      if (TEST_PLAY_SCALE) {\n        testPlayScale(newAudioApi);\n      }\n\n      setAudioApi(newAudioApi);\n      if (actx.state === 'running') {\n        onStart();\n      }\n    };\n    initDX7(process.env.PUBLIC_URL);\n  }, []);\n\n  if (audioApi && startedAudio) {\n    return (\n      <div>\n        <App audioApi={audioApi} />\n        <Theme />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      {audioApi ? (\n        <button\n          style={{fontSize: 42, borderRadius: 9, cursor: 'pointer'}}\n          onClick={() => {\n            audioApi.actx.resume();\n            onStart();\n          }}\n        >\n          start\n        </button>\n      ) : (\n        'loading'\n      )}\n    </div>\n  );\n}\n\nexport default Startup;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}